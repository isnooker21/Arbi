"""
‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î - Adaptive Parameters
===============================================

Author: AI Trading System
Version: 2.0 - Simplified & Beautiful
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import sys
from typing import Dict, Any

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import json
import os

class SettingsWindow:
    def __init__(self, parent, trading_system=None):
        self.parent = parent
        self.trading_system = trading_system
        self.settings = {}
        self.original_settings = {}
        self.parameter_vars = {}
        
        # Create settings window
        self.settings_window = tk.Toplevel(parent)
        self.settings_window.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö - Adaptive Parameters")
        self.settings_window.geometry("1600x900")
        self.settings_window.configure(bg='#1e1e1e')
        
        # Load settings
        self.load_settings()
        
        # Setup UI
        self.setup_ui()
        
    def load_settings(self):
        """Load adaptive_params.json"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î config ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            config_file_path = os.path.join('config', 'adaptive_params.json')
            
            if os.path.exists(config_file_path):
                with open(config_file_path, 'r', encoding='utf-8') as f:
                    self.settings = json.load(f)
                    print(f"‚úÖ Loaded config from: {config_file_path}")
                    print(f"üîç Risk per Trade: {self.settings.get('position_sizing', {}).get('lot_calculation', {}).get('risk_per_trade_percent')}")
            else:
                print(f"‚ùå Config file not found: {config_file_path}")
                self.settings = {}
            
            # Store original settings for comparison
            self.original_settings = json.loads(json.dumps(self.settings))
            
        except Exception as e:
            print(f"‚ùå Error loading config: {e}")
            messagebox.showerror("Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            self.settings = {}
            self.original_settings = {}
    
    def setup_ui(self):
        """Setup the settings interface"""
        # Header
        header_frame = tk.Frame(self.settings_window, bg='#2d2d2d', height=60)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(
            header_frame,
            text="‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Adaptive Parameters",
            font=('Arial', 16, 'bold'),
            bg='#2d2d2d',
            fg='#FFD700'
        ).pack(side='left', padx=20, pady=15)
        
        # Control buttons in header
        btn_frame = tk.Frame(header_frame, bg='#2d2d2d')
        btn_frame.pack(side='right', padx=20, pady=15)
        
        tk.Button(
            btn_frame,
            text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
            command=self.save_settings,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 11, 'bold'),
            padx=20,
            pady=8,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=5)
        
        tk.Button(
            btn_frame,
            text="üîÑ Refresh",
            command=self.refresh_gui_values,
            bg='#2196F3',
            fg='white',
            font=('Arial', 11, 'bold'),
            padx=20,
            pady=8,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=5)
        
        tk.Button(
            btn_frame,
            text="üîÑ Reset",
            command=self.reset_settings,
            bg='#FF9800',
            fg='white',
            font=('Arial', 11, 'bold'),
            padx=20,
            pady=8,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=5)
        
        tk.Button(
            btn_frame,
            text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            command=self.cancel_settings,
            bg='#666666',
            fg='white',
            font=('Arial', 11, 'bold'),
            padx=20,
            pady=8,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=5)
        
        # Main content area with scrollbar
        main_container = tk.Frame(self.settings_window, bg='#1e1e1e')
        main_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Create canvas for scrolling
        canvas = tk.Canvas(main_container, bg='#1e1e1e', highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#1e1e1e')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # === Create 2-column layout ===
        left_column = tk.Frame(scrollable_frame, bg='#1e1e1e')
        left_column.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        right_column = tk.Frame(scrollable_frame, bg='#1e1e1e')
        right_column.pack(side='left', fill='both', expand=True, padx=(10, 0))
        
        # === LEFT COLUMN ===
        
        # 1. Recovery Parameters
        self.create_section(left_column, "üîß Recovery Parameters (‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ)", [
            ("‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (%)", "recovery_params.loss_thresholds.min_loss_percent", 
             "float", -0.02, 0.0, "‡πÄ‡∏ä‡πà‡∏ô -0.005 = ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô 0.5% ‡∏Ç‡∏≠‡∏á balance ‡∏à‡∏∂‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ"),
            ("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (pips)", "recovery_params.loss_thresholds.min_price_distance_pips", 
             "int", 5, 50, "‡πÄ‡∏ä‡πà‡∏ô 10 = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πà‡∏≤‡∏á 10 pips ‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ"),
            ("‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", "recovery_params.timing.min_position_age_seconds", 
             "int", 30, 300, "‡πÄ‡∏ä‡πà‡∏ô 60 = ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πâ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏ö 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"),
            ("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", "recovery_params.timing.cooldown_between_checks", 
             "int", 5, 60, "‡πÄ‡∏ä‡πà‡∏ô 10 = ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"),
            ("Correlation ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", "recovery_params.correlation_thresholds.min_correlation", 
             "float", 0.3, 0.95, "‡πÄ‡∏ä‡πà‡∏ô 0.6 = ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ correlation >= 60%")
        ])
        
        # 2. Chain Recovery
        self.create_section(left_column, "üîó Chain Recovery (‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "recovery_params.chain_recovery.enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πâ recovery ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏µ‡∏Å"),
            ("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "recovery_params.chain_recovery.max_chain_depth", 
             "int", 1, 5, "‡πÄ‡∏ä‡πà‡∏ô 2 = ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÑ‡∏î‡πâ‡∏•‡∏∂‡∏Å 2 ‡∏ä‡∏±‡πâ‡∏ô"),
            ("‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chain (%)", "recovery_params.chain_recovery.min_loss_percent_for_chain", 
             "float", -0.02, 0.0, "‡πÄ‡∏ä‡πà‡∏ô -0.006 = ‡πÑ‡∏°‡πâ recovery ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô 0.6%")
        ])
        
        # 3. Trailing Stop
        self.create_section(left_column, "üîí Trailing Stop (‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≥‡πÑ‡∏£)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "arbitrage_params.closing.trailing_stop_enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏±‡∏ö"),
            ("‡∏£‡∏∞‡∏¢‡∏∞ Stop (USD)", "arbitrage_params.closing.trailing_stop_distance", 
             "float", 5.0, 50.0, "‡πÄ‡∏ä‡πà‡∏ô 10 = ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏•‡∏î‡∏à‡∏≤‡∏Å peak $10 ‡∏Å‡πá‡∏õ‡∏¥‡∏î"),
            ("‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (USD)", "arbitrage_params.closing.min_profit_base", 
             "float", 1.0, 50.0, "‡πÄ‡∏ä‡πà‡∏ô 5 = ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡πÑ‡∏£ $5 ‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° trailing"),
            ("Balance ‡∏ê‡∏≤‡∏ô (USD)", "arbitrage_params.closing.min_profit_base_balance", 
             "float", 5000.0, 100000.0, "‡πÄ‡∏ä‡πà‡∏ô 10000 = ‡∏ê‡∏≤‡∏ô $10K")
        ])
        
        # 4. Trend Analysis
        self.create_section(left_column, "üìä Trend Analysis (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "recovery_params.trend_analysis.enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ"),
            ("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô MA Periods", "recovery_params.trend_analysis.periods", 
             "int", 20, 200, "‡πÄ‡∏ä‡πà‡∏ô 50 = ‡πÉ‡∏ä‡πâ Moving Average 50 periods"),
            ("Confidence ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", "recovery_params.trend_analysis.confidence_threshold", 
             "float", 0.1, 0.9, "‡πÄ‡∏ä‡πà‡∏ô 0.4 = ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à 40%")
        ])
        
        # 5. Market Regimes (‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î)
        self.create_section(left_column, "üåä Market Regimes (‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î)", [
            ("Threshold Volatile", "market_regimes.volatile.arbitrage_threshold", 
             "float", 0.001, 0.01, "‡πÄ‡∏ä‡πà‡∏ô 0.002 = ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô threshold 0.2%"),
            ("Threshold Trending", "market_regimes.trending.arbitrage_threshold", 
             "float", 0.001, 0.01, "‡πÄ‡∏ä‡πà‡∏ô 0.0015 = ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå threshold 0.15%"),
            ("Threshold Ranging", "market_regimes.ranging.arbitrage_threshold", 
             "float", 0.0005, 0.005, "‡πÄ‡∏ä‡πà‡∏ô 0.0008 = ‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå threshold 0.08%"),
            ("Threshold Normal", "market_regimes.normal.arbitrage_threshold", 
             "float", 0.0005, 0.005, "‡πÄ‡∏ä‡πà‡∏ô 0.001 = ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ threshold 0.1%")
        ])
        
        # === RIGHT COLUMN ===
        
        # 6. Lot Sizing (Risk-Based) ‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        self.create_section(right_column, "üí∞ Lot Sizing (Risk-Based) ‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", [
            ("Risk per Trade (%)", "position_sizing.lot_calculation.risk_per_trade_percent", 
             "float", 0.1, 5.0, "‡πÄ‡∏ä‡πà‡∏ô 1.0 = ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á 1% ‡∏Ç‡∏≠‡∏á balance ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô 100 pips"),
            ("Max Loss Pips", "position_sizing.lot_calculation.max_loss_pips", 
             "int", 50, 200, "‡πÄ‡∏ä‡πà‡∏ô 100 = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å 100 pips movement")
        ])
        
        # 7. Arbitrage Settings
        self.create_section(right_column, "‚ö° Arbitrage Settings", [
            ("Threshold ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", "arbitrage_params.detection.min_threshold", 
             "float", 0.00001, 0.01, "‡πÄ‡∏ä‡πà‡∏ô 0.0001 = ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á >= 0.01%"),
            ("Triangle ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "arbitrage_params.triangles.max_active_triangles", 
             "int", 1, 10, "‡πÄ‡∏ä‡πà‡∏ô 4 = ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 groups"),
            ("Spread Tolerance", "arbitrage_params.detection.spread_tolerance", 
             "float", 0.1, 2.0, "‡πÄ‡∏ä‡πà‡∏ô 0.5 = ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö spread 0.5 pips")
        ])
        
        # 9. Multi-Armed Bandit
        self.create_section(right_column, "ü§ñ Multi-Armed Bandit (ML)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ML", "recovery_params.multi_armed_bandit.enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å pair ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
            ("Exploration Rate", "recovery_params.multi_armed_bandit.exploration_rate", 
             "float", 0.0, 1.0, "‡πÄ‡∏ä‡πà‡∏ô 0.2 = ‡∏ó‡∏î‡∏•‡∏≠‡∏á pair ‡πÉ‡∏´‡∏°‡πà 20%"),
            ("Learning Rate", "recovery_params.multi_armed_bandit.learning_rate", 
             "float", 0.0, 1.0, "‡πÄ‡∏ä‡πà‡∏ô 0.1 = ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ä‡πâ‡∏≤‡πÜ ‡πÅ‡∏ï‡πà‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á")
        ])
        
        # 10. Hedge Ratios (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ)
        self.create_section(right_column, "‚öñÔ∏è Hedge Ratios (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ)", [
            ("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "recovery_params.hedge_ratios.min_ratio", 
             "float", 0.1, 2.0, "‡πÄ‡∏ä‡πà‡∏ô 0.7 = hedge lot ‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 70% ‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°"),
            ("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "recovery_params.hedge_ratios.max_ratio", 
             "float", 0.5, 5.0, "‡πÄ‡∏ä‡πà‡∏ô 2.0 = hedge lot ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200% ‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°"),
            ("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", "recovery_params.hedge_ratios.default_ratio", 
             "float", 0.5, 2.0, "‡πÄ‡∏ä‡πà‡∏ô 1.0 = hedge lot ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°")
        ])
        
        # 12. Diversification (‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)
        self.create_section(right_column, "üéØ Diversification (‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)", [
            ("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "recovery_params.diversification.max_usage_per_symbol", 
             "int", 1, 10, "‡πÄ‡∏ä‡πà‡∏ô 3 = ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"),
            ("‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î", "recovery_params.diversification.enforce_limit", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
        ])
        
        # 13. Triangle Management
        self.create_section(right_column, "üî∫ Triangle Management", [
            ("‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠ Triangle (‡∏ô‡∏≤‡∏ó‡∏µ)", "arbitrage_params.triangles.triangle_hold_time_minutes", 
             "int", 30, 480, "‡πÄ‡∏ä‡πà‡∏ô 120 = ‡∏ñ‡∏∑‡∏≠ triangle ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"),
            ("‡πÄ‡∏ä‡πá‡∏Ñ Correlation ‡∏ó‡∏∏‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", "arbitrage_params.triangles.correlation_check_interval", 
             "int", 30, 300, "‡πÄ‡∏ä‡πà‡∏ô 60 = ‡πÄ‡∏ä‡πá‡∏Ñ correlation ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ"),
            ("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≥‡πÑ‡∏£", "arbitrage_params.closing.lock_profit_percentage", 
             "float", 0.1, 1.0, "‡πÄ‡∏ä‡πà‡∏ô 0.5 = ‡∏•‡πá‡∏≠‡∏Ñ 50% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        ])
        
        # 14. ML Logging
        self.create_section(right_column, "ü§ñ ML Logging (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ML Logging", "recovery_params.ml_logging.enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML Training"),
            ("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database", "recovery_params.ml_logging.log_to_database", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
            ("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Market Features", "recovery_params.ml_logging.log_market_features", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î"),
            ("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Decision Process", "recovery_params.ml_logging.log_decision_process", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à")
        ])
        
        # 15. Auto Registration
        self.create_section(right_column, "üìù Auto Registration (‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", [
            ("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Registration", "recovery_params.auto_registration.enabled", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
            ("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö", "recovery_params.auto_registration.register_on_startup", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"),
            ("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà", "recovery_params.auto_registration.register_on_new_orders", 
             "bool", "‡πÄ‡∏õ‡∏¥‡∏î = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"),
            ("Sync ‡∏ó‡∏∏‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", "recovery_params.auto_registration.sync_interval_seconds", 
             "int", 10, 300, "‡πÄ‡∏ä‡πà‡∏ô 30 = sync ‡∏Å‡∏±‡∏ö MT5 ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        ])
        
        # 16. System Limits
        self.create_section(right_column, "‚öôÔ∏è System Limits (‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏ö‡∏ö)", [
            ("Max Portfolio Risk (%)", "position_sizing.risk_management.max_portfolio_risk", 
             "float", 1.0, 20.0, "‡πÄ‡∏ä‡πà‡∏ô 8.0 = ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 8% ‡∏Ç‡∏≠‡∏á balance"),
            ("Max Concurrent Groups", "position_sizing.risk_management.max_concurrent_groups", 
             "int", 1, 10, "‡πÄ‡∏ä‡πà‡∏ô 4 = ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 groups")
        ])
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_section(self, parent, title, parameters):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á section ‡∏û‡∏£‡πâ‡∏≠‡∏° parameters"""
        section_frame = tk.Frame(parent, bg='#2d2d2d', relief='raised', bd=2)
        section_frame.pack(fill='x', pady=(0, 20))
        
        # Section header
        header_frame = tk.Frame(section_frame, bg='#3d3d3d', height=45)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(
            header_frame,
            text=title,
            font=('Arial', 12, 'bold'),
            bg='#3d3d3d',
            fg='#FFD700'
        ).pack(side='left', padx=15, pady=10)
        
        # Parameters container
        params_container = tk.Frame(section_frame, bg='#2d2d2d')
        params_container.pack(fill='x', padx=15, pady=15)
        
        # Create parameters
        for param in parameters:
            self.create_parameter_row(params_container, param)
    
    def create_parameter_row(self, parent, param):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ parameter"""
        param_name = param[0]
        param_path = param[1]
        param_type = param[2]
        
        # Main row frame
        row_frame = tk.Frame(parent, bg='#2d2d2d')
        row_frame.pack(fill='x', pady=8)
        
        # Label (left side)
        tk.Label(
            row_frame,
            text=param_name,
            font=('Arial', 11, 'bold'),
            bg='#2d2d2d',
            fg='#FFFFFF',
            anchor='w',
            width=25
        ).pack(side='left', padx=(0, 15))
        
        # Input frame (middle) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ pack_propagate(False)
        input_frame = tk.Frame(row_frame, bg='#2d2d2d')
        input_frame.pack(side='left', padx=(0, 15))
        
        # Get current value
        current_value = self.get_nested_value(self.settings, param_path)
        
        # üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Risk per Trade
        if 'risk_per_trade_percent' in param_path:
            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô float ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô string
            if current_value is None:
                current_value = 1.0
            else:
                current_value = float(current_value)
            param_type = "float"  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô float
        
        if current_value is None:
            if param_type == "float":
                current_value = 0.0
            elif param_type == "int":
                current_value = 0
            elif param_type == "bool":
                current_value = False
            else:
                current_value = 0.0
        
        if param_type == "bool":
            # Boolean checkbox with custom style (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Risk per Trade)
            var = tk.BooleanVar(value=current_value)
            cb = tk.Checkbutton(
                input_frame,
                variable=var,
                bg='#2d2d2d',
                fg='#FFFFFF',
                selectcolor='#4CAF50',
                activebackground='#2d2d2d',
                font=('Arial', 11),
                highlightthickness=0
            )
            cb.pack(side='left', padx=5, pady=2)
            
            # Status label
            status_label = tk.Label(
                input_frame,
                text="‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î" if current_value else "‚ùå ‡∏õ‡∏¥‡∏î",
                font=('Arial', 10, 'bold'),
                bg='#2d2d2d',
                fg='#4CAF50' if current_value else '#FF5252'
            )
            status_label.pack(side='left', padx=8, pady=2)
            
            # Update status when checkbox changes
            def update_status(*args):
                is_enabled = var.get()
                status_label.config(
                    text="‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î" if is_enabled else "‚ùå ‡∏õ‡∏¥‡∏î",
                    fg='#4CAF50' if is_enabled else '#FF5252'
                )
            var.trace('w', update_status)
            
        elif param_type == "string":
            # String entry with dropdown for tier selection
            if "force_tier" in param_path:
                # Tier dropdown
                tier_options = ["auto", "starter", "standard", "premium", "vip"]
                var = tk.StringVar(value=str(current_value) if current_value else "auto")
                dropdown = ttk.Combobox(
                    input_frame,
                    textvariable=var,
                    values=tier_options,
                    state="readonly",
                    width=12,
                    font=('Arial', 11, 'bold')
                )
                dropdown.pack(side='left', padx=5, pady=2)
            else:
                # Regular string entry
                var = tk.StringVar(value=str(current_value))
                entry = tk.Entry(
                    input_frame,
                    textvariable=var,
                    width=15,
                    font=('Consolas', 12, 'bold'),
                    bg='#FFFFFF',
                    fg='#000000',
                    insertbackground='#FF0000',
                    relief='solid',
                    bd=2,
                    justify='center'
                )
                entry.pack(side='left', padx=5, pady=2, ipady=3)
        
        elif param_type == "int" or param_type == "float":
            # Number entry with custom style (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Risk per Trade ‡πÉ‡∏ä‡πâ String variable)
            var = tk.StringVar(value=str(current_value))
            
            entry = tk.Entry(
                input_frame,
                textvariable=var,
                width=15,
                font=('Consolas', 12, 'bold'),
                bg='#FFFFFF',
                fg='#000000',
                insertbackground='#FF0000',
                relief='solid',
                bd=2,
                justify='center'
            )
            entry.pack(side='left', padx=5, pady=2, ipady=3)
            
            # Add validation with range
            if len(param) > 4:
                min_val, max_val = param[3], param[4]
                if param_type == "int":
                    entry.bind('<FocusOut>', lambda e, v=var, mn=min_val, mx=max_val: self.validate_int_range(v, mn, mx))
                else:
                    entry.bind('<FocusOut>', lambda e, v=var, mn=min_val, mx=max_val: self.validate_float_range(v, mn, mx))
            
            # Range label
            if len(param) > 4:
                range_label = tk.Label(
                    input_frame,
                    text=f"[{param[3]} ‡∏ñ‡∏∂‡∏á {param[4]}]",
                    font=('Arial', 9, 'italic'),
                    bg='#2d2d2d',
                    fg='#FFA500'
                )
                range_label.pack(side='left', padx=8, pady=2)
        
        # Description frame (right side)
        if len(param) > 5:
            description = param[5]
            desc_label = tk.Label(
                row_frame,
                text=description,
                font=('Arial', 9),
                bg='#2d2d2d',
                fg='#AAAAAA',
                wraplength=350,
                justify='left',
                anchor='w'
            )
            desc_label.pack(side='left', padx=10, fill='x', expand=True)
        
        # Store variable reference
        self.parameter_vars[param_path] = var
    
    def get_nested_value(self, data, path):
        """Get value from nested dictionary using dot notation"""
        keys = path.split('.')
        value = data
        for key in keys:
            if isinstance(value, dict) and key in value:
                value = value[key]
            else:
                return None
        return value
    
    def set_nested_value(self, data, path, value):
        """Set value in nested dictionary using dot notation"""
        keys = path.split('.')
        current = data
        for key in keys[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        current[keys[-1]] = value
    
    def validate_int_range(self, var, min_val, max_val):
        """Validate integer input with range"""
        try:
            value = int(var.get())
            value = max(min_val, min(max_val, value))
            var.set(str(value))
        except ValueError:
            var.set(str(min_val))
    
    def validate_float_range(self, var, min_val, max_val):
        """Validate float input with range"""
        try:
            value = float(var.get())
            value = max(min_val, min(max_val, value))
            if abs(value) < 0.01:
                var.set(f"{value:.6f}".rstrip('0').rstrip('.'))
            else:
                var.set(f"{value:.4f}".rstrip('0').rstrip('.'))
        except ValueError:
            var.set(str(min_val))
    
    def save_settings(self):
        """Save all settings to adaptive_params.json"""
        try:
            # Update settings from UI
            print(f"üîç Updating settings from {len(self.parameter_vars)} parameters")
            
            for param_path, var in self.parameter_vars.items():
                value = var.get()
                print(f"üîç {param_path}: {value} (type: {type(value)})")
                
                # Convert value based on type
                if isinstance(value, bool):
                    pass
                elif isinstance(value, str):
                    if value.lower() in ['true', 'false', '1', '0']:
                        value = value.lower() in ['true', '1']
                    elif value.replace('.', '', 1).replace('-', '', 1).isdigit():
                        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                        value = float(value)
                    elif '.' not in value and value.lstrip('-').isdigit():
                        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô integer ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
                        value = float(value)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô risk_per_trade_percent ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if 'risk_per_trade_percent' in param_path:
                    print(f"üéØ Risk per Trade value: {value}")
                
                self.set_nested_value(self.settings, param_path, value)
            
            # Save to file - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ save ‡πÑ‡∏õ‡∏ó‡∏µ‡πà path ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö load
            import os
            config_file_path = os.path.join('config', 'adaptive_params.json')
            
            print(f"üîç Attempting to save to: {config_file_path}")
            print(f"üîç File exists: {os.path.exists(config_file_path)}")
            print(f"üîç Current working directory: {os.getcwd()}")
            print(f"üîç Absolute path: {os.path.abspath(config_file_path)}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not os.path.exists(config_file_path):
                raise Exception(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config: {config_file_path}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
            if not os.access(config_file_path, os.W_OK):
                raise Exception(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå: {config_file_path}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            import json
            try:
                with open(config_file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.settings, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ Config saved successfully to: {config_file_path}")
            except Exception as e:
                print(f"‚ùå Error writing file: {e}")
                raise Exception(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            import time
            time.sleep(0.1)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            
            if os.path.exists(config_file_path):
                # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                with open(config_file_path, 'r', encoding='utf-8') as f:
                    saved_config = json.load(f)
                    saved_risk = saved_config.get('position_sizing', {}).get('lot_calculation', {}).get('risk_per_trade_percent')
                    print(f"üîç Saved risk value: {saved_risk}")
            
            # üÜï Auto Reload Config (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Restart!)
            reload_success = False
            if self.trading_system:
                try:
                    # Reload correlation_manager config
                    if hasattr(self.trading_system, 'correlation_manager') and self.trading_system.correlation_manager:
                        self.trading_system.correlation_manager.reload_config()
                        print("‚úÖ Correlation Manager config reloaded")
                    
                    # Reload arbitrage_detector config
                    if hasattr(self.trading_system, 'arbitrage_detector') and self.trading_system.arbitrage_detector:
                        self.trading_system.arbitrage_detector.reload_config()
                        print("‚úÖ Arbitrage Detector config reloaded")
                    
                    reload_success = True
                except Exception as e:
                    print(f"‚ùå Reload error: {e}")
                    messagebox.showwarning("‚ö†Ô∏è Warning", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà reload ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {str(e)}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Restart ‡∏£‡∏∞‡∏ö‡∏ö")
            
            if reload_success:
                messagebox.showinfo(
                    "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                    f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n‚úÖ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Restart!\n\nRisk per Trade: {saved_risk}%"
                )
            else:
                messagebox.showinfo(
                    "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                    f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Restart ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà\n\nRisk per Trade: {saved_risk}%"
                )
            
            # üîÑ Refresh GUI ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
            self.refresh_gui_values()
            
            # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            self.settings_window.destroy()
            
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {str(e)}")
    
    def refresh_gui_values(self):
        """Refresh GUI values after saving config"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
            self.load_settings()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô GUI
            for param_path, var in self.parameter_vars.items():
                current_value = self.get_nested_value(self.settings, param_path)
                if current_value is not None:
                    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GUI variable
                    var.set(str(current_value))
                    
                    # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Risk per Trade ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á log
                    if 'risk_per_trade_percent' in param_path:
                        print(f"üéØ Refreshed Risk per Trade: {current_value}")
            
            print("‚úÖ GUI values refreshed successfully")
            
        except Exception as e:
            print(f"‚ùå Error refreshing GUI: {e}")
    
    def reset_settings(self):
        """Reset settings to original values"""
        try:
            if messagebox.askyesno("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "Reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°?"):
                self.settings = json.loads(json.dumps(self.original_settings))
                self.settings_window.destroy()
                SettingsWindow(self.parent)
                
        except Exception as e:
            messagebox.showerror("Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ reset ‡πÑ‡∏î‡πâ: {str(e)}")
    
    def cancel_settings(self):
        """Cancel settings changes"""
        if self.settings != self.original_settings:
            if messagebox.askyesno("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
                self.settings_window.destroy()
        else:
            self.settings_window.destroy()
    
    def show(self):
        """Show the settings window"""
        self.settings_window.deiconify()
        self.settings_window.lift()
