#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI ‡πÅ‡∏•‡∏∞ Command Line

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    python run.py                    # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI
    python run.py --gui             # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI
    python run.py --cli             # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Command Line
    python run.py --test            # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    python run.py --help            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
"""

import sys
import os
import argparse
import logging
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def setup_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Logging"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs
    os.makedirs("logs", exist_ok=True)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f"logs/run_{datetime.now().strftime('%Y%m%d')}.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger(__name__)

def run_gui():
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö GUI"""
    try:
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI ‡πÅ‡∏ö‡∏ö GUI...")
        
        # ‡πÉ‡∏ä‡πâ main.py ‡πÅ‡∏ó‡∏ô
        from main import main
        main()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô GUI: {e}")
        sys.exit(1)

def run_cli():
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Command Line"""
    try:
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI ‡πÅ‡∏ö‡∏ö Command Line...")
        
        # ‡πÉ‡∏ä‡πâ main.py ‡πÅ‡∏ó‡∏ô
        import sys
        sys.argv = ['main.py', '--cli']
        from main import main
        main()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô CLI: {e}")
        sys.exit(1)

def run_auto_setup():
    """‡∏£‡∏±‡∏ô Auto Setup"""
    try:
        print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ Auto Setup...")
        
        # ‡πÉ‡∏ä‡πâ main.py ‡πÅ‡∏ó‡∏ô
        import sys
        sys.argv = ['main.py', '--cli']  # ‡πÉ‡∏ä‡πâ CLI mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ auto setup
        from main import main
        main()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Auto Setup: {e}")
        sys.exit(1)

def run_test():
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    try:
        print("üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI...")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules
        print("üì¶ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules...")
        
        try:
            from trading.broker_api import BrokerAPI
            print("   ‚úì BrokerAPI")
        except Exception as e:
            print(f"   ‚úó BrokerAPI: {e}")
        
        try:
            from trading.arbitrage_detector import TriangleArbitrageDetector
            print("   ‚úì TriangleArbitrageDetector")
        except Exception as e:
            print(f"   ‚úó TriangleArbitrageDetector: {e}")
        
        try:
            from ai.rule_engine import RuleEngine
            print("   ‚úì RuleEngine")
        except Exception as e:
            print(f"   ‚úó RuleEngine: {e}")
        
        try:
            from gui.main_window import MainWindow
            print("   ‚úì MainWindow")
        except Exception as e:
            print(f"   ‚úó MainWindow: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        print("\nüßÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...")
        
        try:
            from utils.calculations import TradingCalculations
            calc = TradingCalculations()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Arbitrage
            arbitrage = calc.calculate_arbitrage_percentage(1.1000, 110.00, 121.50)
            print(f"   ‚úì Arbitrage Calculation: {arbitrage:.4f}%")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Correlation
            prices1 = [1.1000, 1.1010, 1.1020, 1.1030, 1.1040]
            prices2 = [110.00, 110.10, 110.20, 110.30, 110.40]
            correlation = calc.calculate_correlation(prices1, prices2)
            print(f"   ‚úì Correlation Calculation: {correlation:.4f}")
            
        except Exception as e:
            print(f"   ‚úó Calculations: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        print("\n‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
        
        try:
            import json
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            with open('config/settings.json', 'r') as f:
                settings = json.load(f)
            print("   ‚úì Settings file")
            
            with open('config/rules.json', 'r') as f:
                rules = json.load(f)
            print("   ‚úì Rules file")
            
            with open('config/broker_config.json', 'r') as f:
                broker_config = json.load(f)
            print("   ‚úì Broker config file")
            
        except Exception as e:
            print(f"   ‚úó Configuration: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        print("\nüìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå...")
        
        try:
            os.makedirs("data", exist_ok=True)
            os.makedirs("logs", exist_ok=True)
            print("   ‚úì Data and logs directories")
        except Exception as e:
            print(f"   ‚úó Directories: {e}")
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        print("üìù ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies")
        print("üìù ‡πÉ‡∏ä‡πâ pip install -r requirements.txt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        sys.exit(1)

def show_help():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    print("""
üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI - ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    python run.py                    # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
    python run.py --gui             # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI
    python run.py --auto-setup      # ‡∏ó‡∏≥ Auto Setup (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà)
    python run.py --cli             # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Command Line
    python run.py --test            # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    python run.py --help            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡∏µ‡πâ

‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
    üîç Triangular Arbitrage Detection
    üîó Correlation Recovery System
    ü§ñ AI Rule Engine
    üìä Real-time Charts
    ‚öôÔ∏è Risk Management
    üìà Performance Tracking

‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:
    1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Broker ‡πÉ‡∏ô config/broker_config.json
    2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô config/settings.json
    3. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå AI ‡πÉ‡∏ô config/rules.json

‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log Files ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs/
    - ‡πÉ‡∏ä‡πâ --test ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies

üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
    - README.md: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö
    - INSTALLATION.md: ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    - USER_GUIDE.md: ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
""")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
    logger = setup_logging()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á argument parser
    parser = argparse.ArgumentParser(
        description="‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--gui', 
        action='store_true', 
        help='‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö GUI (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)'
    )
    
    parser.add_argument(
        '--cli', 
        action='store_true', 
        help='‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Command Line'
    )
    
    parser.add_argument(
        '--test', 
        action='store_true', 
        help='‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
    )
    
    parser.add_argument(
        '--auto-setup', 
        action='store_true', 
        help='‡∏ó‡∏≥ Auto Setup ‡∏£‡∏∞‡∏ö‡∏ö (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà)'
    )
    
    parser.add_argument(
        '--help', 
        action='store_true', 
        help='‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠'
    )
    
    # Parse arguments
    args = parser.parse_args()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    print("=" * 60)
    print("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex AI")
    print("   Triangular Arbitrage & Correlation Recovery")
    print("   ‡∏û‡∏£‡πâ‡∏≠‡∏° AI Engine ‡πÅ‡∏•‡∏∞ GUI")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arguments
    if args.help:
        show_help()
    elif args.auto_setup:
        run_auto_setup()
    elif args.test:
        run_test()
    elif args.cli:
        run_cli()
    else:
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ GUI
        run_gui()

if __name__ == "__main__":
    main()
