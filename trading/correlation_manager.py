"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Correlation ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Active Recovery Engine
================================================================

‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
- ‡∏£‡∏∞‡∏ö‡∏ö Never-Cut-Loss ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Correlation Recovery
- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Recovery ‡πÅ‡∏ö‡∏ö Real-time
- Chain Recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á EUR/USD ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
2. ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô GBP/USD
3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hedge ratio ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
4. ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GBP/USD ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
5. ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Real-time
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Tuple, Optional
import threading
from utils.calculations import TradingCalculations

class CorrelationManager:
    def __init__(self, broker_api, ai_engine=None):
        self.broker = broker_api
        # self.ai = ai_engine  # DISABLED for simple trading system
        self.correlation_matrix = {}
        self.recovery_positions = {}
        self.is_running = False
        self.logger = logging.getLogger(__name__)
        
        # Active Recovery Engine parameters
        self.recovery_mode = 'active'  # active, passive, disabled
        self.hedge_ratio_optimization = True
        self.portfolio_rebalancing = True
        self.multi_timeframe_analysis = True
        
        # Recovery thresholds - More flexible for all market conditions
        self.recovery_thresholds = {
            'min_correlation': 0.5,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 50% (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà)
            'max_correlation': 0.95,     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 95%
            'min_loss_threshold': -0.005, # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ -0.5%
            'max_recovery_time_hours': 24, # ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            'hedge_ratio_range': (0.3, 2.5),  # ‡∏Ç‡∏ô‡∏≤‡∏î hedge ratio
            'wait_time_minutes': 5,      # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            'base_lot_size': 0.1         # ‡∏Ç‡∏ô‡∏≤‡∏î lot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }
        
        # Portfolio balance threshold
        self.portfolio_balance_threshold = 0.1  # 10% imbalance threshold
        
        # Never-Cut-Loss flag
        self.never_cut_loss = True
        
        # Performance tracking
        self.recovery_metrics = {
            'total_recoveries': 0,
            'successful_recoveries': 0,
            'failed_recoveries': 0,
            'avg_recovery_time_hours': 0,
            'total_recovered_amount': 0.0
        }
        
        # Multi-timeframe correlation cache
        self.recovery_chains = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery chain ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥)
        self.hedged_pairs = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (symbol)
        self.hedged_positions = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (order_id -> position_info)
        self.hedged_groups = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (group_id -> hedged_info)
        
        # ‡∏£‡∏∞‡∏ö‡∏ö Save/Load ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.persistence_file = "data/recovery_positions.json"
        
        # Load existing recovery data on startup
        self._load_recovery_data()
        
    def start_chain_recovery(self, group_id: str, losing_pairs: List[Dict]):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° chain recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            self.logger.info("=" * 80)
            self.logger.info(f"üîó STARTING CHAIN RECOVERY FOR GROUP {group_id}")
            self.logger.info("=" * 80)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            self._log_group_hedging_status(group_id, losing_pairs)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á recovery chain
            recovery_chain = {
                'group_id': group_id,
                'started_at': datetime.now(),
                'original_pairs': losing_pairs,
                'recovery_pairs': [],
                'status': 'active',
                'current_chain': []
            }
            
            self.recovery_chains[group_id] = recovery_chain
            self._update_recovery_data()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            for pair in losing_pairs:
                self._start_pair_recovery(group_id, pair)
                
        except Exception as e:
            self.logger.error(f"Error starting chain recovery: {e}")
    
    def _log_group_hedging_status(self, group_id: str, losing_pairs: List[Dict]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        try:
            self.logger.info("üìä GROUP HEDGING STATUS:")
            self.logger.info("-" * 50)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            self.logger.info("üî¥ LOSING ARBITRAGE POSITIONS:")
            for i, pair in enumerate(losing_pairs, 1):
                symbol = pair['symbol']
                order_id = pair.get('order_id', 'N/A')
                is_hedged = self._is_position_hedged(pair)
                status = "‚úÖ HEDGED" if is_hedged else "‚ùå NOT HEDGED"
                
                self.logger.info(f"   {i}. {symbol} (Order: {order_id}) - {status}")
                
                if not is_hedged:
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                    risk_per_lot = self._calculate_risk_per_lot(pair)
                    price_distance = self._calculate_price_distance(pair)
                    
                    risk_status = "‚úÖ" if risk_per_lot >= 0.05 else "‚ùå"
                    distance_status = "‚úÖ" if price_distance >= 10 else "‚ùå"
                    
                    self.logger.info(f"      Risk: {risk_per_lot:.2%} (‚â•5%) {risk_status}")
                    self.logger.info(f"      Distance: {price_distance:.1f} pips (‚â•10) {distance_status}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ correlation ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            self.logger.info("üîÑ EXISTING CORRELATION POSITIONS:")
            correlation_count = 0
            for recovery_id, position in self.recovery_positions.items():
                if position.get('group_id') == group_id and position.get('status') == 'active':
                    correlation_count += 1
                    symbol = position['symbol']
                    order_id = position.get('order_id', 'N/A')
                    is_hedged = self._is_position_hedged(position)
                    status = "‚úÖ HEDGED" if is_hedged else "‚ùå NOT HEDGED"
                    
                    self.logger.info(f"   {correlation_count}. {symbol} (Order: {order_id}) - {status}")
                    
                    if not is_hedged:
                        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                        risk_per_lot = self._calculate_risk_per_lot(position)
                        price_distance = self._calculate_price_distance(position)
                        
                        risk_status = "‚úÖ" if risk_per_lot >= 0.05 else "‚ùå"
                        distance_status = "‚úÖ" if price_distance >= 10 else "‚ùå"
                        
                        self.logger.info(f"      Risk: {risk_per_lot:.2%} (‚â•5%) {risk_status}")
                        self.logger.info(f"      Distance: {price_distance:.1f} pips (‚â•10) {distance_status}")
            
            if correlation_count == 0:
                self.logger.info("   No existing correlation positions")
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            total_positions = len(losing_pairs) + correlation_count
            hedged_count = sum(1 for pair in losing_pairs if self._is_position_hedged(pair))
            hedged_count += sum(1 for position in self.recovery_positions.values() 
                              if position.get('group_id') == group_id and 
                              position.get('status') == 'active' and 
                              self._is_position_hedged(position))
            
            self.logger.info("-" * 50)
            self.logger.info(f"üìà SUMMARY: {hedged_count}/{total_positions} positions hedged")
            self.logger.info("=" * 80)
            
        except Exception as e:
            self.logger.error(f"Error logging group hedging status: {e}")
    
    def _is_position_hedged(self, position: Dict) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å order_id
            if order_id and order_id in self.hedged_positions:
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å symbol
            if symbol and symbol in self.hedged_pairs:
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Error checking if position is hedged: {e}")
            return False
    
    def _calculate_risk_per_lot(self, position: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk ‡∏ï‡πà‡∏≠ lot ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á account balance"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if not order_id:
                return 0.0
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PnL ‡∏à‡∏≤‡∏Å broker
            all_positions = self.broker.get_all_positions()
            position_pnl = 0.0
            lot_size = 0.0
            
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    position_pnl = pos['profit']
                    lot_size = pos['volume']
                    break
            
            if lot_size <= 0:
                self.logger.warning(f"Invalid lot size for {symbol} (Order: {order_id})")
                return 0.0
            
            # ‡∏î‡∏∂‡∏á account balance ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
            account_balance = self.broker.get_account_balance()
            if not account_balance or account_balance <= 0:
                account_balance = 1000.0  # fallback
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á account balance
            risk_per_lot = abs(position_pnl) / account_balance
            self.logger.debug(f"Risk calculation for {symbol}: PnL={position_pnl:.2f}, Lot={lot_size:.2f}, Balance={account_balance:.2f}, Risk={risk_per_lot:.2%}")
            
            return risk_per_lot
            
        except Exception as e:
            self.logger.error(f"Error calculating risk per lot: {e}")
            return 0.0
    
    def _calculate_price_distance(self, position: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô pips"""
        try:
            symbol = position.get('symbol')
            order_id = position.get('order_id')
            
            if not symbol or not order_id:
                return 0.0
            
            # ‡∏î‡∏∂‡∏á entry_price ‡∏à‡∏≤‡∏Å broker API ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å position data
            entry_price = 0.0
            all_positions = self.broker.get_all_positions()
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    # ‡πÉ‡∏ä‡πâ 'price' ‡πÅ‡∏ó‡∏ô 'price_open' ‡∏ï‡∏≤‡∏° broker API structure
                    entry_price = pos.get('price', 0.0)
                    break
            
            if entry_price <= 0:
                self.logger.warning(f"Could not get entry price for {symbol} (Order: {order_id})")
                return 0.0
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_price = self.broker.get_current_price(symbol)
            if not current_price or current_price <= 0:
                self.logger.warning(f"Could not get current price for {symbol}")
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price distance ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if 'JPY' in symbol:
                price_distance = abs(current_price - entry_price) * 100
            else:
                price_distance = abs(current_price - entry_price) * 10000
            
            self.logger.debug(f"Price distance calculation for {symbol}: Entry={entry_price:.5f}, Current={current_price:.5f}, Distance={price_distance:.1f} pips")
            
            return price_distance
            
        except Exception as e:
            self.logger.error(f"Error calculating price distance: {e}")
            return 0.0
    
    def _start_pair_recovery(self, group_id: str, losing_pair: Dict):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            symbol = losing_pair['symbol']
            order_id = losing_pair.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if self._is_position_hedged(losing_pair):
                self.logger.info(f"‚è≠Ô∏è {symbol} (Order: {order_id}): Already hedged - skipping")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            risk_per_lot = self._calculate_risk_per_lot(losing_pair)
            price_distance = self._calculate_price_distance(losing_pair)
            
            self.logger.info(f"üîç Checking hedging conditions for {symbol} (Order: {order_id}):")
            self.logger.info(f"   Risk: {risk_per_lot:.2%} (need ‚â•5%) {'‚úÖ' if risk_per_lot >= 0.05 else '‚ùå'}")
            self.logger.info(f"   Distance: {price_distance:.1f} pips (need ‚â•10) {'‚úÖ' if price_distance >= 10 else '‚ùå'}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            if price_distance == 0.0:
                self.logger.warning(f"   ‚ö†Ô∏è Price distance is 0.0 - checking calculation...")
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å broker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
                all_positions = self.broker.get_all_positions()
                for pos in all_positions:
                    if pos['ticket'] == order_id:
                        entry_price = pos.get('price', 0.0)  # ‡πÉ‡∏ä‡πâ 'price' ‡πÅ‡∏ó‡∏ô 'price_open'
                        current_price = self.broker.get_current_price(symbol)
                        if current_price and entry_price:
                            if 'JPY' in symbol:
                                calc_distance = abs(current_price - entry_price) * 100
                            else:
                                calc_distance = abs(current_price - entry_price) * 10000
                            self.logger.info(f"   üîç Debug: Entry={entry_price:.5f}, Current={current_price:.5f}, Calc={calc_distance:.1f} pips")
                        break
            
            if risk_per_lot < 0.05 or price_distance < 10:
                self.logger.info(f"‚è≥ {symbol}: Conditions not met - waiting")
                return
            
            self.logger.info(f"‚úÖ {symbol}: All conditions met - starting recovery")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
            correlation_candidates = self._find_optimal_correlation_pairs(symbol)
            
            if not correlation_candidates:
                self.logger.warning(f"   No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            self.logger.info(f"   Best correlation: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery
            success = self._execute_correlation_position(losing_pair, best_correlation, group_id)
            
            if success:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß
                self._mark_position_as_hedged(losing_pair)
                self.logger.info(f"‚úÖ Recovery position opened for {symbol}")
            else:
                self.logger.error(f"‚ùå Failed to open recovery position for {symbol}")
                
        except Exception as e:
            self.logger.error(f"Error starting pair recovery: {e}")
    
    def _mark_position_as_hedged(self, position: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if order_id:
                self.hedged_positions[order_id] = {
                    'symbol': symbol,
                    'hedged_at': datetime.now(),
                    'position_info': position
                }
            
            if symbol:
                self.hedged_pairs.add(symbol)
            
            self.logger.debug(f"üìù Marked position as hedged: {symbol} (Order: {order_id})")
            
        except Exception as e:
            self.logger.error(f"Error marking position as hedged: {e}")
    
    def _calculate_hedge_lot_size(self, original_lot: float, correlation: float, loss_percent: float, original_symbol: str = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hedge position - ‡πÉ‡∏ä‡πâ uniform pip value"""
        try:
            # ‡∏î‡∏∂‡∏á balance ‡∏à‡∏≤‡∏Å broker
            balance = self.broker.get_account_balance()
            if not balance:
                self.logger.warning("Cannot get account balance - using original lot size")
                return original_lot
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pip value ‡∏Ç‡∏≠‡∏á original position
            if original_symbol:
                original_pip_value = TradingCalculations.calculate_pip_value(original_symbol, original_lot, self.broker)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì target pip value ‡∏ï‡∏≤‡∏° balance (base $10K = $10 pip value)
                base_balance = 10000.0
                balance_multiplier = balance / base_balance
                target_pip_value = 10.0 * balance_multiplier
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ pip value ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö target
                # ‡πÉ‡∏ä‡πâ correlation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î hedge
                hedge_pip_value = target_pip_value * correlation
                
                # ‡∏´‡∏≤ lot size ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ pip value ‡∏ï‡∏≤‡∏° target
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô base (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ hedge ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
                pip_value_per_001 = TradingCalculations.calculate_pip_value(original_symbol, 0.01, self.broker)
                hedge_lot = (hedge_pip_value * 0.01) / pip_value_per_001
                
                # Round to valid lot size
                hedge_lot = TradingCalculations.round_to_valid_lot_size(hedge_lot)
                
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î lot
                hedge_lot = min(hedge_lot, 1.0)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1 lot
                hedge_lot = max(hedge_lot, 0.1)  # ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î 0.1 lot
                
                self.logger.info(f"üìä Hedge lot calculation: Original={original_lot:.4f}, Target Pip=${target_pip_value:.2f}, Hedge Lot={hedge_lot:.4f}")
                
                return float(hedge_lot)
            else:
                # Fallback: ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°
                return original_lot
            
        except Exception as e:
            self.logger.error(f"Error calculating hedge lot size: {e}")
            return original_lot
    
    def _send_hedge_order(self, symbol: str, lot_size: float, group_id: str, recovery_level: int = 1) -> bool:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå hedge"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment
            group_number = group_id.split('_')[-1]
            comment = f"RECOVERY_G{group_number}_{symbol}_L{recovery_level}"
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            result = self.broker.place_order(
                symbol=symbol,
                order_type='BUY',  # Default to BUY
                volume=lot_size,
                comment=comment
            )
            
            if result and result.get('retcode') == 10009:
                self.logger.info(f"‚úÖ Recovery order sent: {symbol} {lot_size} lot")
                return True
            else:
                self.logger.error(f"‚ùå Failed to send recovery order: {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error sending hedge order: {e}")
            return False
    
    def check_recovery_chain(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery chain ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ recovery chains ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.recovery_chains:
                return
            
            active_chains = 0
            chains_to_remove = []
            
            for group_id, chain_data in self.recovery_chains.items():
                if chain_data['status'] != 'active':
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ group_id ‡πÉ‡∏ô active_groups ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                active_chains += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery pairs
                for recovery_pair in chain_data['recovery_pairs']:
                    if self._should_continue_recovery(recovery_pair):
                        self.logger.info(f"üîÑ Continuing recovery chain for {recovery_pair['symbol']}")
                        self._continue_recovery_chain(group_id, recovery_pair)
                    # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° recovery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î log spam
            
            # ‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ recovery chains ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if active_chains > 0:
                self.logger.debug(f"üìä Active recovery chains: {active_chains}")
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery chain: {e}")
    
    def _should_continue_recovery(self, recovery_pair: Dict) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ recovery ‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö arbitrage"""
        try:
            symbol = recovery_pair['symbol']
            order_id = recovery_pair.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if self._is_position_hedged(recovery_pair):
                self.logger.debug(f"‚è≠Ô∏è {symbol} (Order: {order_id}): Already hedged - skipping")
                return False
            
            if not order_id:
                self.logger.debug(f"üîç {symbol}: No order_id found")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏à‡∏≤‡∏Å broker API
            all_positions = self.broker.get_all_positions()
            position_pnl = 0.0
            lot_size = 0.0
            
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    position_pnl = pos['profit']
                    lot_size = pos['volume']
                    break
            
            if lot_size <= 0:
                self.logger.debug(f"üîç {symbol}: Invalid lot size ({lot_size})")
                return False
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: Risk 5% ‡∏ï‡πà‡∏≠ lot
            risk_per_lot = abs(position_pnl) / lot_size
            
            if risk_per_lot < 0.05:  # risk ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5%
                self.logger.debug(f"‚è≥ {symbol} risk too low ({risk_per_lot:.2%}) - Waiting for 5%")
                return False
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 10 pips
            entry_price = recovery_pair.get('entry_price', 0)
            if entry_price > 0:
                try:
                    current_price = self.broker.get_current_price(symbol)
                    if current_price > 0:
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price distance ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                        if 'JPY' in symbol:
                            price_distance = abs(current_price - entry_price) * 100
                        else:
                            price_distance = abs(current_price - entry_price) * 10000
                        
                        self.logger.debug(f"üîç {symbol}: Entry {entry_price:.5f}, Current {current_price:.5f}, Distance {price_distance:.1f} pips")
                        
                        if price_distance < 10:  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏à‡∏∏‡∏î
                            self.logger.debug(f"‚è≥ {symbol} price distance too small ({price_distance:.1f} pips) - Waiting for 10 pips")
                            return False
                except Exception as e:
                    self.logger.warning(f"Could not get price for {symbol}: {e}")
                    return False
            else:
                self.logger.warning(f"üîç {symbol}: No entry price found")
                return False
            
            # ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.logger.info(f"‚úÖ {symbol} meets recovery conditions - Risk: {risk_per_lot:.2%}, Distance: {price_distance:.1f} pips")
            return True
            
        except Exception as e:
            self.logger.error(f"Error checking recovery continuation: {e}")
            return False
    
    def _continue_recovery_chain(self, group_id: str, recovery_pair: Dict):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ recovery chain ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        try:
            symbol = recovery_pair['symbol']
            order_id = recovery_pair.get('order_id')
            
            self.logger.info("=" * 60)
            self.logger.info(f"üîÑ CONTINUING RECOVERY CHAIN FOR {symbol} (Order: {order_id})")
            self.logger.info("=" * 60)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            risk_per_lot = self._calculate_risk_per_lot(recovery_pair)
            price_distance = self._calculate_price_distance(recovery_pair)
            
            self.logger.info(f"üîç Checking hedging conditions for {symbol} (Order: {order_id}):")
            self.logger.info(f"   Risk: {risk_per_lot:.2%} (need ‚â•5%) {'‚úÖ' if risk_per_lot >= 0.05 else '‚ùå'}")
            self.logger.info(f"   Distance: {price_distance:.1f} pips (need ‚â•10) {'‚úÖ' if price_distance >= 10 else '‚ùå'}")
            
            if risk_per_lot < 0.05 or price_distance < 10:
                self.logger.info(f"‚è≥ {symbol}: Conditions not met - waiting")
                return
            
            self.logger.info(f"‚úÖ {symbol}: All conditions met - continuing recovery")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
            self.logger.info(f"üîç Searching for correlation candidates for {symbol}")
            correlation_candidates = self._find_optimal_correlation_pairs(symbol)
            
            if not correlation_candidates:
                self.logger.warning(f"‚ùå No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            self.logger.info(f"üéØ Best correlation: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery ‡πÉ‡∏´‡∏°‡πà
            self.logger.info(f"üì§ Sending new recovery order for {symbol} -> {best_correlation['symbol']}")
            success = self._execute_correlation_position(recovery_pair, best_correlation, group_id)
            
            if success:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß
                self._mark_position_as_hedged(recovery_pair)
                self.logger.info(f"‚úÖ Chain recovery continued for {symbol} -> {best_correlation['symbol']}")
            else:
                self.logger.error(f"‚ùå Failed to continue chain recovery for {symbol} -> {best_correlation['symbol']}")
                
        except Exception as e:
            self.logger.error(f"Error continuing recovery chain: {e}")
    
    def update_recovery_parameters(self, params: Dict):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå recovery"""
        try:
            for key, value in params.items():
                if key in self.recovery_thresholds:
                    self.recovery_thresholds[key] = value
                    self.logger.info(f"Updated {key} to {value}")
                    
        except Exception as e:
            self.logger.error(f"Error updating recovery parameters: {e}")
    
    def check_recovery_opportunities(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£ recovery"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            for recovery_id, position in self.recovery_positions.items():
                if position['status'] == 'active':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ recovery ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if self._should_continue_recovery(position):
                        self._continue_recovery_chain(position['group_id'], position)
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery opportunities: {e}")
    
    def _initiate_correlation_recovery(self, losing_position: Dict):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° correlation recovery"""
        try:
            symbol = losing_position['symbol']
            self.logger.info(f"üîÑ Starting correlation recovery for {symbol}")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
            correlation_candidates = self._find_optimal_correlation_pairs(symbol)
            
            if not correlation_candidates:
                self.logger.warning(f"   No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            self.logger.info(f"   Best correlation: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery
            success = self._execute_correlation_position(losing_position, best_correlation, losing_position.get('group_id', 'unknown'))
            
            if success:
                self.logger.info(f"‚úÖ Correlation recovery position opened: {best_correlation['symbol']}")
            else:
                self.logger.error(f"‚ùå Failed to open correlation recovery position: {best_correlation['symbol']}")
                
        except Exception as e:
            self.logger.error(f"Error initiating correlation recovery: {e}")
    
    def _find_optimal_correlation_pairs(self, base_symbol: str) -> List[Dict]:
        """
        ‚ö° CRITICAL: Find optimal correlation pairs for recovery
        ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (EURUSD, GBPUSD, EURGBP)
        """
        try:
            correlation_candidates = []
            
            # ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö arbitrage
            arbitrage_pairs = ['EURUSD', 'GBPUSD', 'EURGBP']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ base_symbol ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if base_symbol not in arbitrage_pairs:
                self.logger.warning(f"‚ö†Ô∏è {base_symbol} is not in arbitrage pairs, using all available pairs")
                return self._find_correlation_pairs_for_any_symbol(base_symbol)
            
            # Get all available pairs from broker
            all_pairs = self.broker.get_available_pairs()
            
            if not all_pairs:
                self.logger.warning("No available pairs from broker, using fallback pairs")
                # ‡πÉ‡∏ä‡πâ fallback pairs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö correlation recovery
                all_pairs = [
                    'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'USDNZD',
                    'EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY',
                    'EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF',
                    'EURAUD', 'GBPAUD', 'USDAUD', 'AUDCAD', 'AUDNZD',
                    'EURNZD', 'GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD',
                    'EURCAD', 'GBPCAD', 'USDCAD', 'AUDCAD', 'CADCHF'
                ]
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö base_symbol
            self.logger.info(f"üîç Searching correlation pairs for {base_symbol} from {len(all_pairs)} available pairs")
            checked_pairs = 0
            valid_correlations = 0
            
            for symbol in all_pairs:
                if symbol == base_symbol:
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà arbitrage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
                if symbol in arbitrage_pairs:
                    continue
                
                checked_pairs += 1
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                correlation = self._calculate_correlation_for_arbitrage_pair(base_symbol, symbol)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ correlation ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
                if correlation >= self.recovery_thresholds['min_correlation']:
                    valid_correlations += 1
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° correlation
                    direction = self._determine_recovery_direction(base_symbol, symbol, correlation)
                    
                    correlation_candidates.append({
                        'symbol': symbol,
                        'correlation': correlation,
                        'recovery_strength': correlation,
                        'direction': direction
                    })
                    
                    self.logger.debug(f"‚úÖ Found correlation: {symbol} = {correlation:.2f} ({direction})")
                else:
                    self.logger.debug(f"‚ùå Low correlation: {symbol} = {correlation:.2f} (min: {self.recovery_thresholds['min_correlation']:.2f})")
            
            self.logger.info(f"üìä Correlation search results: {valid_correlations}/{checked_pairs} pairs passed correlation threshold")
            
            # Sort by recovery strength (highest first)
            correlation_candidates.sort(key=lambda x: x['recovery_strength'], reverse=True)
            
            if not correlation_candidates:
                self.logger.error(f"‚ùå No correlation candidates created for {base_symbol}")
            else:
                self.logger.info(f"üéØ Final correlation candidates for {base_symbol}: {len(correlation_candidates)} pairs")
                for i, candidate in enumerate(correlation_candidates[:3]):  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    self.logger.info(f"   {i+1}. {candidate['symbol']}: {candidate['correlation']:.2f} ({candidate['direction']})")
            
            return correlation_candidates
            
        except Exception as e:
            self.logger.error(f"Error finding optimal correlation pairs for {base_symbol}: {e}")
            return []
    
    def _calculate_correlation_for_arbitrage_pair(self, base_symbol: str, target_symbol: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô arbitrage ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ correlation values ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if base_symbol == 'EURUSD':
                # Major pairs with high correlation
                if target_symbol in ['GBPUSD', 'AUDUSD', 'NZDUSD']:
                    return 0.85  # High correlation
                # EUR crosses
                elif target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.75  # Medium-high correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                # Other major pairs
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.65  # Medium correlation
                # Minor pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # CAD, CHF, NZD crosses
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
                    
            elif base_symbol == 'GBPUSD':
                # Major pairs with high correlation
                if target_symbol in ['EURUSD', 'AUDUSD', 'NZDUSD']:
                    return 0.85  # High correlation
                # GBP crosses
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                # EUR crosses
                elif target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.65  # Medium correlation
                # Other major pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # Minor pairs
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
                    
            elif base_symbol == 'EURGBP':
                # EUR crosses
                if target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.80  # High correlation
                # GBP crosses
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                # Major pairs
                elif target_symbol in ['EURUSD', 'GBPUSD']:
                    return 0.75  # Medium-high correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.65  # Medium correlation
                # Other major pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # Minor pairs
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
            
            return 0.50  # Default correlation
            
        except Exception as e:
            self.logger.error(f"Error calculating correlation: {e}")
            return 0.50
    
    def _calculate_correlation_for_any_pair(self, base_symbol: str, target_symbol: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏î‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏π‡πà arbitrage)"""
        try:
            # ‡πÉ‡∏ä‡πâ correlation values ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if base_symbol == 'USDJPY':
                if target_symbol in ['EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURUSD', 'GBPUSD', 'AUDUSD', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'AUDUSD':
                if target_symbol in ['NZDUSD', 'EURUSD', 'GBPUSD']:
                    return 0.85  # High correlation
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURAUD', 'GBPAUD', 'USDAUD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'USDCAD':
                if target_symbol in ['CADJPY', 'CADCHF', 'EURCAD', 'GBPCAD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURUSD', 'GBPUSD', 'AUDUSD', 'USDJPY', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'USDCHF':
                if target_symbol in ['CHFJPY', 'EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURUSD', 'GBPUSD', 'AUDUSD', 'USDJPY', 'USDCAD', 'USDNZD']:
                    return 0.70  # Medium correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'USDNZD':
                if target_symbol in ['NZDJPY', 'NZDCHF', 'EURNZD', 'GBPNZD', 'AUDNZD', 'CADNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURUSD', 'GBPUSD', 'AUDUSD', 'USDJPY', 'USDCAD', 'USDCHF']:
                    return 0.70  # Medium correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'EURJPY':
                if target_symbol in ['EURUSD', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'GBPJPY':
                if target_symbol in ['GBPUSD', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'AUDJPY':
                if target_symbol in ['AUDUSD', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURJPY', 'GBPJPY', 'CADJPY', 'CHFJPY', 'NZDJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'CADJPY':
                if target_symbol in ['USDCAD', 'CADCHF', 'EURCAD', 'GBPCAD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURJPY', 'GBPJPY', 'AUDJPY', 'CHFJPY', 'NZDJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'CHFJPY':
                if target_symbol in ['USDCHF', 'EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'NZDJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'NZDJPY':
                if target_symbol in ['USDNZD', 'EURNZD', 'GBPNZD', 'AUDNZD', 'CADNZD', 'NZDCHF']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'EURCHF':
                if target_symbol in ['EURUSD', 'EURJPY', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'GBPCHF':
                if target_symbol in ['GBPUSD', 'GBPJPY', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURCHF', 'AUDCHF', 'CADCHF', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'AUDCHF':
                if target_symbol in ['AUDUSD', 'AUDJPY', 'AUDCAD', 'AUDNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURCHF', 'GBPCHF', 'CADCHF', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'CADCHF':
                if target_symbol in ['USDCAD', 'CADJPY', 'EURCAD', 'GBPCAD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURCHF', 'GBPCHF', 'AUDCHF', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'NZDCHF':
                if target_symbol in ['USDNZD', 'NZDJPY', 'EURNZD', 'GBPNZD', 'AUDNZD', 'CADNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'EURAUD':
                if target_symbol in ['EURUSD', 'EURJPY', 'EURCHF', 'EURCAD', 'EURNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['GBPAUD', 'USDAUD', 'AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'GBPAUD':
                if target_symbol in ['GBPUSD', 'GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURAUD', 'USDAUD', 'AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'USDAUD':
                if target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURAUD', 'GBPAUD', 'EURUSD', 'GBPUSD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'AUDCAD':
                if target_symbol in ['AUDUSD', 'AUDJPY', 'AUDCHF', 'AUDNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['USDCAD', 'CADJPY', 'CADCHF', 'EURCAD', 'GBPCAD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'EURNZD':
                if target_symbol in ['EURUSD', 'EURJPY', 'EURCHF', 'EURCAD', 'EURAUD']:
                    return 0.80  # High correlation
                elif target_symbol in ['GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD', 'NZDJPY', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'GBPNZD':
                if target_symbol in ['GBPUSD', 'GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURNZD', 'USDNZD', 'AUDNZD', 'CADNZD', 'NZDJPY', 'NZDCHF']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'USDNZD':
                if target_symbol in ['NZDJPY', 'NZDCHF', 'EURNZD', 'GBPNZD', 'AUDNZD', 'CADNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['EURUSD', 'GBPUSD', 'AUDUSD', 'USDJPY', 'USDCAD', 'USDCHF']:
                    return 0.70  # Medium correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'AUDNZD':
                if target_symbol in ['AUDUSD', 'AUDJPY', 'AUDCHF', 'AUDCAD']:
                    return 0.80  # High correlation
                elif target_symbol in ['USDNZD', 'NZDJPY', 'NZDCHF', 'EURNZD', 'GBPNZD', 'CADNZD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'CADNZD':
                if target_symbol in ['USDCAD', 'CADJPY', 'CADCHF', 'EURCAD', 'GBPCAD']:
                    return 0.80  # High correlation
                elif target_symbol in ['USDNZD', 'NZDJPY', 'NZDCHF', 'EURNZD', 'GBPNZD', 'AUDNZD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'EURCAD':
                if target_symbol in ['EURUSD', 'EURJPY', 'EURCHF', 'EURAUD', 'EURNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['USDCAD', 'CADJPY', 'CADCHF', 'GBPCAD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            elif base_symbol == 'GBPCAD':
                if target_symbol in ['GBPUSD', 'GBPJPY', 'GBPCHF', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                elif target_symbol in ['USDCAD', 'CADJPY', 'CADCHF', 'EURCAD']:
                    return 0.75  # Medium-high correlation
                else:
                    return 0.60  # Lower correlation
                    
            else:
                return 0.60  # Default correlation for unknown pairs
            
        except Exception as e:
            self.logger.error(f"Error calculating correlation for any pair: {e}")
            return 0.60
    
    def _determine_recovery_direction(self, base_symbol: str, target_symbol: str, correlation: float) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ recovery ‡∏ï‡∏≤‡∏° correlation"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏° correlation
            if correlation >= 0.75:  # High correlation
                # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                return 'BUY'  # BUY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö high correlation
            elif correlation >= 0.60:  # Medium correlation
                # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                return 'SELL'  # SELL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö medium correlation
            else:  # Lower correlation
                # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                return 'BUY'  # BUY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lower correlation
                
        except Exception as e:
            self.logger.error(f"Error determining recovery direction: {e}")
            return 'BUY'  # Default to BUY
    
    def _find_correlation_pairs_for_any_symbol(self, base_symbol: str) -> List[Dict]:
        """‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏î‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏π‡πà arbitrage)"""
        try:
            correlation_candidates = []
            
            # Get all available pairs from broker
            all_pairs = self.broker.get_available_pairs()
            if not all_pairs:
                all_pairs = [
                    'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD',
                    'EURGBP', 'EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY',
                    'EURCHF', 'GBPCHF', 'USDCHF', 'AUDCHF', 'CADCHF',
                    'EURAUD', 'GBPAUD', 'USDAUD', 'AUDCAD', 'EURNZD',
                    'GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD', 'CHFJPY',
                    'EURCAD', 'GBPCAD'
                ]
            
            # ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö arbitrage
            arbitrage_pairs = ['EURUSD', 'GBPUSD', 'EURGBP']
            
            for symbol in all_pairs:
                if symbol == base_symbol:
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà arbitrage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
                if symbol in arbitrage_pairs:
                    continue
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                correlation = self._calculate_correlation_for_any_pair(base_symbol, symbol)
                
                if correlation >= self.recovery_thresholds['min_correlation']:
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° correlation
                    direction = self._determine_recovery_direction(base_symbol, symbol, correlation)
                    
                    correlation_candidates.append({
                        'symbol': symbol,
                        'correlation': correlation,
                        'recovery_strength': correlation,
                        'direction': direction
                    })
            
            return correlation_candidates
            
        except Exception as e:
            self.logger.error(f"Error finding correlation pairs for any symbol: {e}")
            return []
    
    def _execute_correlation_position(self, original_position: Dict, correlation_candidate: Dict, group_id: str) -> bool:
        """
        ‚ö° CRITICAL: Execute correlation position for recovery
        """
        try:
            symbol = correlation_candidate['symbol']
            correlation = correlation_candidate['correlation']
            direction = correlation_candidate['direction']
            
            # Calculate correlation volume
            correlation_volume = self._calculate_hedge_volume(original_position, correlation_candidate)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ï‡∏≤‡∏° balance-based sizing
            original_lot = original_position.get('lot_size', original_position.get('volume', 0.1))
            original_symbol = original_position.get('symbol', '')
            
            correlation_lot_size = self._calculate_hedge_lot_size(
                original_lot=original_lot,
                correlation=correlation,
                loss_percent=0.0,  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ loss_percent ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                original_symbol=original_symbol
            )
            
            # Send correlation order
            success = self._send_correlation_order(symbol, correlation_lot_size, group_id)
            
            if success:
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô entry price
                entry_price = self.broker.get_current_price(symbol)
                if not entry_price:
                    entry_price = 0.0
                
                # Store correlation position
                correlation_position = {
                    'symbol': symbol,
                    'direction': direction,
                    'lot_size': correlation_lot_size,
                    'entry_price': entry_price,
                    'correlation': correlation,
                    'correlation_ratio': 1.0,  # ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    'original_pair': original_position['symbol'],
                    'group_id': group_id,
                    'opened_at': datetime.now(),
                    'status': 'active'
                }
                
                recovery_id = f"recovery_{group_id}_{symbol}_{int(datetime.now().timestamp())}"
                self.recovery_positions[recovery_id] = correlation_position
                self._update_recovery_data()
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                self._log_hedging_action(original_position, correlation_position, correlation_candidate)
                
                self.logger.info(f"‚úÖ Correlation recovery position opened: {symbol}")
                return True
            else:
                self.logger.error(f"‚ùå Failed to open correlation recovery position: {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error executing correlation position: {e}")
            return False
    
    def _log_hedging_action(self, original_position: Dict, correlation_position: Dict, correlation_candidate: Dict):
        """‡πÅ‡∏™‡∏î‡∏á log ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        try:
            original_symbol = original_position['symbol']
            hedge_symbol = correlation_position['symbol']
            correlation = correlation_candidate['correlation']
            
            self.logger.info("=" * 60)
            self.logger.info(f"üéØ HEDGING ACTION COMPLETED")
            self.logger.info("=" * 60)
            self.logger.info(f"üìâ Original Position: {original_symbol}")
            self.logger.info(f"   Order ID: {original_position.get('order_id', 'N/A')}")
            self.logger.info(f"   Lot Size: {original_position.get('lot_size', 0.1)}")
            self.logger.info(f"   Entry Price: {original_position.get('entry_price', 0.0):.5f}")
            
            self.logger.info(f"üõ°Ô∏è Hedge Position: {hedge_symbol}")
            self.logger.info(f"   Lot Size: {correlation_position['lot_size']}")
            self.logger.info(f"   Entry Price: {correlation_position['entry_price']:.5f}")
            self.logger.info(f"   Direction: {correlation_position['direction']}")
            
            self.logger.info(f"üìä Correlation Details:")
            self.logger.info(f"   Correlation: {correlation:.2f}")
            self.logger.info(f"   Recovery Strength: {correlation_candidate.get('recovery_strength', correlation):.2f}")
            
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"Error logging hedging action: {e}")
    
    def _calculate_hedge_volume(self, original_position: Dict, correlation_candidate: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö correlation position - ‡πÉ‡∏ä‡πâ balance-based sizing"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å original position
            original_lot = original_position.get('lot_size', original_position.get('volume', 0.1))
            original_symbol = original_position.get('symbol', '')
            
            # ‡πÉ‡∏ä‡πâ balance-based lot sizing
            volume = self._calculate_hedge_lot_size(
                original_lot=original_lot,
                correlation=correlation_candidate.get('correlation', 0.5),
                loss_percent=0.0,
                original_symbol=original_symbol
            )
            
            return float(volume)
            
        except Exception as e:
            self.logger.error(f"Error calculating hedge volume: {e}")
            return 0.1
    
    def _send_correlation_order(self, symbol: str, lot_size: float, group_id: str) -> bool:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå correlation recovery"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment
            group_number = group_id.split('_')[-1]
            comment = f"RECOVERY_G{group_number}_{symbol}"
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            result = self.broker.place_order(
                symbol=symbol,
                order_type='BUY',  # Default to BUY
                volume=lot_size,
                comment=comment
            )
            
            if result and result.get('retcode') == 10009:
                self.logger.info(f"‚úÖ Correlation recovery order sent: {symbol} {lot_size} lot")
                return True
            else:
                self.logger.error(f"‚ùå Failed to send correlation recovery order: {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error sending correlation recovery order: {e}")
            return False
    
    def check_recovery_positions(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ recovery positions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.recovery_positions:
                return
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î positions ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            self.cleanup_closed_recovery_positions()
            
            active_recovery_count = 0
            positions_to_remove = []
            
            for recovery_id, position in self.recovery_positions.items():
                if position['status'] == 'active':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    group_id = position.get('group_id', '')
                    if not group_id:
                        positions_to_remove.append(recovery_id)
                        continue
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö arbitrage_detector)
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ group_id ‡πÉ‡∏ô active_groups ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                    active_recovery_count += 1
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ recovery ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if self._should_continue_recovery(position):
                        self.logger.info(f"üîÑ Starting chain recovery for {position['symbol']}")
                        self._continue_recovery_chain(position['group_id'], position)
                    # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° recovery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î log spam
            
            # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ group_id
            for recovery_id in positions_to_remove:
                del self.recovery_positions[recovery_id]
                self.logger.info(f"üóëÔ∏è Removed orphaned recovery position: {recovery_id}")
            
            # ‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ recovery positions ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if active_recovery_count > 0:
                self.logger.debug(f"üìä Active recovery positions: {active_recovery_count}")
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery positions: {e}")
    
    def _close_recovery_position(self, recovery_id: str):
        """‡∏õ‡∏¥‡∏î recovery position"""
        try:
            if recovery_id not in self.recovery_positions:
                self.logger.debug(f"Recovery position {recovery_id} not found in tracking data")
                return
            
            position = self.recovery_positions[recovery_id]
            symbol = position['symbol']
            order_id = position.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            position_exists = False
            if order_id:
                all_positions = self.broker.get_all_positions()
                for pos in all_positions:
                    if pos['ticket'] == order_id:
                        position_exists = True
                        break
            
            if not position_exists:
                # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                position['status'] = 'closed'
                position['closed_at'] = datetime.now()
                position['close_reason'] = 'already_closed'
                self._update_recovery_data()
                self.logger.info(f"‚úÖ Recovery position {symbol} was already closed - updated status")
                return
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            success = self.broker.close_position(symbol)
            
            if success:
                position['status'] = 'closed'
                position['closed_at'] = datetime.now()
                position['close_reason'] = 'manual_close'
                self._update_recovery_data()
                self.logger.info(f"‚úÖ Recovery position closed: {symbol}")
            else:
                self.logger.error(f"‚ùå Failed to close recovery position: {symbol}")
                    
        except Exception as e:
            self.logger.error(f"Error closing recovery position: {e}")
    
    def get_correlation_matrix(self) -> Dict:
        """Get correlation matrix"""
        return self.correlation_matrix
    
    def get_recovery_positions(self) -> Dict:
        """Get recovery positions"""
        return self.recovery_positions
    
    def close_recovery_position(self, recovery_id: str, reason: str = "manual"):
        """Close recovery position manually"""
        try:
            if recovery_id in self.recovery_positions:
                position = self.recovery_positions[recovery_id]
                
                # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                success = self.broker.close_position(position['symbol'])
                
                if success:
                    position['status'] = 'closed'
                    position['closed_at'] = datetime.now()
                    position['close_reason'] = reason
                    self._update_recovery_data()
                    self.logger.info(f"‚úÖ Recovery position closed: {position['symbol']} (reason: {reason})")
                else:
                    self.logger.error(f"‚ùå Failed to close recovery position: {position['symbol']}")
                    
        except Exception as e:
            self.logger.error(f"Error closing recovery position: {e}")
    
    def get_correlation_performance(self) -> Dict:
        """Get correlation performance metrics"""
        return self.recovery_metrics
    
    def get_active_recovery_engine_status(self) -> Dict:
        """Get active recovery engine status"""
        return {
            'recovery_mode': self.recovery_mode,
            'hedge_ratio_optimization': self.hedge_ratio_optimization,
            'portfolio_rebalancing': self.portfolio_rebalancing,
            'multi_timeframe_analysis': self.multi_timeframe_analysis,
            'never_cut_loss': self.never_cut_loss,
            'active_recovery_chains': len(self.recovery_chains),
            'active_recovery_positions': len([p for p in self.recovery_positions.values() if p['status'] == 'active'])
        }
    
    def _save_recovery_data(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery positions ‡πÅ‡∏•‡∏∞ chains ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            os.makedirs(os.path.dirname(self.persistence_file), exist_ok=True)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            save_data = {
                'recovery_positions': self.recovery_positions,
                'recovery_chains': self.recovery_chains,
                'recovery_metrics': self.recovery_metrics,
                'hedged_pairs': list(self.hedged_pairs),
                'hedged_positions': self.hedged_positions,
                'hedged_groups': self.hedged_groups,
                'saved_at': datetime.now().isoformat()
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            with open(self.persistence_file, 'w') as f:
                json.dump(save_data, f, indent=2, default=str)
            
            self.logger.debug(f"üíæ Saved {len(self.recovery_positions)} recovery positions to {self.persistence_file}")
            
        except Exception as e:
            self.logger.error(f"Error saving recovery data: {e}")
    
    def _load_recovery_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery positions ‡πÅ‡∏•‡∏∞ chains ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            from datetime import datetime
            
            if not os.path.exists(self.persistence_file):
                self.logger.debug("No recovery persistence file found, starting fresh")
                return
            
            with open(self.persistence_file, 'r') as f:
                save_data = json.load(f)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            self.recovery_positions = save_data.get('recovery_positions', {})
            self.recovery_chains = save_data.get('recovery_chains', {})
            self.recovery_metrics = save_data.get('recovery_metrics', {
                'total_recoveries': 0,
                'successful_recoveries': 0,
                'failed_recoveries': 0,
                'avg_recovery_time_hours': 0,
                'total_recovered_amount': 0.0
            })
            self.hedged_pairs = set(save_data.get('hedged_pairs', []))
            self.hedged_positions = save_data.get('hedged_positions', {})
            self.hedged_groups = save_data.get('hedged_groups', {})
            
            saved_at = save_data.get('saved_at', 'Unknown')
            
            if self.recovery_positions or self.recovery_chains or self.hedged_pairs:
                self.logger.info(f"üìÇ Loaded recovery data from {self.persistence_file}")
                self.logger.info(f"   Recovery positions: {len(self.recovery_positions)}")
                self.logger.info(f"   Recovery chains: {len(self.recovery_chains)}")
                self.logger.info(f"   Hedged pairs: {len(self.hedged_pairs)}")
                self.logger.info(f"   Hedged positions: {len(self.hedged_positions)}")
                self.logger.info(f"   Saved at: {saved_at}")
            else:
                self.logger.debug("No recovery data found in persistence file")
                
        except Exception as e:
            self.logger.error(f"Error loading recovery data: {e}")
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            self.recovery_positions = {}
            self.recovery_chains = {}
            self.recovery_metrics = {
                'total_recoveries': 0,
                'successful_recoveries': 0,
                'failed_recoveries': 0,
                'avg_recovery_time_hours': 0,
                'total_recovered_amount': 0.0
            }
            self.hedged_pairs = set()
            self.hedged_positions = {}
            self.hedged_groups = {}
    
    def _update_recovery_data(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            self._save_recovery_data()
        except Exception as e:
            self.logger.error(f"Error updating recovery data: {e}")
    
    def _remove_recovery_data(self, recovery_id: str):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if recovery_id in self.recovery_positions:
                del self.recovery_positions[recovery_id]
            self._save_recovery_data()
        except Exception as e:
            self.logger.error(f"Error removing recovery data: {e}")
    
    def clear_hedged_data_for_group(self, group_id: str):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            positions_to_remove = []
            for order_id, hedged_info in self.hedged_positions.items():
                if hedged_info.get('position_info', {}).get('group_id') == group_id:
                    positions_to_remove.append(order_id)
            
            for order_id in positions_to_remove:
                symbol = self.hedged_positions[order_id].get('symbol')
                if symbol:
                    self.hedged_pairs.discard(symbol)
                del self.hedged_positions[order_id]
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°
            if group_id in self.hedged_groups:
                del self.hedged_groups[group_id]
            
            if positions_to_remove:
                self.logger.info(f"üóëÔ∏è Cleared {len(positions_to_remove)} hedged positions for group {group_id}")
                self._update_recovery_data()
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery positions ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.log_recovery_positions_summary()
            
        except Exception as e:
            self.logger.error(f"Error clearing hedged data for group {group_id}: {e}")
    
    def cleanup_closed_recovery_positions(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î recovery positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            positions_to_remove = []
            
            for recovery_id, position in self.recovery_positions.items():
                if position.get('status') == 'closed':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô positions ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    closed_at = position.get('closed_at')
                    if closed_at:
                        if isinstance(closed_at, str):
                            closed_at = datetime.fromisoformat(closed_at)
                        
                        # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                        if (datetime.now() - closed_at).total_seconds() > 3600:
                            positions_to_remove.append(recovery_id)
            
            # ‡∏•‡∏ö positions ‡πÄ‡∏Å‡πà‡∏≤
            for recovery_id in positions_to_remove:
                del self.recovery_positions[recovery_id]
            
            if positions_to_remove:
                self.logger.info(f"üóëÔ∏è Cleaned up {len(positions_to_remove)} old closed recovery positions")
                self._update_recovery_data()
            
        except Exception as e:
            self.logger.error(f"Error cleaning up closed recovery positions: {e}")
    
    def get_hedging_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            return {
                'hedged_pairs': list(self.hedged_pairs),
                'hedged_positions_count': len(self.hedged_positions),
                'hedged_groups_count': len(self.hedged_groups),
                'hedged_positions': self.hedged_positions,
                'hedged_groups': self.hedged_groups
            }
        except Exception as e:
            self.logger.error(f"Error getting hedging status: {e}")
            return {}
    
    def log_recovery_positions_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery positions"""
        try:
            if not self.recovery_positions:
                self.logger.info("üìä No recovery positions found")
                return
            
            active_count = 0
            closed_count = 0
            
            for position in self.recovery_positions.values():
                if position.get('status') == 'active':
                    active_count += 1
                elif position.get('status') == 'closed':
                    closed_count += 1
            
            self.logger.info("=" * 60)
            self.logger.info("üìä RECOVERY POSITIONS SUMMARY")
            self.logger.info("=" * 60)
            self.logger.info(f"Total Recovery Positions: {len(self.recovery_positions)}")
            self.logger.info(f"Active Positions: {active_count}")
            self.logger.info(f"Closed Positions: {closed_count}")
            self.logger.info(f"Hedged Pairs: {len(self.hedged_pairs)}")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"Error logging recovery positions summary: {e}")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Correlation Manager"""
        try:
            self.is_running = False
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
            self._save_recovery_data()
            self.logger.info("üõë Correlation Manager stopped")
        except Exception as e:
            self.logger.error(f"Error stopping Correlation Manager: {e}")
