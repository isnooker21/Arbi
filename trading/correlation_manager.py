"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Correlation ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Active Recovery Engine
================================================================

‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
- ‡∏£‡∏∞‡∏ö‡∏ö Never-Cut-Loss ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Correlation Recovery
- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Recovery ‡πÅ‡∏ö‡∏ö Real-time
- Chain Recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á EUR/USD ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
2. ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô GBP/USD
3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hedge ratio ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
4. ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GBP/USD ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
5. ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Real-time
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Tuple, Optional
import threading
from utils.calculations import TradingCalculations

class CorrelationManager:
    
    def _get_magic_number_from_group_id(self, group_id: str) -> int:
        """‡∏´‡∏≤ magic number ‡∏à‡∏≤‡∏Å group_id"""
        try:
            if 'triangle_1' in group_id:
                return 234001
            elif 'triangle_2' in group_id:
                return 234002
            elif 'triangle_3' in group_id:
                return 234003
            elif 'triangle_4' in group_id:
                return 234004
            elif 'triangle_5' in group_id:
                return 234005
            elif 'triangle_6' in group_id:
                return 234006
            else:
                return 234000  # default
        except Exception as e:
            self.logger.error(f"Error getting magic number from group_id {group_id}: {e}")
    
    def _get_group_pairs_from_mt5(self, group_id: str) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å MT5 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number"""
        try:
            group_pairs = []
            magic_number = self._get_magic_number_from_group_id(group_id)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
            all_positions = self.broker.get_all_positions()
            
            for pos in all_positions:
                magic = pos.get('magic', 0)
                if magic == magic_number:
                    symbol = pos['symbol']
                    if symbol not in group_pairs:
                        group_pairs.append(symbol)
            
            self.logger.debug(f"üìä Group {group_id} pairs from MT5: {group_pairs}")
            return group_pairs
            
        except Exception as e:
            self.logger.error(f"Error getting group pairs from MT5: {e}")
            return []
    
    def _get_all_currency_pairs_from_mt5(self) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ"""
        try:
            all_pairs = []
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
            all_positions = self.broker.get_all_positions()
            
            for pos in all_positions:
                symbol = pos['symbol']
                if symbol not in all_pairs:
                    all_pairs.append(symbol)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            all_pairs.sort()
            
            self.logger.debug(f"üìä All currency pairs from MT5: {all_pairs}")
            return all_pairs
            
        except Exception as e:
            self.logger.error(f"Error getting all currency pairs from MT5: {e}")
            # Fallback to predefined list if MT5 fails
            return [
                'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD',
                'EURGBP', 'EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY',
                'EURCHF', 'GBPCHF', 'USDCHF', 'AUDCHF', 'CADCHF',
                'EURAUD', 'GBPAUD', 'USDAUD', 'AUDCAD', 'EURNZD',
                'GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD', 'CHFJPY',
                'EURCAD', 'GBPCAD'
            ]
    
    def __init__(self, broker_api, ai_engine=None):
        self.broker = broker_api
        # self.ai = ai_engine  # DISABLED for simple trading system
        self.correlation_matrix = {}
        self.recovery_positions = {}
        self.is_running = False
        self.logger = logging.getLogger(__name__)
        
        # Magic numbers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö arbitrage_detector)
        self.triangle_magic_numbers = {
            'triangle_1': 234001,  # EURUSD, GBPUSD, EURGBP
            'triangle_2': 234002,  # USDJPY, EURUSD, EURJPY
            'triangle_3': 234003,  # USDJPY, GBPUSD, GBPJPY
            'triangle_4': 234004,  # AUDUSD, EURUSD, EURAUD
            'triangle_5': 234005,  # USDCAD, EURUSD, EURCAD
            'triangle_6': 234006   # AUDUSD, GBPUSD, GBPAUD
        }
        
        # Active Recovery Engine parameters
        self.recovery_mode = 'active'  # active, passive, disabled
        self.hedge_ratio_optimization = True
        self.portfolio_rebalancing = True
        self.multi_timeframe_analysis = True
        
        # Recovery thresholds - More flexible for all market conditions
        self.recovery_thresholds = {
            'min_correlation': 0.5,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 50% (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà)
            'max_correlation': 0.95,     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 95%
            'min_loss_threshold': -0.005, # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ -0.5%
            'max_recovery_time_hours': 24, # ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            'hedge_ratio_range': (0.3, 2.5),  # ‡∏Ç‡∏ô‡∏≤‡∏î hedge ratio
            'wait_time_minutes': 5,      # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            'base_lot_size': 0.1         # ‡∏Ç‡∏ô‡∏≤‡∏î lot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }
        
        # Portfolio balance threshold
        self.portfolio_balance_threshold = 0.1  # 10% imbalance threshold
        
        # Never-Cut-Loss flag
        self.never_cut_loss = True
        
        # Performance tracking
        self.recovery_metrics = {
            'total_recoveries': 0,
            'successful_recoveries': 0,
            'failed_recoveries': 0,
            'avg_recovery_time_hours': 0,
            'total_recovered_amount': 0.0
        }
        
        # Multi-timeframe correlation cache - ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group
        self.recovery_chains = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery chain ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        self.recovery_positions_by_group = {}  # ‡πÄ‡∏Å‡πá‡∏ö recovery positions ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group
        self.hedged_positions_by_group = {}  # ‡πÄ‡∏Å‡πá‡∏ö hedged positions ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥) - ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group
        self.hedged_pairs_by_group = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group (group_id -> set of symbols)
        self.hedged_positions = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (order_id -> position_info)
        self.hedged_groups = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (group_id -> hedged_info)
        
        # Backward compatibility
        self.hedged_pairs = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (backward compatibility)
        
        # ‡∏£‡∏∞‡∏ö‡∏ö Save/Load ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.persistence_file = "data/recovery_positions.json"
        
        # Load existing recovery data on startup
        self._load_recovery_data()
    
    def _log_all_groups_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å Group ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            self.logger.info("üåê ALL GROUPS STATUS OVERVIEW:")
            self.logger.info("=" * 80)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
            all_positions = self.broker.get_all_positions()
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° magic number
            groups_data = {}
            for pos in all_positions:
                magic = pos.get('magic', 0)
                comment = pos.get('comment', '')
                
                # ‡∏Ç‡πâ‡∏≤‡∏° recovery positions
                if comment.startswith('RECOVERY_'):
                    continue
                
                if magic not in groups_data:
                    groups_data[magic] = {
                        'positions': [],
                        'total_pnl': 0,
                        'group_name': f'Group_{magic}'
                    }
                
                groups_data[magic]['positions'].append(pos)
                groups_data[magic]['total_pnl'] += pos.get('profit', 0)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞ Group
            for magic, data in groups_data.items():
                total_pnl = data['total_pnl']
                positions = data['positions']
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Group
                if magic == 1001:
                    group_name = "G1 (Triangle 1)"
                elif magic == 1002:
                    group_name = "G2 (Triangle 2)"
                elif magic == 1003:
                    group_name = "G3 (Triangle 3)"
                elif magic == 1004:
                    group_name = "G4 (Triangle 4)"
                elif magic == 1005:
                    group_name = "G5 (Triangle 5)"
                elif magic == 1006:
                    group_name = "G6 (Triangle 6)"
                else:
                    group_name = f"Group_{magic}"
                
                # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Group
                if total_pnl > 0:
                    status = f"üí∞ PROFIT: ${total_pnl:.2f}"
                else:
                    status = f"üî¥ LOSS: ${total_pnl:.2f}"
                
                self.logger.info(f"üìä {group_name}: {status}")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                losing_count = 0
                for pos in positions:
                    if pos.get('profit', 0) < 0:
                        losing_count += 1
                        symbol = pos['symbol']
                        pnl = pos['profit']
                        self.logger.info(f"   üìâ {symbol}: ${pnl:.2f}")
                
                if losing_count == 0:
                    self.logger.info(f"   üü¢ All positions profitable")
                
                # ‡πÅ‡∏™‡∏î‡∏á recovery positions
                recovery_count = 0
                for pos in all_positions:
                    if pos.get('magic', 0) == magic and pos.get('comment', '').startswith('RECOVERY_'):
                        recovery_count += 1
                        symbol = pos['symbol']
                        pnl = pos['profit']
                        comment = pos['comment']
                        self.logger.info(f"   üîó Recovery: {symbol} (${pnl:.2f}) - {comment}")
                
                if recovery_count == 0:
                    self.logger.info(f"   ‚ö™ No recovery positions")
                
                self.logger.info("")
            
            self.logger.info("=" * 80)
            
        except Exception as e:
            self.logger.error(f"Error logging all groups status: {e}")
        
    def start_chain_recovery(self, group_id: str, losing_pairs: List[Dict]):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° chain recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å Group ‡∏Å‡πà‡∏≠‡∏ô
            self._log_all_groups_status()
            
            self.logger.info("=" * 80)
            self.logger.info(f"üîó STARTING CHAIN RECOVERY FOR GROUP {group_id}")
            self.logger.info("=" * 80)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            self._log_group_hedging_status(group_id, losing_pairs)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á recovery chain
            recovery_chain = {
                'group_id': group_id,
                'started_at': datetime.now(),
                'original_pairs': losing_pairs,
                'recovery_pairs': [],
                'status': 'active',
                'current_chain': []
            }
            
            self.recovery_chains[group_id] = recovery_chain
            self._update_recovery_data()
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery (‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
            best_pair = self._select_best_pair_for_recovery(losing_pairs, group_id)
            if best_pair:
                self.logger.info(f"üéØ Selected best pair for recovery: {best_pair['symbol']} (Order: {best_pair['order_id']})")
                self._start_pair_recovery(group_id, best_pair)
            else:
                self.logger.info("‚ùå No suitable pair found for recovery")
                
        except Exception as e:
            self.logger.error(f"Error starting chain recovery: {e}")
    
    def _select_best_pair_for_recovery(self, losing_pairs: List[Dict], group_id: str = None) -> Dict:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery (‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"""
        try:
            if not group_id:
                return None
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            all_positions = self.broker.get_all_positions()
            magic_number = self._get_magic_number_from_group_id(group_id)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å MT5
            losing_positions = []
            for pos in all_positions:
                magic = pos.get('magic', 0)
                comment = pos.get('comment', '')
                pnl = pos.get('profit', 0)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà recovery)
                if magic == magic_number and not comment.startswith('RECOVERY_') and pnl < 0:
                    losing_positions.append({
                        'symbol': pos['symbol'],
                        'order_id': pos['ticket'],
                        'lot_size': pos['volume'],
                        'entry_price': pos['price'],
                        'pnl': pnl,
                        'comment': comment,
                        'magic': magic
                    })
            
            if not losing_positions:
                self.logger.info("üìä No losing positions found in MT5")
                return None
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            suitable_pairs = []
            
            for pos in losing_positions:
                symbol = pos.get('symbol', '')
                order_id = pos.get('order_id', '')
                pnl = pos.get('pnl', 0)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á - ‡∏™‡πà‡∏á group_id ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                if self._is_position_hedged(pos, group_id):
                    self.logger.info(f"‚è≠Ô∏è Skipping {symbol} - already hedged")
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                risk_per_lot = self._calculate_risk_per_lot(pos)
                price_distance = self._calculate_price_distance(pos)
                
                # ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Distance ‚â• 10 pips ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if price_distance >= 10:
                    suitable_pairs.append({
                        'pair': pos,
                        'symbol': symbol,
                        'order_id': order_id,
                        'pnl': pnl,
                        'risk_per_lot': risk_per_lot,
                        'price_distance': price_distance,
                        'score': abs(pnl) * (price_distance / 10)  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡πÄ‡∏≠‡∏≤ Risk ‡∏≠‡∏≠‡∏Å)
                    })
            
            if not suitable_pairs:
                return None
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô) - ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å + distance ‡∏°‡∏≤‡∏Å
            suitable_pairs.sort(key=lambda x: x['score'], reverse=True)
            
            best_pair = suitable_pairs[0]['pair']
            best_info = suitable_pairs[0]
            
            self.logger.info(f"üìä Recovery pair selection:")
            self.logger.info(f"   Total losing positions from MT5: {len(losing_positions)}")
            self.logger.info(f"   Suitable pairs: {len(suitable_pairs)}")
            self.logger.info(f"   Selected: {best_info['symbol']} (Score: {best_info['score']:.2f})")
            self.logger.info(f"   PnL: ${best_info['pnl']:.2f}, Risk: {best_info['risk_per_lot']:.2%}, Distance: {best_info['price_distance']:.1f} pips")
            
            return best_pair
            
        except Exception as e:
            self.logger.error(f"Error selecting best pair for recovery: {e}")
            return None
    
    def _log_group_hedging_status(self, group_id: str, losing_pairs: List[Dict]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        try:
            self.logger.info("üìä GROUP HEDGING STATUS:")
            self.logger.info("-" * 50)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÉ‡∏ä‡πâ magic number)
            all_positions = self.broker.get_all_positions()
            group_positions = []
            
            # ‡∏´‡∏≤ magic number ‡∏à‡∏≤‡∏Å group_id
            magic_number = self._get_magic_number_from_group_id(group_id)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å MT5 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number
            for pos in all_positions:
                magic = pos.get('magic', 0)
                comment = pos.get('comment', '')
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ arbitrage (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà recovery)
                if magic == magic_number and not comment.startswith('RECOVERY_'):
                    group_positions.append({
                        'symbol': pos['symbol'],
                        'order_id': pos['ticket'],
                        'lot_size': pos['volume'],
                        'entry_price': pos['price'],
                        'pnl': pos['profit'],
                        'comment': comment,
                        'magic': magic
                    })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
            losing_positions = []
            profit_positions = []
            
            for pos in group_positions:
                symbol = pos['symbol']
                order_id = pos['order_id']
                pnl = pos['pnl']
                
                if pnl < 0:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                    losing_positions.append(pos)
                else:  # ‡∏Å‡∏≥‡πÑ‡∏£
                    profit_positions.append(pos)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
            if profit_positions:
                self.logger.info("üü¢ PROFIT ARBITRAGE POSITIONS:")
                for i, pos in enumerate(profit_positions, 1):
                    symbol = pos['symbol']
                    order_id = pos['order_id']
                    pnl = pos['pnl']
                    self.logger.info(f"   {i}. {symbol} (Order: {order_id}) - üí∞ PROFIT: ${pnl:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if losing_positions:
                self.logger.info("üî¥ LOSING ARBITRAGE POSITIONS:")
                for i, pos in enumerate(losing_positions, 1):
                    symbol = pos['symbol']
                    order_id = pos['order_id']
                    pnl = pos['pnl']
                    is_hedged = self._is_position_hedged(pos, group_id)
                    status = "‚úÖ HEDGED" if is_hedged else "‚ùå NOT HEDGED"
                    
                    self.logger.info(f"   {i}. {symbol} (Order: {order_id}) - {status} | PnL: ${pnl:.2f}")
                    
                    if not is_hedged:
                        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                        risk_per_lot = self._calculate_risk_per_lot(pos)
                        price_distance = self._calculate_price_distance(pos)
                        
                        risk_status = "‚úÖ" if risk_per_lot >= 0.015 else "‚ùå"
                        distance_status = "‚úÖ" if price_distance >= 10 else "‚ùå"
                        
                        self.logger.info(f"      Risk: {risk_per_lot:.2%} (info only)")
                        self.logger.info(f"      Distance: {price_distance:.1f} pips (‚â•10) {distance_status}")
                    else:
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery position ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß
                        self.logger.info(f"      üîó Already hedged with recovery position")
            else:
                self.logger.info("üî¥ LOSING ARBITRAGE POSITIONS: None")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ correlation ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ)
            profit_correlations = []
            losing_correlations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ correlation ‡∏à‡∏≤‡∏Å MT5 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏•‡∏∞ magic number
            for pos in all_positions:
                comment = pos.get('comment', '')
                magic = pos.get('magic', 0)
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô recovery position ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ magic number ‡πÅ‡∏•‡∏∞ comment)
                if magic == magic_number and 'RECOVERY_' in comment:
                    # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
                    if group_id and 'triangle_' in group_id:
                        triangle_part = group_id.split('triangle_')[1].split('_')[0]
                        group_number = triangle_part
                    else:
                        group_number = 'X'
                    
                    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RECOVERY_G{group_number}_{symbol}_TO_ ‡πÅ‡∏•‡∏∞ RECOVERY_G{group_number}_{symbol}
                    # ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ RECOVERY_G{group_number}_EURA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EURAUD)
                    # ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ RECOVERY_G{group_number}_GBPA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GBPAUD)
                    recovery_patterns = [
                        f'RECOVERY_G{group_number}_',
                        f'RECOVERY_G{group_number}_EURA',  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EURAUD ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                        f'RECOVERY_G{group_number}_GBPA'   # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GBPAUD ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
                    ]
                    
                    is_recovery = False
                    for pattern in recovery_patterns:
                        if pattern in comment:
                            is_recovery = True
                            break
                    
                    if is_recovery:
                        correlation_pos = {
                            'symbol': pos['symbol'],
                            'order_id': pos['ticket'],
                            'lot_size': pos['volume'],
                            'entry_price': pos['price'],
                            'pnl': pos['profit'],
                            'comment': comment
                        }
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                        pnl = pos['profit']
                        if pnl >= 0:  # ‡∏Å‡∏≥‡πÑ‡∏£
                            profit_correlations.append(correlation_pos)
                        else:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                            losing_correlations.append(correlation_pos)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ correlation ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
            if profit_correlations:
                self.logger.info("üü¢ PROFIT CORRELATION POSITIONS:")
                for i, pos in enumerate(profit_correlations, 1):
                    symbol = pos['symbol']
                    order_id = pos['order_id']
                    pnl = pos['pnl']
                    self.logger.info(f"   {i}. {symbol} (Order: {order_id}) - üí∞ PROFIT: ${pnl:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ correlation ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if losing_correlations:
                self.logger.info("üî¥ LOSING CORRELATION POSITIONS:")
                for i, pos in enumerate(losing_correlations, 1):
                    symbol = pos['symbol']
                    order_id = pos['order_id']
                    pnl = pos['pnl']
                    is_hedged = self._is_position_hedged(pos, group_id)
                    status = "‚úÖ HEDGED" if is_hedged else "‚ùå NOT HEDGED"
                    
                    self.logger.info(f"   {i}. {symbol} (Order: {order_id}) - {status} | PnL: ${pnl:.2f}")
                    
                    if not is_hedged:
                        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                        risk_per_lot = self._calculate_risk_per_lot(pos)
                        price_distance = self._calculate_price_distance(pos)
                        
                        risk_status = "‚úÖ" if risk_per_lot >= 0.015 else "‚ùå"
                        distance_status = "‚úÖ" if price_distance >= 10 else "‚ùå"
                        
                        self.logger.info(f"      Risk: {risk_per_lot:.2%} (info only)")
                        self.logger.info(f"      Distance: {price_distance:.1f} pips (‚â•10) {distance_status}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ correlation
            if not profit_correlations and not losing_correlations:
                self.logger.info("üîÑ EXISTING CORRELATION POSITIONS: None")
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            total_losing_positions = len(losing_positions) + len(losing_correlations)
            hedged_count = sum(1 for pair in losing_positions if self._is_position_hedged(pair, group_id))
            hedged_count += sum(1 for position in losing_correlations if self._is_position_hedged(position, group_id))
            
            self.logger.info("-" * 50)
            self.logger.info(f"üìà SUMMARY: {hedged_count}/{total_losing_positions} losing positions hedged")
            self.logger.info("=" * 80)
            
        except Exception as e:
            self.logger.error(f"Error logging group hedging status: {e}")
    
    def _get_position_pnl(self, position: Dict) -> float:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ PnL ‡∏Ç‡∏≠‡∏á position ‡∏à‡∏≤‡∏Å broker"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if not order_id or order_id == 'N/A':
                return 0.0
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PnL ‡∏à‡∏≤‡∏Å broker
            all_positions = self.broker.get_all_positions()
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    return pos.get('profit', 0.0)
            
            return 0.0
            
        except Exception as e:
            self.logger.error(f"Error getting position PnL: {e}")
            return 0.0
    
    def _is_position_hedged(self, position: Dict, group_id: str = None) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if not order_id or not symbol:
                return False
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number
            magic_number = self._get_magic_number_from_group_id(group_id) if group_id else 0
            all_positions = self.broker.get_all_positions()
            
            # ‡∏´‡∏≤ recovery positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ
            for pos in all_positions:
                comment = pos.get('comment', '')
                magic = pos.get('magic', 0)
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô recovery position ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
                if group_id and 'triangle_' in group_id:
                    triangle_part = group_id.split('triangle_')[1].split('_')[0]
                    group_number = triangle_part
                else:
                    group_number = 'X'
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RECOVERY_G{group_number}_{symbol}_TO_ ‡πÅ‡∏•‡∏∞ RECOVERY_G{group_number}_{symbol}
                # ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ RECOVERY_G{group_number}_EURA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EURAUD)
                # ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ RECOVERY_G{group_number}_GBPA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GBPAUD)
                recovery_patterns = [
                    f'RECOVERY_G{group_number}_{symbol}_TO_',
                    f'RECOVERY_G{group_number}_{symbol}',
                    f'RECOVERY_G{group_number}_EURA',  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EURAUD ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                    f'RECOVERY_G{group_number}_GBPA'   # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GBPAUD ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
                ]
                
                for pattern in recovery_patterns:
                    if magic == magic_number and pattern in comment:
                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ position ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if pos.get('profit') is not None:  # position ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                            self.logger.info(f"‚úÖ Found active recovery position for {symbol}: {comment}")
                            return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Error checking if position is hedged: {e}")
            return False
    
    def _calculate_risk_per_lot(self, position: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk ‡∏ï‡πà‡∏≠ lot ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á account balance"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if not order_id or order_id == 'N/A':
                return 0.0
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PnL ‡∏à‡∏≤‡∏Å broker
            all_positions = self.broker.get_all_positions()
            position_pnl = 0.0
            lot_size = 0.0
            
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    position_pnl = pos['profit']
                    lot_size = pos['volume']
                    break
            
            if lot_size <= 0:
                self.logger.warning(f"Invalid lot size for {symbol} (Order: {order_id})")
                return 0.0
            
            # ‡∏î‡∏∂‡∏á account balance ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
            account_balance = self.broker.get_account_balance()
            if not account_balance or account_balance <= 0:
                account_balance = 1000.0  # fallback
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á account balance
            risk_per_lot = abs(position_pnl) / account_balance
            self.logger.debug(f"Risk calculation for {symbol}: PnL={position_pnl:.2f}, Lot={lot_size:.2f}, Balance={account_balance:.2f}, Risk={risk_per_lot:.2%}")
            
            return risk_per_lot
            
        except Exception as e:
            self.logger.error(f"Error calculating risk per lot: {e}")
            return 0.0
    
    def _calculate_price_distance(self, position: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô pips"""
        try:
            symbol = position.get('symbol')
            order_id = position.get('order_id')
            
            if not symbol or not order_id or order_id == 'N/A':
                return 0.0
            
            # ‡∏î‡∏∂‡∏á entry_price ‡∏à‡∏≤‡∏Å broker API ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å position data
            entry_price = 0.0
            all_positions = self.broker.get_all_positions()
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    # ‡πÉ‡∏ä‡πâ 'price' ‡πÅ‡∏ó‡∏ô 'price_open' ‡∏ï‡∏≤‡∏° broker API structure
                    entry_price = pos.get('price', 0.0)
                    break
            
            if entry_price <= 0:
                self.logger.warning(f"Could not get entry price for {symbol} (Order: {order_id})")
                return 0.0
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_price = self.broker.get_current_price(symbol)
            if not current_price or current_price <= 0:
                self.logger.warning(f"Could not get current price for {symbol}")
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price distance ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if 'JPY' in symbol:
                price_distance = abs(current_price - entry_price) * 100
            else:
                price_distance = abs(current_price - entry_price) * 10000
            
            self.logger.debug(f"Price distance calculation for {symbol}: Entry={entry_price:.5f}, Current={current_price:.5f}, Distance={price_distance:.1f} pips")
            
            return price_distance
            
        except Exception as e:
            self.logger.error(f"Error calculating price distance: {e}")
            return 0.0
    
    def _start_pair_recovery(self, group_id: str, losing_pair: Dict):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            symbol = losing_pair['symbol']
            order_id = losing_pair.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏Å‡πà‡∏≠‡∏ô - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            pnl = self._get_position_pnl(losing_pair)
            if pnl >= 0:
                self.logger.info(f"üí∞ {symbol} (Order: {order_id}): PROFIT ${pnl:.2f} - No hedging needed")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if self._is_position_hedged(losing_pair):
                self.logger.info(f"‚è≠Ô∏è {symbol} (Order: {order_id}): Already hedged - skipping")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            risk_per_lot = self._calculate_risk_per_lot(losing_pair)
            price_distance = self._calculate_price_distance(losing_pair)
            
            self.logger.info(f"üîç Checking hedging conditions for {symbol} (Order: {order_id}):")
            self.logger.info(f"   PnL: ${pnl:.2f} (LOSS)")
            self.logger.info(f"   Risk: {risk_per_lot:.2%} (info only)")
            self.logger.info(f"   Distance: {price_distance:.1f} pips (need ‚â•10) {'‚úÖ' if price_distance >= 10 else '‚ùå'}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            if price_distance == 0.0:
                self.logger.warning(f"   ‚ö†Ô∏è Price distance is 0.0 - checking calculation...")
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å broker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
                all_positions = self.broker.get_all_positions()
                for pos in all_positions:
                    if pos['ticket'] == order_id:
                        entry_price = pos.get('price', 0.0)  # ‡πÉ‡∏ä‡πâ 'price' ‡πÅ‡∏ó‡∏ô 'price_open'
                        current_price = self.broker.get_current_price(symbol)
                        if current_price and entry_price:
                            if 'JPY' in symbol:
                                calc_distance = abs(current_price - entry_price) * 100
                            else:
                                calc_distance = abs(current_price - entry_price) * 10000
                            self.logger.info(f"   üîç Debug: Entry={entry_price:.5f}, Current={current_price:.5f}, Calc={calc_distance:.1f} pips")
                        break
            
            if price_distance < 10:  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà Distance ‚â• 10 pips
                self.logger.info(f"‚è≥ {symbol}: Distance too small ({price_distance:.1f} pips) - waiting for 10 pips")
                return
            
            self.logger.info(f"‚úÖ {symbol}: All conditions met - starting recovery")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
            group_pairs = self._get_group_pairs_from_mt5(group_id)
            correlation_candidates = self._find_optimal_correlation_pairs(symbol, group_pairs)
            
            if not correlation_candidates:
                self.logger.warning(f"   No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            if 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            self.logger.info(f"   Best correlation for G{group_number}: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery
            success = self._execute_correlation_position(losing_pair, best_correlation, group_id)
            
            if success:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß
                self._mark_position_as_hedged(losing_pair)
                self.logger.info(f"‚úÖ Recovery position opened for {symbol}")
            else:
                self.logger.error(f"‚ùå Failed to open recovery position for {symbol}")
                
        except Exception as e:
            self.logger.error(f"Error starting pair recovery: {e}")
    
    def _mark_position_as_hedged(self, position: Dict, group_id: str = None):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group)"""
        try:
            order_id = position.get('order_id')
            symbol = position.get('symbol')
            
            if order_id:
                self.hedged_positions[order_id] = {
                    'symbol': symbol,
                    'group_id': group_id,
                    'hedged_at': datetime.now(),
                    'position_info': position
                }
            
            if symbol and group_id:
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô hedged_pairs_by_group
                if group_id not in self.hedged_pairs_by_group:
                    self.hedged_pairs_by_group[group_id] = set()
                self.hedged_pairs_by_group[group_id].add(symbol)
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô hedged_positions_by_group
                if group_id not in self.hedged_positions_by_group:
                    self.hedged_positions_by_group[group_id] = {}
                self.hedged_positions_by_group[group_id][order_id] = {
                    'symbol': symbol,
                    'hedged_at': datetime.now(),
                    'position_info': position
                }
            
            self.logger.debug(f"üìù Marked position as hedged: {symbol} (Order: {order_id})")
            
        except Exception as e:
            self.logger.error(f"Error marking position as hedged: {e}")
    
    def _calculate_hedge_lot_size(self, original_lot: float, correlation: float, loss_percent: float, original_symbol: str = None, hedge_symbol: str = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hedge position - ‡πÉ‡∏ä‡πâ pip value ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ"""
        try:
            # ‡∏î‡∏∂‡∏á balance ‡∏à‡∏≤‡∏Å broker
            balance = self.broker.get_account_balance()
            if not balance:
                self.logger.warning("Cannot get account balance - using original lot size")
                return original_lot
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pip value ‡∏Ç‡∏≠‡∏á original position
            if original_symbol and hedge_symbol:
                original_pip_value = TradingCalculations.calculate_pip_value(original_symbol, original_lot, self.broker)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì target pip value ‡∏ï‡∏≤‡∏° balance (base $10K = $10 pip value)
                base_balance = 10000.0
                balance_multiplier = balance / base_balance
                target_pip_value = 10.0 * balance_multiplier
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ pip value ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö target
                # ‡πÉ‡∏ä‡πâ correlation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î hedge
                hedge_pip_value = target_pip_value * abs(correlation)  # ‡πÉ‡∏ä‡πâ absolute value
                
                # ‡∏´‡∏≤ lot size ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ pip value ‡∏ï‡∏≤‡∏° target
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô base
                pip_value_per_001 = TradingCalculations.calculate_pip_value(hedge_symbol, 0.01, self.broker)
                if pip_value_per_001 > 0:
                    hedge_lot = (hedge_pip_value * 0.01) / pip_value_per_001
                else:
                    # Fallback: ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°
                    hedge_lot = original_lot
                
                # Round to valid lot size
                hedge_lot = TradingCalculations.round_to_valid_lot_size(hedge_lot)
                
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î lot
                hedge_lot = min(hedge_lot, 1.0)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1 lot
                hedge_lot = max(hedge_lot, 0.1)  # ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î 0.1 lot
                
                self.logger.info(f"üìä Hedge lot calculation: Original={original_lot:.4f}, Target Pip=${target_pip_value:.2f}, Hedge Lot={hedge_lot:.4f}")
                self.logger.info(f"   Original pip value: ${original_pip_value:.2f}, Hedge pip value: ${hedge_pip_value:.2f}")
                self.logger.info(f"   Hedge symbol: {hedge_symbol}, Pip value per 0.01: ${pip_value_per_001:.2f}")
                
                return float(hedge_lot)
            else:
                # Fallback: ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏¥‡∏°
                return original_lot
            
        except Exception as e:
            self.logger.error(f"Error calculating hedge lot size: {e}")
            return original_lot
    
    def _send_hedge_order(self, symbol: str, lot_size: float, group_id: str, recovery_level: int = 1, original_symbol: str = None) -> bool:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå hedge"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment - ‡πÉ‡∏™‡πà‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            if 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            if original_symbol:
                comment = f"RECOVERY_G{group_number}_{original_symbol}_TO_{symbol}_L{recovery_level}"
            else:
                comment = f"RECOVERY_G{group_number}_{symbol}_L{recovery_level}"
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°)
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
            order_type = 'SELL'  # ‡πÉ‡∏ä‡πâ SELL ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            result = self.broker.place_order(
                symbol=symbol,
                order_type=order_type,  # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                volume=lot_size,
                comment=comment
            )
            
            if result and result.get('retcode') == 10009:
                self.logger.info(f"‚úÖ Recovery order sent: {symbol} {lot_size} lot")
                return True
            else:
                self.logger.error(f"‚ùå Failed to send recovery order: {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error sending hedge order: {e}")
            return False
    
    def check_recovery_chain(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery chain ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ recovery chains ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.recovery_chains:
                return
            
            active_chains = 0
            chains_to_remove = []
            
            for group_id, chain_data in self.recovery_chains.items():
                if chain_data['status'] != 'active':
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ group_id ‡πÉ‡∏ô active_groups ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                active_chains += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery pairs
                for recovery_pair in chain_data['recovery_pairs']:
                    if self._should_continue_recovery(recovery_pair):
                        self.logger.info(f"üîÑ Continuing recovery chain for {recovery_pair['symbol']}")
                        self._continue_recovery_chain(group_id, recovery_pair)
                    # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° recovery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î log spam
            
            # ‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ recovery chains ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if active_chains > 0:
                self.logger.debug(f"üìä Active recovery chains: {active_chains}")
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery chain: {e}")
    
    def _should_continue_recovery(self, recovery_pair: Dict) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ recovery ‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö arbitrage"""
        try:
            symbol = recovery_pair['symbol']
            order_id = recovery_pair.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if self._is_position_hedged(recovery_pair):
                self.logger.debug(f"‚è≠Ô∏è {symbol} (Order: {order_id}): Already hedged - skipping")
                return False
            
            if not order_id:
                self.logger.debug(f"üîç {symbol}: No order_id found")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏à‡∏≤‡∏Å broker API
            all_positions = self.broker.get_all_positions()
            position_pnl = 0.0
            lot_size = 0.0
            
            for pos in all_positions:
                if pos['ticket'] == order_id:
                    position_pnl = pos['profit']
                    lot_size = pos['volume']
                    break
            
            if lot_size <= 0:
                self.logger.debug(f"üîç {symbol}: Invalid lot size ({lot_size})")
                return False
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: Risk 5% ‡∏ï‡πà‡∏≠ lot
            risk_per_lot = abs(position_pnl) / lot_size
            
            if risk_per_lot < 0.015:  # risk ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1.5%
                self.logger.debug(f"‚è≥ {symbol} risk too low ({risk_per_lot:.2%}) - Waiting for 1.5%")
                return False
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 10 pips
            entry_price = recovery_pair.get('entry_price', 0)
            if entry_price > 0:
                try:
                    current_price = self.broker.get_current_price(symbol)
                    if current_price > 0:
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì price distance ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                        if 'JPY' in symbol:
                            price_distance = abs(current_price - entry_price) * 100
                        else:
                            price_distance = abs(current_price - entry_price) * 10000
                        
                        self.logger.debug(f"üîç {symbol}: Entry {entry_price:.5f}, Current {current_price:.5f}, Distance {price_distance:.1f} pips")
                        
                        if price_distance < 10:  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏à‡∏∏‡∏î
                            self.logger.debug(f"‚è≥ {symbol} price distance too small ({price_distance:.1f} pips) - Waiting for 10 pips")
                            return False
                except Exception as e:
                    self.logger.warning(f"Could not get price for {symbol}: {e}")
                    return False
            else:
                self.logger.warning(f"üîç {symbol}: No entry price found")
                return False
            
            # ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.logger.info(f"‚úÖ {symbol} meets recovery conditions - Risk: {risk_per_lot:.2%}, Distance: {price_distance:.1f} pips")
            return True
            
        except Exception as e:
            self.logger.error(f"Error checking recovery continuation: {e}")
            return False
    
    def _continue_recovery_chain(self, group_id: str, recovery_pair: Dict):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ recovery chain ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        try:
            symbol = recovery_pair['symbol']
            order_id = recovery_pair.get('order_id')
            
            self.logger.info("=" * 60)
            self.logger.info(f"üîÑ CONTINUING RECOVERY CHAIN FOR {symbol} (Order: {order_id})")
            self.logger.info("=" * 60)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            risk_per_lot = self._calculate_risk_per_lot(recovery_pair)
            price_distance = self._calculate_price_distance(recovery_pair)
            
            self.logger.info(f"üîç Checking hedging conditions for {symbol} (Order: {order_id}):")
            self.logger.info(f"   Risk: {risk_per_lot:.2%} (info only)")
            self.logger.info(f"   Distance: {price_distance:.1f} pips (need ‚â•10) {'‚úÖ' if price_distance >= 10 else '‚ùå'}")
            
            if price_distance < 10:  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà Distance ‚â• 10 pips
                self.logger.info(f"‚è≥ {symbol}: Distance too small ({price_distance:.1f} pips) - waiting for 10 pips")
                return
            
            self.logger.info(f"‚úÖ {symbol}: All conditions met - continuing recovery")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
            self.logger.info(f"üîç Searching for correlation candidates for {symbol}")
            group_pairs = self._get_group_pairs_from_mt5(group_id)
            correlation_candidates = self._find_optimal_correlation_pairs(symbol, group_pairs)
            
            if not correlation_candidates:
                self.logger.warning(f"‚ùå No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            if 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            self.logger.info(f"üéØ Best correlation for G{group_number}: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery ‡πÉ‡∏´‡∏°‡πà
            self.logger.info(f"üì§ Sending new recovery order for {symbol} -> {best_correlation['symbol']}")
            success = self._execute_correlation_position(recovery_pair, best_correlation, group_id)
            
            if success:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß
                self._mark_position_as_hedged(recovery_pair)
                self.logger.info(f"‚úÖ Chain recovery continued for {symbol} -> {best_correlation['symbol']}")
            else:
                self.logger.error(f"‚ùå Failed to continue chain recovery for {symbol} -> {best_correlation['symbol']}")
                
        except Exception as e:
            self.logger.error(f"Error continuing recovery chain: {e}")
    
    def update_recovery_parameters(self, params: Dict):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå recovery"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ recovery_thresholds ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not hasattr(self, 'recovery_thresholds'):
                self.logger.warning("recovery_thresholds not initialized, creating default values")
                self.recovery_thresholds = {
                    'min_correlation': 0.5,
                    'max_correlation': 0.95,
                    'min_loss_threshold': -0.005,
                    'max_recovery_time_hours': 24,
                    'hedge_ratio_range': (0.3, 2.5),
                    'wait_time_minutes': 5,
                    'base_lot_size': 0.1
                }
            
            for key, value in params.items():
                if key in self.recovery_thresholds:
                    self.recovery_thresholds[key] = value
                    self.logger.info(f"Updated recovery_thresholds[{key}] to {value}")
                elif key in ['account_balance', 'account_equity', 'free_margin', 'target_pip_value', 'balance_multiplier']:
                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô attribute ‡πÅ‡∏¢‡∏Å
                    setattr(self, key, value)
                    self.logger.debug(f"Updated {key} to {value}")
                else:
                    self.logger.debug(f"Parameter {key} not found in recovery_thresholds or account info")
                    
        except Exception as e:
            self.logger.error(f"Error updating recovery parameters: {e}")
    
    def check_recovery_opportunities(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£ recovery"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            for recovery_id, position in self.recovery_positions.items():
                if position['status'] == 'active':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ recovery ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if self._should_continue_recovery(position):
                        self._continue_recovery_chain(position['group_id'], position)
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery opportunities: {e}")
    
    def _initiate_correlation_recovery(self, losing_position: Dict):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° correlation recovery"""
        try:
            symbol = losing_position['symbol']
            self.logger.info(f"üîÑ Starting correlation recovery for {symbol}")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
            group_pairs = self._get_group_pairs_from_mt5(losing_position.get('group_id', 'unknown'))
            correlation_candidates = self._find_optimal_correlation_pairs(symbol, group_pairs)
            
            if not correlation_candidates:
                self.logger.warning(f"   No correlation candidates found for {symbol}")
                return
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_correlation = correlation_candidates[0]
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            group_id_str = losing_position.get('group_id', 'unknown')
            if 'triangle_' in group_id_str:
                triangle_part = group_id_str.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            self.logger.info(f"   Best correlation for G{group_number}: {best_correlation['symbol']} (correlation: {best_correlation['correlation']:.2f})")
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå recovery
            success = self._execute_correlation_position(losing_position, best_correlation, losing_position.get('group_id', 'unknown'))
            
            if success:
                self.logger.info(f"‚úÖ Correlation recovery position opened: {best_correlation['symbol']}")
            else:
                self.logger.error(f"‚ùå Failed to open correlation recovery position: {best_correlation['symbol']}")
                
        except Exception as e:
            self.logger.error(f"Error initiating correlation recovery: {e}")
    
    def _find_optimal_correlation_pairs(self, base_symbol: str, group_pairs: List[str] = None) -> List[Dict]:
        """
        ‚ö° CRITICAL: Find optimal correlation pairs for recovery
        ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
        """
        try:
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏î‡πÜ ‡πÅ‡∏ó‡∏ô (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
            return self._find_correlation_pairs_for_any_symbol(base_symbol, group_pairs)
            
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Ukoil, Gold, Silver, etc.)
            all_pairs = [
                'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'USDNZD',
                'EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY',
                'EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF',
                'EURAUD', 'GBPAUD', 'USDAUD', 'AUDCAD', 'AUDNZD',
                'EURNZD', 'GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD',
                'EURCAD', 'GBPCAD', 'USDCAD', 'AUDCAD', 'CADCHF'
            ]
            
            self.logger.info(f"üîç Using predefined currency pairs only (excluding commodities like Ukoil)")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö base_symbol
            self.logger.info(f"üîç Searching correlation pairs for {base_symbol} from {len(all_pairs)} available pairs")
            checked_pairs = 0
            valid_correlations = 0
            
            for symbol in all_pairs:
                if symbol == base_symbol:
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà arbitrage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                # if symbol in arbitrage_pairs:
                #     continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Ukoil, Gold, Silver, etc.)
                if not self._is_currency_pair(symbol):
                    continue
                
                checked_pairs += 1
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                correlation = self._calculate_correlation_for_arbitrage_pair(base_symbol, symbol)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ correlation ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
                if correlation >= self.recovery_thresholds['min_correlation']:
                    valid_correlations += 1
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° correlation
                    direction = self._determine_recovery_direction(base_symbol, symbol, correlation, None)
                    
                    correlation_candidates.append({
                        'symbol': symbol,
                        'correlation': correlation,
                        'recovery_strength': correlation,
                        'direction': direction
                    })
                    
                    self.logger.debug(f"‚úÖ Found correlation: {symbol} = {correlation:.2f} ({direction})")
                else:
                    self.logger.debug(f"‚ùå Low correlation: {symbol} = {correlation:.2f} (min: {self.recovery_thresholds['min_correlation']:.2f})")
            
            self.logger.info(f"üìä Correlation search results: {valid_correlations}/{checked_pairs} pairs passed correlation threshold")
            
            # Sort by recovery strength (highest first)
            correlation_candidates.sort(key=lambda x: x['recovery_strength'], reverse=True)
            
            if not correlation_candidates:
                self.logger.error(f"‚ùå No correlation candidates created for {base_symbol}")
            else:
                self.logger.info(f"üéØ Final correlation candidates for {base_symbol}: {len(correlation_candidates)} pairs")
                for i, candidate in enumerate(correlation_candidates[:3]):  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    self.logger.info(f"   {i+1}. {candidate['symbol']}: {candidate['correlation']:.2f} ({candidate['direction']})")
            
            return correlation_candidates
            
        except Exception as e:
            self.logger.error(f"Error finding optimal correlation pairs for {base_symbol}: {e}")
            return []
    
    def _is_currency_pair(self, symbol: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Ukoil, Gold, Silver, etc.)"""
        try:
            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
            valid_currency_pairs = [
                'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'USDNZD',
                'EURGBP', 'EURJPY', 'GBPJPY', 'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY',
                'EURCHF', 'GBPCHF', 'AUDCHF', 'CADCHF', 'NZDCHF',
                'EURAUD', 'GBPAUD', 'USDAUD', 'AUDCAD', 'AUDNZD',
                'EURNZD', 'GBPNZD', 'USDNZD', 'AUDNZD', 'CADNZD',
                'EURCAD', 'GBPCAD', 'USDCAD', 'AUDCAD', 'CADCHF'
            ]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if symbol in valid_currency_pairs:
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô (3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
            if len(symbol) == 6:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if symbol.isalpha():
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏†‡∏Ñ‡∏†‡∏±‡∏ì‡∏ë‡πå
                    commodities = ['UKOIL', 'USOIL', 'GOLD', 'SILVER', 'COPPER', 'PLATINUM', 'PALLADIUM']
                    if symbol.upper() in commodities:
                        return False
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Error checking if symbol is currency pair: {e}")
            return False
    
    def _calculate_correlation_for_arbitrage_pair(self, base_symbol: str, target_symbol: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô arbitrage ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ correlation values ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if base_symbol == 'EURUSD':
                # Major pairs with high correlation
                if target_symbol in ['GBPUSD', 'AUDUSD', 'NZDUSD']:
                    return 0.85  # High correlation
                # EUR crosses
                elif target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.75  # Medium-high correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                # Other major pairs
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.65  # Medium correlation
                # Minor pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # CAD, CHF, NZD crosses
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
                    
            elif base_symbol == 'GBPUSD':
                # Major pairs with high correlation
                if target_symbol in ['EURUSD', 'AUDUSD', 'NZDUSD']:
                    return 0.85  # High correlation
                # GBP crosses
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.70  # Medium correlation
                # EUR crosses
                elif target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.65  # Medium correlation
                # Other major pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # Minor pairs
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
                    
            elif base_symbol == 'EURGBP':
                # EUR crosses
                if target_symbol in ['EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD']:
                    return 0.80  # High correlation
                # GBP crosses
                elif target_symbol in ['GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD']:
                    return 0.80  # High correlation
                # Major pairs
                elif target_symbol in ['EURUSD', 'GBPUSD']:
                    return 0.75  # Medium-high correlation
                # USD crosses
                elif target_symbol in ['USDJPY', 'USDCAD', 'USDCHF', 'USDNZD']:
                    return 0.65  # Medium correlation
                # Other major pairs
                elif target_symbol in ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD']:
                    return 0.60  # Lower correlation
                # Minor pairs
                elif target_symbol in ['CADJPY', 'CHFJPY', 'NZDJPY', 'CADCHF', 'NZDCHF']:
                    return 0.55  # Lower correlation
                else:
                    return 0.50  # Default correlation
            
            return 0.50  # Default correlation
            
        except Exception as e:
            self.logger.error(f"Error calculating correlation: {e}")
            return 0.50
    
    def _calculate_correlation_for_any_pair(self, base_symbol: str, target_symbol: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏î‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation
            return self._calculate_real_correlation_from_mt5(base_symbol, target_symbol)
            
        except Exception as e:
            self.logger.error(f"Error calculating correlation for any pair: {e}")
            return 0.60
    
    def _calculate_real_correlation_from_mt5(self, base_symbol: str, target_symbol: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å MT5
            base_price = self.broker.get_current_price(base_symbol)
            target_price = self.broker.get_current_price(target_symbol)
            
            if not base_price or not target_price:
                return 0.60  # Default correlation
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
            if self._are_opposite_currency_pairs(base_symbol, target_symbol):
                return -0.80  # Negative correlation (opposite movement)
            elif self._are_same_currency_pairs(base_symbol, target_symbol):
                return 0.80   # Positive correlation (same movement)
            else:
                return 0.60   # Default correlation
                
        except Exception as e:
            self.logger.error(f"Error calculating real correlation from MT5: {e}")
            return 0.60
    
    def _are_opposite_currency_pairs(self, base_symbol: str, target_symbol: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ô
            opposite_pairs = [
                ('EURUSD', 'USDJPY'), ('EURUSD', 'USDCAD'), ('EURUSD', 'USDCHF'),
                ('GBPUSD', 'USDJPY'), ('GBPUSD', 'USDCAD'), ('GBPUSD', 'USDCHF'),
                ('AUDUSD', 'USDJPY'), ('AUDUSD', 'USDCAD'), ('AUDUSD', 'USDCHF'),
                ('GBPAUD', 'USDJPY'), ('GBPAUD', 'USDCAD'), ('GBPAUD', 'USDCHF'),
                ('EURAUD', 'USDJPY'), ('EURAUD', 'USDCAD'), ('EURAUD', 'USDCHF'),
                ('EURGBP', 'USDJPY'), ('EURGBP', 'USDCAD'), ('EURGBP', 'USDCHF')
            ]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            return (base_symbol, target_symbol) in opposite_pairs or (target_symbol, base_symbol) in opposite_pairs
            
        except Exception as e:
            self.logger.error(f"Error checking opposite currency pairs: {e}")
            return False
    
    def _are_same_currency_pairs(self, base_symbol: str, target_symbol: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            same_pairs = [
                ('EURUSD', 'GBPUSD'), ('EURUSD', 'AUDUSD'), ('EURUSD', 'NZDUSD'),
                ('GBPUSD', 'AUDUSD'), ('GBPUSD', 'NZDUSD'), ('AUDUSD', 'NZDUSD'),
                ('EURJPY', 'GBPJPY'), ('EURJPY', 'AUDJPY'), ('EURJPY', 'CADJPY'),
                ('GBPJPY', 'AUDJPY'), ('GBPJPY', 'CADJPY'), ('AUDJPY', 'CADJPY'),
                ('EURCHF', 'GBPCHF'), ('EURCHF', 'AUDCHF'), ('EURCHF', 'CADCHF'),
                ('GBPCHF', 'AUDCHF'), ('GBPCHF', 'CADCHF'), ('AUDCHF', 'CADCHF')
            ]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            return (base_symbol, target_symbol) in same_pairs or (target_symbol, base_symbol) in same_pairs
            
        except Exception as e:
            self.logger.error(f"Error checking same currency pairs: {e}")
            return False
    
    def _determine_recovery_direction(self, base_symbol: str, target_symbol: str, correlation: float, original_position: Dict = None) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ recovery ‡∏ï‡∏≤‡∏° correlation (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà BUY/SELL ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
            original_direction = None
            if original_position:
                original_direction = original_position.get('type', 'SELL')  # BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
            
            # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡∏Ñ‡∏π‡πà correlation ‡∏à‡∏∞‡∏Å‡∏≥‡πÑ‡∏£
            if original_direction == 'BUY':
                return 'BUY'   # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            elif original_direction == 'SELL':
                return 'SELL'  # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            else:
                # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏ä‡πâ SELL ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
                return 'SELL'
                
        except Exception as e:
            self.logger.error(f"Error determining recovery direction: {e}")
            return 'SELL'  # Default to SELL
    
    def _find_correlation_pairs_for_any_symbol(self, base_symbol: str, group_pairs: List[str] = None) -> List[Dict]:
        """‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ correlation ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏î‡πÜ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)"""
        try:
            correlation_candidates = []
            
            # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
            all_pairs = self._get_all_currency_pairs_from_mt5()
            
            self.logger.info(f"üîç Using all currency pairs from MT5: {len(all_pairs)} pairs")
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° arbitrage)
            if group_pairs is None:
                group_pairs = []
            
            self.logger.info(f"üö´ Excluding group pairs: {group_pairs}")
            
            for symbol in all_pairs:
                if symbol == base_symbol:
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° arbitrage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
                if symbol in group_pairs:
                    self.logger.debug(f"   ‚ùå Skipping {symbol} (already in group)")
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Ukoil, Gold, Silver, etc.)
                if not self._is_currency_pair(symbol):
                    continue
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì correlation ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô
                correlation = self._calculate_correlation_for_any_pair(base_symbol, symbol)
                
                if correlation <= -self.recovery_thresholds['min_correlation']:  # ‡πÉ‡∏ä‡πâ correlation ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° correlation
                    direction = self._determine_recovery_direction(base_symbol, symbol, correlation, None)
                    
                    correlation_candidates.append({
                        'symbol': symbol,
                        'correlation': correlation,
                        'recovery_strength': correlation,
                        'direction': direction
                    })
            
            # Sort by recovery strength (lowest first for negative correlation) - CRITICAL FIX
            correlation_candidates.sort(key=lambda x: x['recovery_strength'], reverse=False)
            
            if not correlation_candidates:
                self.logger.error(f"‚ùå No correlation candidates created for {base_symbol}")
            else:
                self.logger.info(f"üéØ Final correlation candidates for {base_symbol}: {len(correlation_candidates)} pairs")
                for i, candidate in enumerate(correlation_candidates[:5]):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    self.logger.info(f"   {i+1}. {candidate['symbol']}: {candidate['correlation']:.2f} ({candidate['direction']})")
            
            return correlation_candidates
            
        except Exception as e:
            self.logger.error(f"Error finding correlation pairs for any symbol: {e}")
            return []
    
    def _execute_correlation_position(self, original_position: Dict, correlation_candidate: Dict, group_id: str) -> bool:
        """
        ‚ö° CRITICAL: Execute correlation position for recovery
        """
        try:
            symbol = correlation_candidate['symbol']
            correlation = correlation_candidate['correlation']
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°)
            original_direction = original_position.get('type', 'SELL')
            if original_direction == 'BUY':
                direction = 'BUY'   # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            elif original_direction == 'SELL':
                direction = 'SELL'  # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            else:
                direction = 'SELL'  # Default to SELL
            
            # Calculate correlation volume
            correlation_volume = self._calculate_hedge_volume(original_position, correlation_candidate)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏ï‡∏≤‡∏° balance-based sizing
            original_lot = original_position.get('lot_size', original_position.get('volume', 0.1))
            original_symbol = original_position.get('symbol', '')
            
            correlation_lot_size = self._calculate_hedge_lot_size(
                original_lot=original_lot,
                correlation=correlation,
                loss_percent=0.0,  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ loss_percent ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                original_symbol=original_symbol,
                hedge_symbol=symbol
            )
            
            # Send correlation order
            order_result = self._send_correlation_order(symbol, correlation_lot_size, group_id, original_position)
            
            if order_result and order_result.get('success'):
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô entry price
                entry_price = self.broker.get_current_price(symbol)
                if not entry_price:
                    entry_price = 0.0
                
                # Store correlation position
                correlation_position = {
                    'symbol': symbol,
                    'direction': direction,
                    'lot_size': correlation_lot_size,
                    'entry_price': entry_price,
                    'order_id': order_result.get('order_id'),  # ‡πÄ‡∏û‡∏¥‡πà‡∏° order_id
                    'correlation': correlation,
                    'correlation_ratio': 1.0,  # ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    'original_pair': original_position['symbol'],
                    'group_id': group_id,
                    'opened_at': datetime.now(),
                    'status': 'active'
                }
                
                recovery_id = f"recovery_{group_id}_{symbol}_{int(datetime.now().timestamp())}"
                self.recovery_positions[recovery_id] = correlation_position
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô recovery_positions_by_group
                if group_id not in self.recovery_positions_by_group:
                    self.recovery_positions_by_group[group_id] = {}
                self.recovery_positions_by_group[group_id][recovery_id] = correlation_position
                self._update_recovery_data()
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
                self._log_hedging_action(original_position, correlation_position, correlation_candidate)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏ã‡πâ‡∏≥)
                self._mark_position_as_hedged(original_position)
                
                self.logger.info(f"‚úÖ Correlation recovery position opened: {symbol}")
                return True
            else:
                self.logger.error(f"‚ùå Failed to open correlation recovery position: {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error executing correlation position: {e}")
            return False
    
    def _log_hedging_action(self, original_position: Dict, correlation_position: Dict, correlation_candidate: Dict, group_id: str = None):
        """‡πÅ‡∏™‡∏î‡∏á log ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        try:
            original_symbol = original_position['symbol']
            hedge_symbol = correlation_position['symbol']
            correlation = correlation_candidate['correlation']
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            if group_id and 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            self.logger.info("=" * 60)
            self.logger.info(f"üéØ HEDGING ACTION COMPLETED - GROUP G{group_number}")
            self.logger.info("=" * 60)
            self.logger.info(f"üìâ Original Position: {original_symbol}")
            self.logger.info(f"   Order ID: {original_position.get('order_id', 'N/A')}")
            self.logger.info(f"   Lot Size: {original_position.get('lot_size', 0.1)}")
            self.logger.info(f"   Entry Price: {original_position.get('entry_price', 0.0):.5f}")
            
            self.logger.info(f"üõ°Ô∏è Recovery Position: {hedge_symbol}")
            self.logger.info(f"   Lot Size: {correlation_position['lot_size']}")
            self.logger.info(f"   Entry Price: {correlation_position['entry_price']:.5f}")
            self.logger.info(f"   Direction: {correlation_position['direction']}")
            
            self.logger.info(f"üìä Recovery Details:")
            self.logger.info(f"   Group: G{group_number}")
            self.logger.info(f"   Hedging: {original_symbol} ‚Üí {hedge_symbol}")
            self.logger.info(f"   Correlation: {correlation:.2f}")
            self.logger.info(f"   Recovery Strength: {correlation_candidate.get('recovery_strength', correlation):.2f}")
            
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"Error logging hedging action: {e}")
    
    def _calculate_hedge_volume(self, original_position: Dict, correlation_candidate: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö correlation position - ‡πÉ‡∏ä‡πâ balance-based sizing"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å original position
            original_lot = original_position.get('lot_size', original_position.get('volume', 0.1))
            original_symbol = original_position.get('symbol', '')
            hedge_symbol = correlation_candidate.get('symbol', '')
            
            # ‡πÉ‡∏ä‡πâ balance-based lot sizing
            volume = self._calculate_hedge_lot_size(
                original_lot=original_lot,
                correlation=correlation_candidate.get('correlation', 0.5),
                loss_percent=0.0,
                original_symbol=original_symbol,
                hedge_symbol=hedge_symbol
            )
            
            return float(volume)
            
        except Exception as e:
            self.logger.error(f"Error calculating hedge volume: {e}")
            return 0.1
    
    def _send_correlation_order(self, symbol: str, lot_size: float, group_id: str, original_position: Dict = None) -> Dict:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå correlation recovery"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment - ‡πÉ‡∏™‡πà‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
            if 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                group_number = triangle_part
            else:
                group_number = 'X'
            original_symbol = original_position.get('symbol', 'UNKNOWN') if original_position else 'UNKNOWN'
            comment = f"RECOVERY_G{group_number}_{original_symbol}_TO_{symbol}"
            
            # ‡∏´‡∏≤ magic number ‡∏à‡∏≤‡∏Å group_id
            magic_number = self._get_magic_number_from_group_id(group_id)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°)
            original_direction = original_position.get('type', 'SELL') if original_position else 'SELL'
            if original_direction == 'BUY':
                order_type = 'BUY'   # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            elif original_direction == 'SELL':
                order_type = 'SELL'  # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            else:
                order_type = 'SELL'  # Default to SELL
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            result = self.broker.place_order(
                symbol=symbol,
                order_type=order_type,  # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                volume=lot_size,
                comment=comment,
                magic=magic_number
            )
            
            if result and result.get('retcode') == 10009:
                # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å group_id (group_triangle_X_Y -> X)
                if 'triangle_' in group_id:
                    triangle_part = group_id.split('triangle_')[1].split('_')[0]
                    group_number = triangle_part
                else:
                    group_number = 'X'
                self.logger.info(f"‚úÖ G{group_number} Recovery order sent: {symbol} {lot_size} lot")
                return {
                    'success': True,
                    'order_id': result.get('order_id'),
                    'symbol': symbol,
                    'lot_size': lot_size
                }
            else:
                self.logger.error(f"‚ùå Failed to send correlation recovery order: {symbol}")
                return {
                    'success': False,
                    'order_id': None,
                    'symbol': symbol,
                    'lot_size': lot_size
                }
                
        except Exception as e:
            self.logger.error(f"Error sending correlation recovery order: {e}")
            return {
                'success': False,
                'order_id': None,
                'symbol': symbol,
                'lot_size': lot_size
            }
    
    def check_recovery_positions(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ recovery positions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.recovery_positions:
                return
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î positions ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            self.cleanup_closed_recovery_positions()
            
            active_recovery_count = 0
            positions_to_remove = []
            
            for recovery_id, position in self.recovery_positions.items():
                if position['status'] == 'active':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    group_id = position.get('group_id', '')
                    if not group_id:
                        positions_to_remove.append(recovery_id)
                        continue
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö arbitrage_detector)
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ group_id ‡πÉ‡∏ô active_groups ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                    active_recovery_count += 1
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ recovery ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if self._should_continue_recovery(position):
                        self.logger.info(f"üîÑ Starting chain recovery for {position['symbol']}")
                        self._continue_recovery_chain(position['group_id'], position)
                    # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° recovery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î log spam
            
            # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ group_id
            for recovery_id in positions_to_remove:
                del self.recovery_positions[recovery_id]
                self.logger.info(f"üóëÔ∏è Removed orphaned recovery position: {recovery_id}")
            
            # ‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ recovery positions ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if active_recovery_count > 0:
                self.logger.debug(f"üìä Active recovery positions: {active_recovery_count}")
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery positions: {e}")
    
    def check_recovery_positions_with_status(self, group_id: str = None, losing_pairs: list = None):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
            if group_id and losing_pairs:
                self._log_group_hedging_status(group_id, losing_pairs)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery positions ‡∏õ‡∏Å‡∏ï‡∏¥
            self.check_recovery_positions()
                        
        except Exception as e:
            self.logger.error(f"Error checking recovery positions with status: {e}")
    
    def _close_recovery_position(self, recovery_id: str):
        """‡∏õ‡∏¥‡∏î recovery position ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ PnL"""
        try:
            if recovery_id not in self.recovery_positions:
                self.logger.debug(f"Recovery position {recovery_id} not found in tracking data")
                return 0.0
            
            position = self.recovery_positions[recovery_id]
            symbol = position['symbol']
            order_id = position.get('order_id')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ magic number)
            position_exists = False
            pnl = 0.0
            if order_id:
                all_positions = self.broker.get_all_positions()
                for pos in all_positions:
                    if pos['ticket'] == order_id:
                        position_exists = True
                        pnl = pos.get('profit', 0.0)
                        magic = pos.get('magic', 0)
                        self.logger.info(f"üîç Found recovery position: {symbol} (Order: {order_id}, Magic: {magic}, PnL: {pnl:.2f})")
                        break
            
            if not position_exists:
                # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                position['status'] = 'closed'
                position['closed_at'] = datetime.now()
                position['close_reason'] = 'already_closed'
                self._update_recovery_data()
                self.logger.info(f"‚úÖ Recovery position {symbol} was already closed - updated status")
                return 0.0
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            success = self.broker.close_position(symbol)
            
            if success:
                position['status'] = 'closed'
                position['closed_at'] = datetime.now()
                position['close_reason'] = 'manual_close'
                self._update_recovery_data()
                self.logger.info(f"‚úÖ Recovery position closed: {symbol} - PnL: ${pnl:.2f}")
                return pnl
            else:
                self.logger.error(f"‚ùå Failed to close recovery position: {symbol}")
                return 0.0
                    
        except Exception as e:
            self.logger.error(f"Error closing recovery position: {e}")
            return 0.0
    
    def get_correlation_matrix(self) -> Dict:
        """Get correlation matrix"""
        return self.correlation_matrix
    
    def get_recovery_positions(self) -> Dict:
        """Get recovery positions"""
        return self.recovery_positions
    
    def close_recovery_position(self, recovery_id: str, reason: str = "manual"):
        """Close recovery position manually"""
        try:
            if recovery_id in self.recovery_positions:
                position = self.recovery_positions[recovery_id]
                
                # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                success = self.broker.close_position(position['symbol'])
                
                if success:
                    position['status'] = 'closed'
                    position['closed_at'] = datetime.now()
                    position['close_reason'] = reason
                    self._update_recovery_data()
                    self.logger.info(f"‚úÖ Recovery position closed: {position['symbol']} (reason: {reason})")
                else:
                    self.logger.error(f"‚ùå Failed to close recovery position: {position['symbol']}")
                    
        except Exception as e:
            self.logger.error(f"Error closing recovery position: {e}")
    
    def get_correlation_performance(self) -> Dict:
        """Get correlation performance metrics"""
        return self.recovery_metrics
    
    def get_active_recovery_engine_status(self) -> Dict:
        """Get active recovery engine status"""
        return {
            'recovery_mode': self.recovery_mode,
            'hedge_ratio_optimization': self.hedge_ratio_optimization,
            'portfolio_rebalancing': self.portfolio_rebalancing,
            'multi_timeframe_analysis': self.multi_timeframe_analysis,
            'never_cut_loss': self.never_cut_loss,
            'active_recovery_chains': len(self.recovery_chains),
            'active_recovery_positions': len([p for p in self.recovery_positions.values() if p['status'] == 'active'])
        }
    
    def _save_recovery_data(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery positions ‡πÅ‡∏•‡∏∞ chains ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            os.makedirs(os.path.dirname(self.persistence_file), exist_ok=True)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            save_data = {
                'recovery_positions': self.recovery_positions,
                'recovery_chains': self.recovery_chains,
                'recovery_metrics': self.recovery_metrics,
                'hedged_pairs': list(self.hedged_pairs),
                'hedged_positions': self.hedged_positions,
                'hedged_groups': self.hedged_groups,
                'saved_at': datetime.now().isoformat()
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            with open(self.persistence_file, 'w') as f:
                json.dump(save_data, f, indent=2, default=str)
            
            self.logger.debug(f"üíæ Saved {len(self.recovery_positions)} recovery positions to {self.persistence_file}")
            
        except Exception as e:
            self.logger.error(f"Error saving recovery data: {e}")
    
    def _load_recovery_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery positions ‡πÅ‡∏•‡∏∞ chains ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            from datetime import datetime
            
            if not os.path.exists(self.persistence_file):
                self.logger.debug("No recovery persistence file found, starting fresh")
                return
            
            with open(self.persistence_file, 'r') as f:
                save_data = json.load(f)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            self.recovery_positions = save_data.get('recovery_positions', {})
            self.recovery_chains = save_data.get('recovery_chains', {})
            self.recovery_metrics = save_data.get('recovery_metrics', {
                'total_recoveries': 0,
                'successful_recoveries': 0,
                'failed_recoveries': 0,
                'avg_recovery_time_hours': 0,
                'total_recovered_amount': 0.0
            })
            self.hedged_pairs = set(save_data.get('hedged_pairs', []))
            self.hedged_positions = save_data.get('hedged_positions', {})
            self.hedged_groups = save_data.get('hedged_groups', {})
            
            saved_at = save_data.get('saved_at', 'Unknown')
            
            if self.recovery_positions or self.recovery_chains or self.hedged_pairs:
                self.logger.info(f"üìÇ Loaded recovery data from {self.persistence_file}")
                self.logger.info(f"   Recovery positions: {len(self.recovery_positions)}")
                self.logger.info(f"   Recovery chains: {len(self.recovery_chains)}")
                self.logger.info(f"   Hedged pairs: {len(self.hedged_pairs)}")
                self.logger.info(f"   Hedged positions: {len(self.hedged_positions)}")
                self.logger.info(f"   Saved at: {saved_at}")
            else:
                self.logger.debug("No recovery data found in persistence file")
                
        except Exception as e:
            self.logger.error(f"Error loading recovery data: {e}")
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            self.recovery_positions = {}
            self.recovery_chains = {}
            self.recovery_metrics = {
                'total_recoveries': 0,
                'successful_recoveries': 0,
                'failed_recoveries': 0,
                'avg_recovery_time_hours': 0,
                'total_recovered_amount': 0.0
            }
            self.hedged_pairs = set()
            self.hedged_positions = {}
            self.hedged_groups = {}
    
    def _update_recovery_data(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            self._save_recovery_data()
        except Exception as e:
            self.logger.error(f"Error updating recovery data: {e}")
    
    def _remove_recovery_data(self, recovery_id: str):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if recovery_id in self.recovery_positions:
                del self.recovery_positions[recovery_id]
            self._save_recovery_data()
        except Exception as e:
            self.logger.error(f"Error removing recovery data: {e}")
    
    def clear_hedged_data_for_group(self, group_id: str):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group)"""
        try:
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (global)
            positions_to_remove = []
            for order_id, hedged_info in self.hedged_positions.items():
                if hedged_info.get('group_id') == group_id:
                    positions_to_remove.append(order_id)
            
            for order_id in positions_to_remove:
                symbol = self.hedged_positions[order_id].get('symbol')
                if symbol:
                    # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å global hedged_pairs (backward compatibility)
                    if hasattr(self, 'hedged_pairs'):
                        self.hedged_pairs.discard(symbol)
                del self.hedged_positions[order_id]
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° (global)
            if group_id in self.hedged_groups:
                del self.hedged_groups[group_id]
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Group
            if group_id in self.hedged_pairs_by_group:
                del self.hedged_pairs_by_group[group_id]
            
            if group_id in self.hedged_positions_by_group:
                del self.hedged_positions_by_group[group_id]
            
            if group_id in self.recovery_positions_by_group:
                del self.recovery_positions_by_group[group_id]
            
            if positions_to_remove:
                self.logger.info(f"üóëÔ∏è Cleared {len(positions_to_remove)} hedged positions for group {group_id}")
                self._update_recovery_data()
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery positions ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.log_recovery_positions_summary()
            
        except Exception as e:
            self.logger.error(f"Error clearing hedged data for group {group_id}: {e}")
    
    def cleanup_closed_recovery_positions(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î recovery positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥"""
        try:
            positions_to_remove = []
            seen_positions = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            
            for recovery_id, position in self.recovery_positions.items():
                symbol = position.get('symbol')
                order_id = position.get('order_id')
                
                # ‡∏•‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                if position.get('status') == 'closed':
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô positions ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    closed_at = position.get('closed_at')
                    if closed_at:
                        if isinstance(closed_at, str):
                            closed_at = datetime.fromisoformat(closed_at)
                        
                        # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                        if (datetime.now() - closed_at).total_seconds() > 3600:
                            positions_to_remove.append(recovery_id)
                
                # ‡∏•‡∏ö‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥ (‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ order_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
                if symbol and order_id and order_id != 'N/A':
                    key = f"{symbol}_{order_id}"
                    if key in seen_positions:
                        # ‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥ - ‡∏•‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤
                        old_recovery_id = seen_positions[key]
                        if old_recovery_id not in positions_to_remove:
                            positions_to_remove.append(old_recovery_id)
                        self.logger.info(f"üóëÔ∏è Removing duplicate position: {symbol} (Order: {order_id})")
                    else:
                        seen_positions[key] = recovery_id
            
            # ‡∏•‡∏ö positions ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ã‡πâ‡∏≥
            for recovery_id in positions_to_remove:
                if recovery_id in self.recovery_positions:
                    del self.recovery_positions[recovery_id]
            
            if positions_to_remove:
                self.logger.info(f"üóëÔ∏è Cleaned up {len(positions_to_remove)} old/duplicate recovery positions")
                self._update_recovery_data()
            
        except Exception as e:
            self.logger.error(f"Error cleaning up closed recovery positions: {e}")
    
    def get_hedging_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            return {
                'hedged_pairs': list(self.hedged_pairs),
                'hedged_positions_count': len(self.hedged_positions),
                'hedged_groups_count': len(self.hedged_groups),
                'hedged_positions': self.hedged_positions,
                'hedged_groups': self.hedged_groups
            }
        except Exception as e:
            self.logger.error(f"Error getting hedging status: {e}")
            return {}
    
    def log_recovery_positions_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery positions"""
        try:
            if not self.recovery_positions:
                self.logger.info("üìä No recovery positions found")
                return
            
            active_count = 0
            closed_count = 0
            
            for position in self.recovery_positions.values():
                if position.get('status') == 'active':
                    active_count += 1
                elif position.get('status') == 'closed':
                    closed_count += 1
            
            self.logger.info("=" * 60)
            self.logger.info("üìä RECOVERY POSITIONS SUMMARY")
            self.logger.info("=" * 60)
            self.logger.info(f"Total Recovery Positions: {len(self.recovery_positions)}")
            self.logger.info(f"Active Positions: {active_count}")
            self.logger.info(f"Closed Positions: {closed_count}")
            self.logger.info(f"Hedged Pairs: {len(self.hedged_pairs)}")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"Error logging recovery positions summary: {e}")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Correlation Manager"""
        try:
            self.is_running = False
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
            self._save_recovery_data()
            self.logger.info("üõë Correlation Manager stopped")
        except Exception as e:
            self.logger.error(f"Error stopping Correlation Manager: {e}")
