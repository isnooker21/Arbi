"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Triangular Arbitrage ‡πÅ‡∏ö‡∏ö Adaptive
==============================================

‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Arbitrage ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô 28 ‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
- ‡∏õ‡∏£‡∏±‡∏ö threshold ‡πÅ‡∏ö‡∏ö Dynamic ‡∏ï‡∏≤‡∏° market volatility
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á triangle generation ‡πÉ‡∏ä‡πâ 28 pairs ‡∏à‡∏£‡∏¥‡∏á
- ‡πÄ‡∏û‡∏¥‡πà‡∏° execution speed optimization
- ‡πÄ‡∏û‡∏¥‡πà‡∏° market regime detection
- ‡∏£‡∏∞‡∏ö‡∏ö Never-Cut-Loss ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Correlation Recovery

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ EUR/USD, GBP/USD, EUR/GBP
2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Adaptive Threshold ‡∏ï‡∏≤‡∏° volatility
3. ‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
4. ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
5. ‡πÉ‡∏ä‡πâ Correlation Recovery ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ cut loss
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Tuple, Optional
import asyncio
import threading
# import talib  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
import time
import os
import sys
try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    print("‚ö†Ô∏è MetaTrader5 not available - using fallback mode")

# Ensure project root is on sys.path when running this module directly
try:
    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    if PROJECT_ROOT not in sys.path:
        sys.path.append(PROJECT_ROOT)
except Exception:
    pass
from utils.calculations import TradingCalculations
from utils.symbol_mapper import SymbolMapper
# Removed AccountTierManager - using GUI Risk per Trade only

class TriangleArbitrageDetector:
    def __init__(self, broker_api, ai_engine=None, correlation_manager=None):
        self.broker = broker_api
        # self.ai = ai_engine  # DISABLED for simple trading system
        self.correlation_manager = correlation_manager  # ‡πÄ‡∏û‡∏¥‡πà‡∏° correlation manager
        self.active_triangles = {}
        self.is_running = False
        self.logger = logging.getLogger(__name__)
        
        # Adaptive parameters - More strict and accurate
        # self.current_regime = 'normal'  # DISABLED - not used in simple trading
        # self.market_regime = 'normal'  # DISABLED - not used in simple trading
        self.arbitrage_threshold = 0.0001  # Lower threshold (0.01 pips) for easier detection
        self.volatility_threshold = 0.0001  # Same as arbitrage_threshold for simple trading
        self.execution_timeout = 150  # Target execution speed
        self.position_size = 0.1  # Default position size
        
        # Enhanced validation parameters - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        self.min_confidence_score = 0.5  # Minimum confidence score (50%) - ‡∏•‡∏î‡∏à‡∏≤‡∏Å 75%
        self.max_spread_ratio = 0.5  # Maximum spread ratio (50%) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 30%
        self.min_volume_threshold = 0.1  # Minimum volume threshold - ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.5
        self.price_stability_checks = 1  # Number of price stability checks - ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3
        self.confirmation_delay = 1  # Seconds to wait for confirmation - ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2
        
        # Group management for multiple arbitrage triangles (‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô)
        self.active_groups = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
        self.group_counters = {}  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        self.is_arbitrage_paused = {}  # ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arbitrage ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        self.used_currency_pairs = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        self.group_currency_mapping = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        self.arbitrage_sent = False  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå arbitrage ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self.arbitrage_send_time = None  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå arbitrage
        
        # Rate limiting for order placement
        self.last_order_time = 0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.min_order_interval = 10  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        self.daily_order_limit = 50  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
        self.daily_order_count = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        self.last_reset_date = datetime.now().date()  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
        self.regime_parameters = {
            'volatile': {'threshold': 0.012, 'timeout': 200},    # 1.2 pips (‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
            'trending': {'threshold': 0.010, 'timeout': 150},   # 1.0 pips (‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
            'ranging': {'threshold': 0.008, 'timeout': 100},    # 0.8 pips (‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
            'normal': {'threshold': 0.008, 'timeout': 150}      # 0.8 pips (‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
        }
        
        # Performance tracking
        self.total_opportunities_detected = 0
        self.performance_metrics = {
            'total_opportunities': 0,
            'successful_trades': 0,
            'avg_execution_time': 0,
            # ‚≠ê New metrics for improved system
            'opportunities_checked': 0,
            'passed_direction_check': 0,
            'passed_feasibility_check': 0,
            'passed_balance_check': 0,
            'forward_path_selected': 0,
            'reverse_path_selected': 0,
            'avg_expected_profit': 0.0,
            'total_expected_profit': 0.0,
            'orders_cancelled_due_to_failure': 0
            # 'market_regime_changes': 0  # DISABLED - not used in simple trading
        }
        
        # Initialize pairs and combinations after logger is set
        self.available_pairs = self._get_available_pairs()
        
        # üÜï Symbol Mapper - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Broker
        self.symbol_mapper = SymbolMapper()
        
        # üÜï Spread Cache - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡∏à‡∏£‡∏¥‡∏á
        self.spread_cache = {}
        self.spread_cache_file = "data/spread_cache.json"
        self._load_spread_cache()
        
        # ‡πÉ‡∏ä‡πâ 6 ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° Arbitrage ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (Optimized - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥ Hedged!)
        self.arbitrage_pairs = [
            'EURUSD', 'GBPUSD', 'EURGBP',  # Group 1
            'USDCHF', 'EURCHF',            # Group 2, 5
            'USDJPY', 'GBPJPY',            # Group 3
            'AUDUSD', 'USDCAD', 'AUDCAD',  # Group 4
            'NZDUSD', 'NZDCHF', 'AUDNZD'   # Group 5, 6 (‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á MT5)
        ]
        
        # 6 ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° arbitrage ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (Optimized Setup - No Same-Direction Duplicates!)
        self.triangle_combinations = [
            ('EURUSD', 'GBPUSD', 'EURGBP'),    # Group 1: EUR/USD(BUY), GBP/USD(SELL), EUR/GBP
            ('EURUSD', 'USDCHF', 'EURCHF'),    # Group 2: EUR/USD(SELL), USD/CHF(BUY), EUR/CHF ‚úÖ Hedged
            ('GBPUSD', 'USDJPY', 'GBPJPY'),    # Group 3: GBP/USD(BUY), USD/JPY(SELL), GBP/JPY ‚úÖ Hedged
            ('AUDUSD', 'USDCAD', 'AUDCAD'),    # Group 4: AUD/USD(BUY), USD/CAD(SELL), AUD/CAD
            ('NZDUSD', 'USDCHF', 'NZDCHF'),    # Group 5: NZD/USD(BUY), USD/CHF(SELL), NZD/CHF ‚úÖ Hedged
            ('AUDUSD', 'NZDUSD', 'AUDNZD')     # Group 6: AUD/USD(SELL), NZD/USD(SELL), AUD/NZD ‚úÖ Hedged
        ]
        
        # üÜï Scan and Map Symbols from Broker
        self._initialize_symbol_mapping()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        for i, triangle in enumerate(self.triangle_combinations, 1):
            triangle_name = f"triangle_{i}"
            self.group_counters[triangle_name] = 0
            self.is_arbitrage_paused[triangle_name] = False
            self.used_currency_pairs[triangle_name] = set()
        
        # Magic numbers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (Optimized - All Hedged!)
        self.triangle_magic_numbers = {
            'triangle_1': 234001,  # EURUSD(BUY), GBPUSD(SELL), EURGBP
            'triangle_2': 234002,  # EURUSD(SELL), USDCHF(BUY), EURCHF ‚úÖ
            'triangle_3': 234003,  # GBPUSD(BUY), USDJPY(SELL), GBPJPY ‚úÖ
            'triangle_4': 234004,  # AUDUSD(BUY), USDCAD(SELL), AUDCAD
            'triangle_5': 234005,  # NZDUSD(BUY), USDCHF(SELL), NZDCHF ‚úÖ
            'triangle_6': 234006   # AUDUSD(SELL), NZDUSD(SELL), AUDNZD ‚úÖ
        }
        
        # ‚≠ê ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ standard_lot_size ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ risk-based calculation ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        
        # ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° Account Tier Manager
        # Removed AccountTierManager - using GUI Risk per Trade only
        
        # ‡πÇ‡∏´‡∏•‡∏î config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Account Tier
        self._load_tier_config()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á recovery ‡∏ã‡πâ‡∏≥
        self.recovery_in_progress = set()  # ‡πÄ‡∏Å‡πá‡∏ö group_id ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á recovery
        
        # ‡∏£‡∏∞‡∏ö‡∏ö Save/Load ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.persistence_file = "data/active_groups.json"
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
        self.profit_threshold_per_lot = 1.0  # 1 USD ‡∏ï‡πà‡∏≠ lot ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        
        # üÜï Trailing Stop System (Group-Level)
        self.group_trailing_stops = {}  # {group_id: {'peak': float, 'stop': float, 'active': bool}}
        
        # ‚≠ê ‡πÇ‡∏´‡∏•‡∏î Trailing Stop Config ‡∏à‡∏≤‡∏Å adaptive_params.json
        self._load_trailing_stop_config()
        
        # üÜï Min Profit Threshold (Scale with Balance) - ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å config
        
        # If no triangles generated, create fallback triangles
        if len(self.triangle_combinations) == 0 and len(self.available_pairs) > 0:
            self.logger.warning("No triangles generated, creating fallback triangles...")
            self.triangle_combinations = [('EURUSD', 'GBPUSD', 'EURGBP')]  # Fixed fallback
        elif len(self.triangle_combinations) == 0:
            self.logger.error("‚ùå No triangles generated and no available pairs!")
        
        # Load existing active groups on startup
        self._load_active_groups()
    
    def _get_available_pairs(self) -> List[str]:
        """Get list of available trading pairs from broker"""
        try:
            # Call broker method directly (it has its own fallback logic)
            all_pairs = self.broker.get_available_pairs()
            self.logger.info(f"Raw pairs from broker: {len(all_pairs) if all_pairs else 0}")
            if all_pairs and len(all_pairs) > 0:
                self.logger.info(f"First 5 raw pairs: {all_pairs[:5]}")
            
            if not all_pairs:
                self.logger.warning("No pairs available from broker")
                # Return hardcoded pairs as fallback
                fallback_pairs = [
                    'EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF', 'USDCAD', 'AUDUSD', 'NZDUSD',
                    'EURGBP', 'EURJPY', 'EURCHF', 'EURCAD', 'EURAUD', 'EURNZD',
                    'GBPEUR', 'GBPJPY', 'GBPCHF', 'GBPCAD', 'GBPAUD', 'GBPNZD',
                    'JPYEUR', 'JPYUSD', 'JPYGBP', 'JPYCHF', 'JPYCAD', 'JPYAUD', 'JPYNZD',
                    'CHFEUR', 'CHFUSD', 'CHFGBP', 'CHFJPY', 'CHFCAD', 'CHFAUD', 'CHFNZD',
                    'CADEUR', 'CADUSD', 'CADGBP', 'CADJPY', 'CADCHF', 'CADAUD', 'CADNZD',
                    'AUDEUR', 'AUDUSD', 'AUDGBP', 'AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD',
                    'NZDEUR', 'NZDUSD', 'NZDGBP', 'NZDJPY', 'NZDCHF', 'NZDCAD', 'NZDAUD'
                ]
                self.logger.warning(f"Using fallback pairs: {len(fallback_pairs)} pairs")
                return fallback_pairs
            
            # Return all pairs (no filtering) - SymbolMapper will handle matching
            return all_pairs
            
        except Exception as e:
            self.logger.error(f"Error getting available pairs: {e}")
            return []
    
    def _initialize_symbol_mapping(self):
        """‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà symbol ‡∏à‡∏≤‡∏Å broker"""
        try:
            self.logger.info("=" * 60)
            self.logger.info("üîç Initializing Symbol Mapping System...")
            self.logger.info("=" * 60)
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            required_pairs = list(set(self.arbitrage_pairs))
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÉ‡∏ô recovery (28 pairs)
            recovery_pairs = [
                # Major Pairs
                'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'NZDUSD',
                # EUR Crosses
                'EURGBP', 'EURJPY', 'EURCHF', 'EURAUD', 'EURCAD', 'EURNZD',
                # GBP Crosses
                'GBPJPY', 'GBPCHF', 'GBPAUD', 'GBPCAD', 'GBPNZD',
                # JPY Crosses
                'AUDJPY', 'CADJPY', 'CHFJPY', 'NZDJPY',
                # AUD Crosses
                'AUDCAD', 'AUDCHF', 'AUDNZD',
                # NZD Crosses
                'NZDCAD', 'NZDCHF',
                # CAD Crosses
                'CADCHF'
            ]
            
            required_pairs.extend(recovery_pairs)
            required_pairs = list(set(required_pairs))  # ‡∏•‡∏ö‡∏ã‡πâ‡∏≥
            
            self.logger.info(f"üìä Required pairs: {len(required_pairs)}")
            
            # Scan and map
            mapping_result = self.symbol_mapper.scan_and_map(self.available_pairs, required_pairs)
            
            # Validate required pairs for arbitrage
            arbitrage_validation = self.symbol_mapper.validate_required_pairs(self.arbitrage_pairs)
            missing_arb_pairs = [p for p, valid in arbitrage_validation.items() if not valid]
            
            if missing_arb_pairs:
                self.logger.error("=" * 60)
                self.logger.error("‚ùå Missing required arbitrage pairs:")
                for pair in missing_arb_pairs:
                    self.logger.error(f"   {pair}")
                self.logger.error("=" * 60)
                self.logger.error("‚ö†Ô∏è System may not work properly without these pairs!")
            else:
                self.logger.info("=" * 60)
                self.logger.info("‚úÖ All required arbitrage pairs are available!")
                self.logger.info("=" * 60)
            
            # Show summary
            self.logger.info("\n" + self.symbol_mapper.get_mapping_summary())
            
        except Exception as e:
            self.logger.error(f"‚ùå Error initializing symbol mapping: {e}")
        
    
    def start_detection(self):
        """Start the simple trading system"""
        self.is_running = True
        self.logger.info("Starting simple trading system...")
        
        # Run simple trading in separate thread
        self.detection_thread = threading.Thread(target=self._simple_trading_loop, daemon=True)
        self.detection_thread.start()
        self.logger.info("‚úÖ Simple trading thread started")
    
    def stop_detection(self):
        """Stop the arbitrage detection loop"""
        self.is_running = False
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        self._save_active_groups()
        self.logger.info("Stopping arbitrage detection...")
    
    def _simple_trading_loop(self):
        """Simple trading loop - ‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        self.logger.info("üöÄ Simple trading system started")
        loop_count = 0
        
        while self.is_running:
            try:
                loop_count += 1
                # self.logger.info(f"üîÑ Trading loop #{loop_count} - Checking system status...")  # DISABLED - ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                
                # Sync arbitrage orders with MT5
                if hasattr(self, 'correlation_manager') and self.correlation_manager:
                    sync_results = self.correlation_manager.order_tracker.sync_with_mt5()
                    if sync_results.get('arbitrage_orders_removed', 0) > 0:
                        self.logger.debug(f"üîÑ Arbitrage sync: {sync_results['arbitrage_orders_removed']} orders removed")
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≤‡∏Å memory
                all_positions = self.broker.get_all_positions()
                active_magic_numbers = set()
                
                # ‡∏´‡∏≤ magic numbers ‡∏ó‡∏µ‡πà‡∏°‡∏µ positions ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô MT5
                for pos in all_positions:
                    magic = pos.get('magic', 0)
                    if 234001 <= magic <= 234006:  # magic numbers ‡∏Ç‡∏≠‡∏á arbitrage groups
                        active_magic_numbers.add(magic)
                
                # ‡∏•‡∏ö groups ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‡πÉ‡∏ô MT5 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å memory
                groups_to_remove = []
                for group_id, group_data in list(self.active_groups.items()):
                    triangle_type = group_data.get('triangle_type', 'unknown')
                    triangle_magic = self.triangle_magic_numbers.get(triangle_type, 234000)
                    
                    if triangle_magic not in active_magic_numbers:
                        groups_to_remove.append(group_id)
                
                # ‡∏•‡∏ö groups ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                for group_id in groups_to_remove:
                    self.logger.info(f"üóëÔ∏è Group {group_id} closed in MT5 - removing from memory")
                    
                    # Reset hedge tracker ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if hasattr(self, 'correlation_manager') and self.correlation_manager:
                        # Reset ‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô group ‡∏ô‡∏µ‡πâ
                        group_pairs = self.group_currency_mapping.get(group_id, [])
                        for symbol in group_pairs:
                            # Individual order tracker handles cleanup automatically via sync
                            self.logger.info(f"üîÑ Reset hedge tracker for {group_id}:{symbol}")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ group_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
                    if group_id in self.active_groups:
                        del self.active_groups[group_id]
                        self._save_active_groups()
                        self._reset_group_data_after_close(group_id)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Group {group_id} not found in active_groups - already removed")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö triangles ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà
                closed_triangles = []
                active_triangles = []
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ triangle
                for i, triangle in enumerate(self.triangle_combinations, 1):
                    triangle_name = f"triangle_{i}"
                    triangle_magic = self.triangle_magic_numbers.get(triangle_name, 234000)
                    
                    if triangle_magic in active_magic_numbers:
                        active_triangles.append(triangle_name)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î Group ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ Trailing Stop Logic)
                        group_id = f"group_{triangle_name}_1"
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ group_data ‡πÉ‡∏ô active_groups ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ _should_close_group (‡∏°‡∏µ Trailing Stop!)
                        if group_id in self.active_groups:
                            group_data = self.active_groups[group_id]
                            if self._should_close_group(group_id, group_data):
                                self.logger.info(f"‚úÖ Group {triangle_name} meets closing criteria (Trailing Stop) - closing group")
                                self._close_group_by_magic(triangle_magic, group_id)
                                closed_triangles.append(triangle_name)
                        else:
                            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô active_groups ‡πÅ‡∏ï‡πà‡∏°‡∏µ positions ‡πÉ‡∏ô MT5 ‚Üí orphan positions
                            self.logger.warning(f"‚ö†Ô∏è Found orphan positions for {triangle_name} (not in active_groups)")
                            
                            # üÜï ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÉ‡∏´‡πâ reconstruct ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Trailing Stop ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                            all_positions = self.broker.get_all_positions()
                            orphan_pnl = sum(pos.get('profit', 0) for pos in all_positions if pos.get('magic', 0) == triangle_magic)
                            self.logger.info(f"üîÑ Orphan current PnL: ${orphan_pnl:.2f} ‚Üí Reconstructing group and delegating to Trailing Stop...")
                            self._reconstruct_orphan_group(triangle_name, triangle_magic, group_id)
                        continue
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô _check_and_close_groups
                    else:
                        # Triangle ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        closed_triangles.append(triangle_name)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                if closed_triangles:
                    self.logger.debug(f"üìä Closed triangles: {closed_triangles}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î groups ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡πÉ‡∏ô loop ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
                
                # ‡∏™‡πà‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangles ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                if closed_triangles:
                    self.logger.debug(f"üéØ Sending new orders for closed triangles: {closed_triangles}")
                    self._send_orders_for_closed_triangles(closed_triangles)
                else:
                    self.logger.debug("‚è≠Ô∏è No closed triangles to process")
                
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ triangles ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢
                if not active_triangles:
                    self.logger.info("üîÑ No active triangles - resetting data")
                    self._reset_group_data()
                
                time.sleep(1.0)  # ‚≠ê UPGRADED: ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏ä‡πá‡∏Ñ trailing stop ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
                continue
                    
            except Exception as e:
                self.logger.error(f"Trading error: {e}")
                import traceback
                self.logger.error(traceback.format_exc())
                time.sleep(1)
        
        self.logger.info("üõë Simple trading system stopped")
    
    def _send_orders_for_closed_triangles(self, closed_triangles: List[str]):
        """‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ rate limiting"""
        
        # Rate limiting: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        current_time = time.time()
        if current_time - self.last_order_time < self.min_order_interval:
            self.logger.debug(f"‚è≥ Rate limiting: waiting {self.min_order_interval - (current_time - self.last_order_time):.1f}s")
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö daily order limit
        today = datetime.now().date()
        if today != self.last_reset_date:
            self.daily_order_count = 0
            self.last_reset_date = today
            self.logger.info(f"üìÖ Daily order count reset for {today}")
        
        if self.daily_order_count >= self.daily_order_limit:
            self.logger.warning(f"‚ö†Ô∏è Daily order limit reached: {self.daily_order_count}/{self.daily_order_limit}")
            return
        
        for triangle_name in closed_triangles:
            if self.is_arbitrage_paused.get(triangle_name, False):
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangle ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            triangle_magic = self.triangle_magic_numbers.get(triangle_name, 234000)
            existing_positions = self.broker.get_all_positions()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà magic number ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            has_existing_orders = any(pos.get('magic', 0) == triangle_magic for pos in existing_positions)
            
            if has_existing_orders:
                self.logger.debug(f"‚è≠Ô∏è {triangle_name}: Still has existing orders (magic: {triangle_magic}) - skipping")
                continue
            
            triangle_index = int(triangle_name.split('_')[-1]) - 1
            if triangle_index < len(self.triangle_combinations):
                triangle = self.triangle_combinations[triangle_index]
                self.logger.debug(f"üöÄ Executing new orders for {triangle_name} (no existing orders found)")
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                self.last_order_time = current_time
                
                success = self._execute_new_triangle_orders(triangle, triangle_name)
                
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                if success:
                    self.daily_order_count += 1
                    self.logger.info(f"üìä Order count: {self.daily_order_count}/{self.daily_order_limit}")
                else:
                    self.logger.debug(f"‚ö†Ô∏è Order execution failed for {triangle_name} - not counting")
    
    def _execute_new_triangle_orders(self, triangle, triangle_name):
        """‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            # Track: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà
            self.performance_metrics['opportunities_checked'] += 1
            
            self.logger.info(f"üîç {triangle_name}: Checking arbitrage conditions for {triangle}")
            
            # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            direction_info = self.calculate_arbitrage_direction(triangle)
            
            if not direction_info:
                self.logger.info(f"‚ùå {triangle_name}: No profitable arbitrage opportunity - skipping")
                return
            
            # Track: ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            self.performance_metrics['passed_direction_check'] += 1
            if direction_info['direction'] == 'forward':
                self.performance_metrics['forward_path_selected'] += 1
            else:
                self.performance_metrics['reverse_path_selected'] += 1
            
            self.logger.info(f"‚úÖ {triangle_name}: Direction check passed - {direction_info['direction'].upper()} path, profit: {direction_info.get('profit_percent', 0):.4f}%")
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            if not self._validate_execution_feasibility(triangle, direction_info):
                self.logger.info(f"‚ùå {triangle_name}: Failed feasibility check (profit: {direction_info.get('profit_percent', 0):.4f}% too low)")
                return
            
            # Track: ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            self.performance_metrics['passed_feasibility_check'] += 1
            self.logger.info(f"‚úÖ {triangle_name}: Feasibility check passed")
            
            # 3. ‡∏î‡∏∂‡∏á balance ‡∏à‡∏≤‡∏Å MT5
            balance = self.broker.get_account_balance()
            if not balance:
                self.logger.error("‚ùå Cannot get balance from MT5")
                return
            
            self.logger.info(f"üí∞ {triangle_name}: Account balance: ${balance:,.2f}")
            
            # 4. ‡πÇ‡∏´‡∏•‡∏î risk_per_trade_percent ‡∏à‡∏≤‡∏Å config
            import json
            config_path = 'config/adaptive_params.json'
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            risk_per_trade_percent = config.get('position_sizing', {}).get('lot_calculation', {}).get('risk_per_trade_percent')
            if not risk_per_trade_percent:
                self.logger.error("‚ùå risk_per_trade_percent not found in config")
                risk_per_trade_percent = 1.0  # fallback
            
            self.logger.info(f"‚öôÔ∏è {triangle_name}: Risk per trade: {risk_per_trade_percent}%")
            
            risk_per_trade_percent = float(risk_per_trade_percent)
            max_loss_pips = config.get('position_sizing', {}).get('lot_calculation', {}).get('max_loss_pips', 50.0)
            
            # 5. ‡∏™‡∏π‡∏ï‡∏£: Risk Amount = Balance √ó (Risk% √∑ 100)
            risk_amount = balance * (risk_per_trade_percent / 100.0)
            
            self.logger.info(f"üí∞ {triangle_name}: Balance=${balance:,.2f}, Risk={risk_per_trade_percent}%, Risk Amount=${risk_amount:.2f}")
            self.logger.info(f"üìà {triangle_name}: {direction_info['direction'].upper()} path - Expected profit: {direction_info['profit_percent']:.4f}%")
            
            # 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà
            triangle_symbols = list(triangle)
            lot_sizes = {}
            
            for symbol in triangle_symbols:
                pip_value = TradingCalculations.calculate_pip_value(symbol, 1.0, self.broker)
                if pip_value <= 0:
                    self.logger.error(f"‚ùå Invalid pip value for {symbol}")
                    return
                
                # ‡∏™‡∏π‡∏ï‡∏£: Lot = Risk Amount √∑ (Pip Value √ó Max Loss Pips)
                lot_size = risk_amount / (pip_value * max_loss_pips)
                lot_size = max(0.01, round(lot_size, 2))
                
                lot_sizes[symbol] = lot_size
                self.logger.debug(f"   {symbol}: pip_value=${pip_value:.2f}, lot={lot_size:.2f}")
            
            # 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á Triangle
            balance_ok = self._verify_triangle_balance(triangle, lot_sizes)
            if balance_ok:
                self.performance_metrics['passed_balance_check'] += 1
                self.logger.info(f"‚úÖ {triangle_name}: Triangle balance check passed")
            else:
                self.logger.warning(f"‚ö†Ô∏è {triangle_name}: Triangle not balanced, adjusting...")
                # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ deviation ‡∏≠‡∏≤‡∏à‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
            
            # Track: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
            expected_profit = direction_info.get('profit_percent', 0)
            self.performance_metrics['total_expected_profit'] += expected_profit
            if self.performance_metrics['passed_feasibility_check'] > 0:
                self.performance_metrics['avg_expected_profit'] = (
                    self.performance_metrics['total_expected_profit'] / 
                    self.performance_metrics['passed_feasibility_check']
                )
            
            # 8. ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
            self.logger.info(f"üöÄ {triangle_name}: All checks passed! Sending orders...")
            success = self._send_new_triangle_orders(triangle, triangle_name, lot_sizes, direction_info)
            
            if success:
                self.performance_metrics['successful_trades'] += 1
                self.logger.info(f"üéâ {triangle_name}: All orders placed successfully!")
            else:
                self.logger.error(f"‚ùå {triangle_name}: Failed to place orders")
            
        except Exception as e:
            self.logger.error(f"Error in _execute_new_triangle_orders: {e}")
    
    def _send_new_triangle_orders(self, triangle, triangle_name, lot_sizes, direction_info):
        """‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å direction_info"""
        try:
            triangle_symbols = list(triangle)
            triangle_magic = self.triangle_magic_numbers.get(triangle_name, 234000)
            
            # ‡∏î‡∏∂‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ
            orders_direction = direction_info.get('orders', {})
            path_direction = direction_info.get('direction', 'unknown')
            expected_profit = direction_info.get('profit_percent', 0)
            
            self.logger.info(f"üöÄ Sending {path_direction.upper()} arbitrage for {triangle_name}: {triangle_symbols}")
            self.logger.info(f"   Expected Net Profit: {expected_profit:.4f}%")
            
            placed_orders = []
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            for symbol in triangle_symbols:
                # ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å direction_info (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà hard-coded)
                direction = orders_direction.get(symbol, 'BUY')
                lot_size = lot_sizes.get(symbol, 0.01)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                triangle_number = triangle_name.split('_')[-1]  # ‡πÑ‡∏î‡πâ 1, 2, 3, 4, 5, 6
                comment = f"G{triangle_number}_{symbol}_{direction[:1]}"  # ‡πÄ‡∏ä‡πà‡∏ô G1_EURUSD_B
                
                # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ real symbol ‡∏à‡∏≤‡∏Å SymbolMapper)
                real_symbol = self.symbol_mapper.get_real_symbol(symbol)
                result = self.broker.place_order(
                    symbol=real_symbol,
                    order_type=direction,
                    volume=lot_size,
                    comment=comment,
                    magic=triangle_magic
                )
                
                if result and result.get('success', False):
                    placed_orders.append({
                        'symbol': symbol,
                        'direction': direction,
                        'lot_size': lot_size,
                        'ticket': result.get('ticket')
                    })
                    self.logger.info(f"‚úÖ {symbol} {direction} {lot_size} lots - SUCCESS (Ticket: {result.get('ticket')})")
                else:
                    # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ partial fill
                    error_msg = result.get('error', 'Unknown error') if result else 'No result'
                    self.logger.error(f"‚ùå {symbol} {direction} {lot_size} lots - FAILED: {error_msg}")
                    self.logger.warning(f"üîÑ Cancelling all orders for {triangle_name} due to failure")
                    
                    # Track: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                    self.performance_metrics['orders_cancelled_due_to_failure'] += len(placed_orders)
                    
                    # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    for order in placed_orders:
                        try:
                            self.broker.close_position(order['ticket'])
                            self.logger.info(f"üîÑ Cancelled {order['symbol']} (Ticket: {order['ticket']})")
                        except Exception as cancel_error:
                            self.logger.error(f"Error cancelling order {order['ticket']}: {cancel_error}")
                    
                    return False
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• arbitrage ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            self.logger.info(f"‚úÖ {triangle_name}: All {len(placed_orders)} orders placed successfully!")
            return True
                    
        except Exception as e:
            self.logger.error(f"Error in _send_new_triangle_orders: {e}")
            return False
    
    def _send_simple_orders(self):
        """‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            all_positions = self.broker.get_all_positions()
            arbitrage_positions = [pos for pos in all_positions if 234001 <= pos.get('magic', 0) <= 234006]
            
            if not arbitrage_positions:
                for i, triangle in enumerate(self.triangle_combinations):
                    triangle_name = f"triangle_{i+1}"
                    if not self.is_arbitrage_paused.get(triangle_name, False):
                        self._execute_new_triangle_orders(triangle, triangle_name)
                        
        except Exception as e:
            self.logger.error(f"Error in _send_simple_orders: {e}")
    
    def _sync_active_groups_from_mt5(self, arbitrage_positions):
        """‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• active groups ‡∏à‡∏≤‡∏Å MT5"""
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å MT5
            mt5_groups = {}
            
            for pos in arbitrage_positions:
                magic = pos.get('magic', 0)
                comment = pos.get('comment', '')
                symbol = pos.get('symbol', '')
                
                # ‡∏´‡∏≤‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏≤‡∏Å magic number
                triangle_type = None
                for triangle_name, magic_num in self.triangle_magic_numbers.items():
                    if magic == magic_num:
                        triangle_type = triangle_name
                        break
                
                if triangle_type:
                    # ‡πÅ‡∏¢‡∏Å triangle number ‡∏à‡∏≤‡∏Å magic number (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ comment ‡πÅ‡∏•‡πâ‡∏ß)
                    triangle_number = triangle_type.split('_')[-1]  # ‡πÑ‡∏î‡πâ 1, 2, 3, 4, 5, 6
                    group_id = f"group_{triangle_type}_{triangle_number}"
                    
                    if group_id not in mt5_groups:
                        mt5_groups[group_id] = {
                            'group_id': group_id,
                            'triangle_type': triangle_type,
                            'created_at': datetime.now(),
                            'positions': [],
                            'status': 'active',
                            'total_pnl': 0.0,
                            'recovery_chain': [],
                            'lot_sizes': {}
                        }
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                    mt5_groups[group_id]['positions'].append({
                        'symbol': symbol,
                        'order_id': pos.get('ticket'),
                        'lot_size': pos.get('volume'),
                        'entry_price': pos.get('price', 0.0),
                        'direction': pos.get('type', 'BUY'),
                        'comment': comment,
                        'magic': magic
                    })
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï active_groups
            self.active_groups = mt5_groups
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï used_currency_pairs
            for group_id, group_data in mt5_groups.items():
                triangle_type = group_data.get('triangle_type')
                if triangle_type and triangle_type not in self.used_currency_pairs:
                    self.used_currency_pairs[triangle_type] = set()
                
                for pos in group_data.get('positions', []):
                    symbol = pos.get('symbol')
                    if symbol and triangle_type:
                        self.used_currency_pairs[triangle_type].add(symbol)
            
            self.logger.info(f"üîÑ Synced {len(mt5_groups)} groups from MT5")
            
        except Exception as e:
            self.logger.error(f"Error syncing active groups from MT5: {e}")
    
    def _load_tier_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Account Tier ‡∏à‡∏≤‡∏Å config"""
        try:
            import json
            with open('config/adaptive_params.json', 'r', encoding='utf-8') as f:
                self.tier_config = json.load(f)
        except UnicodeDecodeError as e:
            self.logger.error(f"Unicode decode error in config file: {e}")
            # Try with different encodings
            for encoding in ['cp1252', 'latin-1', 'iso-8859-1']:
                try:
                    with open('config/adaptive_params.json', 'r', encoding=encoding) as f:
                        self.tier_config = json.load(f)
                    self.logger.info(f"Successfully loaded config with {encoding} encoding")
                    return
                except:
                    continue
            self.logger.error("Failed to load config with any encoding")
            self.tier_config = {}
        except Exception as e:
            self.logger.error(f"Error loading tier config: {e}")
            self.tier_config = {}
    
    def _get_config_value(self, path: str, default_value=None):
        """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å config ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ dot notation"""
        try:
            keys = path.split('.')
            value = self.tier_config
            for key in keys:
                if isinstance(value, dict) and key in value:
                    value = value[key]
                else:
                    return default_value
            return value
        except Exception as e:
            self.logger.error(f"Error getting config value {path}: {e}")
            return default_value
    
    def reload_config(self):
        """‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI Settings)"""
        try:
            self._load_tier_config()
            # Removed AccountTierManager - using GUI Risk per Trade only  # ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î tier manager
            
            # üîÑ Cache lot calculation config ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            import json
            with open('config/adaptive_params.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
            self.lot_calc_config = config.get('position_sizing', {}).get('lot_calculation', {})
            
            self.logger.info("‚úÖ Account Tier config reloaded successfully")
            self.logger.info(f"üîç Cached lot calc config: {self.lot_calc_config}")
        except Exception as e:
            self.logger.error(f"Error reloading tier config: {e}")
    
    # ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ _execute_new_triangle_orders ‡πÅ‡∏•‡∏∞ _send_new_triangle_orders ‡πÅ‡∏ó‡∏ô
    
    def check_group_status(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            self.logger.debug(f"üîç Checking group status - Active groups: {len(self.active_groups)}")
            
            if not self.active_groups:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                self.logger.debug("No active groups found - resetting group data")
                self._reset_group_data()
                return
            
            groups_to_close = []
            
            for group_id, group_data in list(self.active_groups.items()):
                # üÜï ‡∏•‡∏ö Timeout 24h - Never Cut Loss = Never Expire!
                # ‡πÉ‡∏´‡πâ _should_close_group() (Trailing Stop) ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏£‡∏ß‡∏° recovery positions)
                total_group_pnl = 0.0
                all_positions_profitable = True
                valid_positions = 0
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL ‡∏Ç‡∏≠‡∏á arbitrage positions
                for position in group_data['positions']:
                    # ‡∏´‡∏≤ order_id ‡∏à‡∏≤‡∏Å broker API
                    order_id = position.get('order_id')
                    if order_id:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏à‡∏≤‡∏Å broker API
                        all_positions = self.broker.get_all_positions()
                        position_pnl = 0.0
                        position_found = False
                        
                        for pos in all_positions:
                            if pos['ticket'] == order_id:
                                position_pnl = pos['profit']
                                position_found = True
                                valid_positions += 1
                                break
                        
                        if position_found:
                            total_group_pnl += position_pnl
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if position_pnl < 0:
                                all_positions_profitable = False
                            
                            self.logger.debug(f"   Arbitrage {position['symbol']}: PnL = {position_pnl:.2f} USD")
                        else:
                            self.logger.warning(f"   Position {position['symbol']} not found in broker - may be closed")
                    else:
                        self.logger.warning(f"   No order_id found for position {position['symbol']}")
                        all_positions_profitable = False
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL ‡∏Ç‡∏≠‡∏á recovery positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (using order_tracker)
                recovery_pnl = 0.0
                if self.correlation_manager:
                    all_orders = self.correlation_manager.order_tracker.get_all_orders()
                    all_positions = self.broker.get_all_positions()
                    
                    for order_key, order_data in all_orders.items():
                        # Only count recovery orders for this group
                        if (order_data.get('type') == 'RECOVERY' and 
                            order_data.get('group_id') == group_id):
                            recovery_ticket = order_data.get('ticket')
                            if recovery_ticket:
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PnL ‡∏Ç‡∏≠‡∏á recovery position ‡∏à‡∏≤‡∏Å MT5
                                for pos in all_positions:
                                    if str(pos.get('ticket')) == str(recovery_ticket):
                                        recovery_pnl += pos.get('profit', 0)
                                        symbol = order_data.get('symbol', 'N/A')
                                        self.logger.debug(f"   Recovery {symbol}: PnL = {pos['profit']:.2f} USD")
                                        break
                
                # ‡∏£‡∏ß‡∏° PnL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (arbitrage + recovery)
                total_group_pnl += recovery_pnl
                if recovery_pnl != 0:
                    self.logger.info(f"   üîÑ Recovery PnL: {recovery_pnl:.2f} USD")
                
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                if valid_positions == 0:
                    self.logger.info(f"üóëÔ∏è Group {group_id} has no valid positions - removing from active groups")
                    # ‡∏•‡∏ö Group ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å active_groups ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    if group_id in self.active_groups:
                        del self.active_groups[group_id]
                    # ‡∏•‡∏ö Group ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å group_currency_mapping
                    if group_id in self.group_currency_mapping:
                        del self.group_currency_mapping[group_id]
                    # ‡∏•‡∏ö Group ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å recovery_in_progress
                    if group_id in self.recovery_in_progress:
                        self.recovery_in_progress.remove(group_id)
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                    self._save_active_groups()
                    continue
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• PnL ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å)
                pnl_status = "üí∞" if total_group_pnl > 0 else "üí∏" if total_group_pnl < 0 else "‚öñÔ∏è"
                # self.logger.info(f"üìä Group {group_id} PnL: {pnl_status} {total_group_pnl:.2f} USD")  # DISABLED - too verbose
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å broker API (‡πÉ‡∏ä‡πâ Balance ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Equity)
                account_balance = self.broker.get_account_balance()
                if account_balance is None:
                    account_balance = 1000.0  # fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
                    self.logger.warning("‚ö†Ô∏è Cannot get account balance, using fallback: 1000 USD")
                
                profit_percentage = (total_group_pnl / account_balance) * 100
                # self.logger.info(f"   üí∞ Account Balance: {account_balance:.2f} USD")  # DISABLED - too verbose
                # self.logger.info(f"   üìä Profit Percentage: {profit_percentage:.3f}%")  # DISABLED - too verbose
                
                # üÜï ‡πÉ‡∏ä‡πâ _should_close_group() ‡πÅ‡∏ó‡∏ô logic ‡πÄ‡∏Å‡πà‡∏≤ (‡∏°‡∏µ Trailing Stop + Never Cut Loss!)
                if self._should_close_group(group_id, group_data):
                    self.logger.info(f"‚úÖ Group {group_id} meets closing criteria (Trailing Stop)")
                    groups_to_close.append(group_id)
                elif total_group_pnl < 0:
                    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    triangle_type = group_data.get('triangle_type', 'unknown')
                    triangle_magic = self.triangle_magic_numbers.get(triangle_type, 234000)
                    
                    if self._should_start_recovery_from_mt5(triangle_magic, triangle_type):
                        # ‡πÄ‡∏£‡∏¥‡πà‡∏° correlation recovery ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                        self._start_correlation_recovery(group_id, group_data, total_group_pnl)
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            if groups_to_close:
                self.logger.info(f"üéØ Found {len(groups_to_close)} groups to close: {groups_to_close}")
                for group_id in groups_to_close:
                    self.logger.info(f"üîÑ Closing group {group_id}")
                    self._close_group(group_id)
            else:
                self.logger.debug("No groups meet closing criteria")
                
        except Exception as e:
            self.logger.error(f"Error checking group status: {e}")
            
    def _should_start_recovery_from_mt5(self, magic_num: int, triangle_type: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÜ"""
        try:
            all_positions = self.broker.get_all_positions()
            group_positions = []
            total_pnl = 0.0
            
            for pos in all_positions:
                if pos.get('magic', 0) == magic_num:
                    group_positions.append(pos)
                    total_pnl += pos.get('profit', 0)
            
            if not group_positions:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if total_pnl >= 0:
                self.logger.info(f"üí∞ Group {triangle_type} has profit: ${total_pnl:.2f} - No recovery needed")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ Group ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
                self._log_group_status_for_recovery(magic_num, triangle_type, group_positions, total_pnl, 0.0)
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk per lot
            total_lot_size = sum(pos.get('volume', 0) for pos in group_positions)
            if total_lot_size <= 0:
                return False
                
            risk_per_lot = abs(total_pnl) / total_lot_size
            
            # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç risk ‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            # self.logger.info(f"üìä Group {triangle_type} risk: {risk_per_lot:.2%} (info only)")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            max_price_distance = 0
            
            for pos in group_positions:
                symbol = pos.get('symbol', '')
                entry_price = pos.get('price', 0)
                
                try:
                    current_price = self.broker.get_current_price(symbol)
                    if entry_price > 0 and current_price > 0:
                        if 'JPY' in symbol:
                            price_distance = abs(current_price - entry_price) * 100
                        else:
                            price_distance = abs(current_price - entry_price) * 10000
                        
                        max_price_distance = max(max_price_distance, price_distance)
                except Exception as e:
                    continue
            
            
            if max_price_distance < 10:  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏à‡∏∏‡∏î
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ distance ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 10 pips
                self._log_group_status_for_recovery(magic_num, triangle_type, group_positions, total_pnl, max_price_distance)
                return False
            
            # ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            return True
            
        except Exception as e:
            self.logger.error(f"Error checking if should start recovery from MT5: {e}")
            return False
    
    def _log_group_status_for_recovery(self, magic_num: int, triangle_type: str, group_positions: List[Dict], total_pnl: float, max_price_distance: float):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á group_id ‡∏à‡∏≤‡∏Å triangle_type
            group_id = f"group_{triangle_type}_1"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á losing_pairs list ‡∏à‡∏≤‡∏Å group_positions
            losing_pairs = []
            for pos in group_positions:
                if pos.get('profit', 0) < 0:
                    losing_pairs.append({
                        'symbol': pos.get('symbol', ''),
                        'order_id': pos.get('ticket', ''),
                        'lot_size': pos.get('volume'),
                        'entry_price': pos.get('price', 0),
                        'pnl': pos.get('profit', 0),
                        'comment': pos.get('comment', ''),
                        'magic': pos.get('magic', 0)
                    })
            
            # ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà _log_all_groups_status ‡πÅ‡∏ó‡∏ô
            # self.correlation_manager._log_group_hedging_status(group_id, losing_pairs)
            
        except Exception as e:
            self.logger.error(f"Error logging group status for recovery: {e}")
    
    def _close_group_by_magic(self, magic_num: int, group_id: str):
        """‡∏õ‡∏¥‡∏î Group ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number"""
        try:
            all_positions = self.broker.get_all_positions()
            positions_to_close = []
            
            for pos in all_positions:
                if pos.get('magic', 0) == magic_num:
                    positions_to_close.append(pos)
            
            if not positions_to_close:
                self.logger.warning(f"No positions found for magic {magic_num}")
                return
            
            # üÜï Safety Check: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Net PnL ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î (Never Cut Loss!)
            arbitrage_pnl = sum(pos.get('profit', 0) for pos in positions_to_close)
            recovery_pnl = 0.0
            if self.correlation_manager:
                recovery_pnl = self._get_recovery_pnl_for_group(group_id)
            
            net_pnl = arbitrage_pnl + recovery_pnl
            
            self.logger.info(f"üí∞ Closing Group {group_id}:")
            self.logger.info(f"   Arbitrage PnL: ${arbitrage_pnl:.2f}")
            self.logger.info(f"   Recovery PnL: ${recovery_pnl:.2f}")
            self.logger.info(f"   Net PnL: ${net_pnl:.2f}")
            
            if net_pnl < 0:
                self.logger.error(f"‚ùå‚ùå‚ùå BLOCKED! Net PnL is NEGATIVE: ${net_pnl:.2f}")
                self.logger.error(f"   NEVER CUT LOSS! Group {group_id} will NOT be closed!")
                self.logger.error(f"   Waiting for recovery to turn profitable...")
                return
            
            self.logger.info(f"‚úÖ Net PnL is POSITIVE (${net_pnl:.2f}) - Proceeding to close...")
            
            # ‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for pos in positions_to_close:
                try:
                    result = self.broker.close_position(pos.get('ticket'))
                    if result and result.get('success'):
                        self.logger.info(f"‚úÖ Closed: {pos.get('symbol')} {pos.get('type')} (Order: {pos.get('ticket')})")
                    else:
                        self.logger.warning(f"‚ùå Failed to close: {pos.get('symbol')} {pos.get('type')}")
                except Exception as e:
                    self.logger.error(f"Error closing position {pos.get('ticket')}: {e}")
            
            # Reset hedge tracker ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if hasattr(self, 'correlation_manager') and self.correlation_manager:
                # Reset ‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô group ‡∏ô‡∏µ‡πâ
                group_pairs = self.group_currency_mapping.get(group_id, [])
                for symbol in group_pairs:
                    # Individual order tracker handles cleanup automatically via sync
                    self.logger.info(f"üîÑ Reset hedge tracker for {group_id}:{symbol}")
            
            # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å memory ‡πÅ‡∏•‡∏∞ reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if group_id in self.active_groups:
                del self.active_groups[group_id]
            self._save_active_groups()
            self._reset_group_data_after_close(group_id)
            
            self.logger.info(f"‚úÖ Group {group_id} closed successfully")
            
        except Exception as e:
            self.logger.error(f"Error closing group by magic: {e}")
    
    def _reconstruct_orphan_group(self, triangle_name: str, triangle_magic: int, group_id: str):
        """Reconstruct orphan group data from MT5 positions"""
        try:
            self.logger.info(f"üîÑ Attempting to reconstruct orphan group: {group_id}")
            
            # ‡∏î‡∏∂‡∏á positions ‡∏à‡∏≤‡∏Å MT5
            all_positions = self.broker.get_all_positions()
            orphan_positions = [pos for pos in all_positions if pos.get('magic', 0) == triangle_magic]
            
            if not orphan_positions:
                self.logger.warning(f"‚ö†Ô∏è No positions found for reconstruction")
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á group_data ‡πÉ‡∏´‡∏°‡πà
            group_data = {
                'group_id': group_id,
                'triangle': self.triangle_combinations[int(triangle_name.split('_')[1]) - 1] if len(self.triangle_combinations) >= int(triangle_name.split('_')[1]) else ('EURUSD', 'GBPUSD', 'EURGBP'),
                'triangle_type': triangle_name,
                'created_at': datetime.now(),  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                'positions': [],
                'status': 'active',
                'total_pnl': 0.0,
                'recovery_chain': []
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° positions ‡∏•‡∏á group_data
            for pos in orphan_positions:
                group_data['positions'].append({
                    'symbol': pos.get('symbol', ''),
                    'direction': pos.get('type', 'BUY'),
                    'order_id': pos.get('ticket'),
                    'lot_size': pos.get('volume', 0.1),
                    'entry_price': pos.get('price', 0.0),
                    'entry_time': datetime.now()  # ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                })
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á active_groups
            self.active_groups[group_id] = group_data
            self._save_active_groups()
            
            self.logger.info(f"‚úÖ Reconstructed orphan group: {group_id} with {len(orphan_positions)} positions")
            self.logger.info(f"   Group will now be managed by Trailing Stop logic")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error reconstructing orphan group: {e}")
    
    def _should_close_group(self, group_id: str, group_data: Dict) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î Group ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number
            triangle_type = group_data.get('triangle_type', 'unknown')
            triangle_magic = self.triangle_magic_numbers.get(triangle_type, 234000)
            
            all_positions = self.broker.get_all_positions()
            group_positions = []
            total_pnl = 0.0
            
            for pos in all_positions:
                magic = pos.get('magic', 0)
                if magic == triangle_magic:
                    group_positions.append(pos)
                    total_pnl += pos.get('profit', 0)
            
            if not group_positions:
                self.logger.warning(f"‚ö†Ô∏è No positions found for group {group_id} (Magic: {triangle_magic})")
                self.logger.warning(f"   This could be a timing issue or positions already closed")
                return False  # ‚úÖ ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î! (Never Cut Loss - ‡∏´‡∏≤ positions ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î)
            
            # ‚úÖ NEW: ‡∏î‡∏∂‡∏á recovery PnL ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì net PnL
            recovery_pnl = 0.0
            if self.correlation_manager:
                recovery_pnl = self._get_recovery_pnl_for_group(group_id)
            
            net_pnl = total_pnl + recovery_pnl
            
            # üÜï STEP 1: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Min Profit Threshold (Scale with Balance)
            balance = self.broker.get_account_balance()
            if not balance or balance <= 0:
                balance = 10000.0  # Fallback
            
            # ‚≠ê ‡πÉ‡∏ä‡πâ min_profit_base ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ balance_multiplier
            min_profit_threshold = self.min_profit_base
            
            self.logger.debug(f"üí∞ {group_id}: Balance=${balance:.2f}, Min Profit=${min_profit_threshold:.2f} (Base $10 @ $10K)")
            
            # üÜï STEP 2: Trailing Stop Logic (‡πÄ‡∏ä‡πá‡∏Ñ trailing_stop_enabled ‡∏Å‡πà‡∏≠‡∏ô)
            if self.trailing_stop_enabled:
                if group_id not in self.group_trailing_stops:
                    self.group_trailing_stops[group_id] = {
                        'peak': 0.0,
                        'stop': 0.0,
                        'active': False
                    }
                
                trailing_data = self.group_trailing_stops[group_id]
                
                # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏ô min_profit ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏° trailing stop
                if net_pnl >= min_profit_threshold:
                    if not trailing_data['active']:
                        # ‡πÄ‡∏£‡∏¥‡πà‡∏° trailing stop
                        trailing_data['active'] = True
                        trailing_data['peak'] = net_pnl
                        # üîí Lock 50% of Peak: Stop = max(Peak √ó 0.5, Peak - Distance)
                        trailing_data['stop'] = max(net_pnl * self.lock_profit_percentage, net_pnl - self.trailing_stop_distance)
                        self.logger.info(f"üéØ {group_id} Trailing Stop ACTIVATED: Peak=${net_pnl:.2f}, Stop=${trailing_data['stop']:.2f} (Lock {self.lock_profit_percentage*100:.0f}%)")
                    else:
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï peak ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
                        if net_pnl > trailing_data['peak']:
                            trailing_data['peak'] = net_pnl
                            # üîí Lock 50% of Peak: Stop = max(Peak √ó 0.5, Peak - Distance)
                            trailing_data['stop'] = max(net_pnl * self.lock_profit_percentage, net_pnl - self.trailing_stop_distance)
                            self.logger.info(f"üìà {group_id} Peak Updated: ${net_pnl:.2f}, Stop=${trailing_data['stop']:.2f} (Lock {self.lock_profit_percentage*100:.0f}%)")
                        
                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ hit trailing stop ‡πÑ‡∏´‡∏° (‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡πâ‡∏ß‡∏¢!)
                        if net_pnl < trailing_data['stop'] and net_pnl > 0:
                            self.logger.info(f"üö® {group_id} TRAILING STOP HIT!")
                            self.logger.info(f"   Peak: ${trailing_data['peak']:.2f}")
                            self.logger.info(f"   Stop: ${trailing_data['stop']:.2f}")
                            self.logger.info(f"   Current Net: ${net_pnl:.2f}")
                            self.logger.info(f"   Locking profit: ${net_pnl:.2f} ‚úÖ")
                            return True
                        elif net_pnl < trailing_data['stop'] and net_pnl <= 0:
                            # ‡∏ñ‡πâ‡∏≤ hit stop ‡πÅ‡∏ï‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‚Üí ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å trailing, ‡∏£‡∏≠ recovery
                            self.logger.warning(f"‚ö†Ô∏è {group_id} Hit stop but negative (${net_pnl:.2f}) - Canceling trailing, waiting for recovery")
                            trailing_data['active'] = False
                            trailing_data['peak'] = 0.0
                            trailing_data['stop'] = 0.0
            else:
                # Trailing Stop ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‚Äî ‡πÉ‡∏ä‡πâ Min Profit ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                if net_pnl >= min_profit_threshold:
                    self.logger.info(f"‚úÖ {group_id} Min Profit Reached: ${net_pnl:.2f} >= ${min_profit_threshold:.2f} (Trailing Stop DISABLED)")
                    return True
            
            # üÜï STEP 3: ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á Min Profit ‚Äî ‡πÉ‡∏´‡πâ Trailing Stop ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            # ‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÉ‡∏´‡πâ trailing_data['active'] ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ HIT ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            
            # ‚úÖ FALLBACK: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á threshold
            if net_pnl > 0:
                self.logger.debug(f"üí∞ Group {group_id} profitable but below threshold:")
                self.logger.debug(f"   Net PnL: ${net_pnl:.2f} < Min ${min_profit_threshold:.2f}")
                if trailing_data['active']:
                    self.logger.debug(f"   Trailing: Peak=${trailing_data['peak']:.2f}, Stop=${trailing_data['stop']:.2f}")
            
            # ‚úÖ Never Cut Loss: ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            return False
            
        except Exception as e:
            self.logger.error(f"Error checking if should close group: {e}")
            return False
    
    
    def _start_correlation_recovery(self, group_id: str, group_data: Dict, total_pnl: float):
        """üÜï ‡πÄ‡∏£‡∏¥‡πà‡∏° Smart Recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            if not self.correlation_manager:
                self.logger.warning("Correlation manager not available")
                return
            
            # üÜï ‡πÉ‡∏ä‡πâ Smart Recovery Flow ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á recovery
            self.recovery_in_progress.add(group_id)
            
            # Smart Recovery ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô check_recovery_positions() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Smart Recovery ‡∏´‡∏≤‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å MT5
            
        except Exception as e:
            self.logger.error(f"Error starting smart recovery: {e}")
    
    def _close_group(self, group_id: str):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° arbitrage ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        try:
            if group_id not in self.active_groups:
                return
            
            group_data = self.active_groups[group_id]
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ threading (‡πÉ‡∏ä‡πâ magic number)
            triangle_type = group_data.get('triangle_type', 'unknown')
            triangle_magic = self.triangle_magic_numbers.get(triangle_type, 234000)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ magic number
            all_positions = self.broker.get_all_positions()
            positions_to_close = []
            for pos in all_positions:
                magic = pos.get('magic', 0)
                if magic == triangle_magic:
                    positions_to_close.append(pos)
            
            # üÜï FINAL SAFETY CHECK: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Net PnL ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î! (Never Cut Loss!)
            arbitrage_pnl = sum(pos.get('profit', 0) for pos in positions_to_close)
            recovery_pnl = 0.0
            if self.correlation_manager:
                recovery_pnl = self._get_recovery_pnl_for_group(group_id)
            
            net_pnl = arbitrage_pnl + recovery_pnl
            
            self.logger.info(f"üîç FINAL CHECK before closing Group {group_id}:")
            self.logger.info(f"   Arbitrage PnL: ${arbitrage_pnl:.2f}")
            self.logger.info(f"   Recovery PnL: ${recovery_pnl:.2f}")
            self.logger.info(f"   Net PnL: ${net_pnl:.2f}")
            
            if net_pnl < 0:
                self.logger.error(f"‚ùå‚ùå‚ùå BLOCKED! Net PnL turned NEGATIVE: ${net_pnl:.2f}")
                self.logger.error(f"   Price moved during execution window (Race Condition)!")
                self.logger.error(f"   NEVER CUT LOSS! Group {group_id} will NOT be closed!")
                self.logger.error(f"   Canceling Trailing Stop, waiting for recovery...")
                
                # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Trailing Stop (‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ö‡∏ß‡∏Å)
                if group_id in self.group_trailing_stops:
                    self.group_trailing_stops[group_id]['active'] = False
                    self.group_trailing_stops[group_id]['peak'] = 0.0
                    self.group_trailing_stops[group_id]['stop'] = 0.0
                    self.logger.warning(f"   üîÑ Trailing Stop canceled for {group_id}")
                
                return
            
            self.logger.info(f"‚úÖ Net PnL is POSITIVE (${net_pnl:.2f}) - Proceeding to close...")
            self.logger.info(f"üîÑ Closing arbitrage group {group_id}")
            self.logger.info(f"   üöÄ Closing orders simultaneously...")
            
            orders_closed = 0
            close_results = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            close_orders = []
            for i, position in enumerate(positions_to_close):
                close_orders.append({
                    'symbol': position.get('symbol', ''),
                    'direction': position.get('type', 'BUY'),
                    'group_id': group_id,
                    'order_id': position.get('ticket'),
                    'comment': position.get('comment', ''),
                    'magic': position.get('magic', 0),
                    'index': i
                })
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ threading
            threads = []
            results = [None] * len(close_orders)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            
            def close_single_order(order_data, result_index):
                """‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å"""
                try:
                    # ‡πÉ‡∏ä‡πâ order_id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô position data
                    order_id = order_data.get('order_id')
                    
                    if order_id:
                        result = self.broker.close_order(order_id)
                        
                        if isinstance(result, dict):
                            results[result_index] = {
                                'success': result['success'],
                                'symbol': order_data['symbol'],
                                'direction': order_data['direction'],
                                'order_id': order_id,
                                'pnl': result.get('pnl', 0),
                                'deal_id': result.get('deal_id'),
                                'index': result_index
                            }
                        else:
                            # Fallback for old return format
                            results[result_index] = {
                                'success': result,
                                'symbol': order_data['symbol'],
                                'direction': order_data['direction'],
                                'order_id': order_id,
                                'pnl': 0,
                                'deal_id': None,
                                'index': result_index
                            }
                    else:
                        # Fallback: ‡∏´‡∏≤ order_id ‡∏à‡∏≤‡∏Å broker API
                        all_positions = self.broker.get_all_positions()
                        found_order_id = None
                        
                        # ‡∏´‡∏≤ order ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö symbol ‡πÅ‡∏•‡∏∞ comment
                        triangle_type = group_data.get('triangle_type', 'unknown')
                        triangle_number = triangle_type.split('_')[-1]  # ‡πÑ‡∏î‡πâ 1, 2, 3, 4, 5, 6
                        expected_comment = f"ARB_G{triangle_number}_{order_data['symbol']}"
                        
                        for pos in all_positions:
                            if (pos['symbol'] == order_data['symbol'] and 
                                pos['comment'] == expected_comment):
                                found_order_id = pos['ticket']
                                break
                        
                        if found_order_id:
                            result = self.broker.close_order(found_order_id)
                            
                            if isinstance(result, dict):
                                results[result_index] = {
                                    'success': result['success'],
                                    'symbol': order_data['symbol'],
                                    'direction': order_data['direction'],
                                    'order_id': found_order_id,
                                    'pnl': result.get('pnl', 0),
                                    'deal_id': result.get('deal_id'),
                                    'index': result_index
                                }
                            else:
                                results[result_index] = {
                                    'success': result,
                                    'symbol': order_data['symbol'],
                                    'direction': order_data['direction'],
                                    'order_id': found_order_id,
                                    'pnl': 0,
                                    'deal_id': None,
                                    'index': result_index
                                }
                        else:
                            self.logger.warning(f"Order not found for {order_data['symbol']}")
                            results[result_index] = {
                                'success': False,
                                'symbol': order_data['symbol'],
                                'direction': order_data['direction'],
                                'order_id': None,
                                'pnl': 0,
                                'deal_id': None,
                                'index': result_index,
                                'error': 'Order not found'
                            }
                        
                except Exception as e:
                    self.logger.error(f"Error closing order for {order_data['symbol']}: {e}")
                    results[result_index] = {
                        'success': False,
                        'symbol': order_data['symbol'],
                        'direction': order_data['direction'],
                        'order_id': None,
                        'pnl': 0,
                        'deal_id': None,
                        'index': result_index,
                        'error': str(e)
                    }
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            start_time = datetime.now()
            for i, order_data in enumerate(close_orders):
                thread = threading.Thread(
                    target=close_single_order, 
                    args=(order_data, i),
                    daemon=True
                )
                threads.append(thread)
                thread.start()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            for thread in threads:
                thread.join(timeout=5.0)
            
            end_time = datetime.now()
            total_execution_time = (end_time - start_time).total_seconds() * 1000  # milliseconds
            self.logger.info(f"   ‚è±Ô∏è Total closing time: {total_execution_time:.1f}ms")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            total_pnl = 0.0
            for result in results:
                if result and result['success']:
                    orders_closed += 1
                    pnl = result.get('pnl', 0)
                    total_pnl += pnl
                    pnl_status = "üí∞" if pnl > 0 else "üí∏" if pnl < 0 else "‚öñÔ∏è"
                    self.logger.info(f"   ‚úÖ {result['symbol']} {result['direction']} {pnl_status} ${pnl:.2f}")
                elif result:
                    self.logger.warning(f"   ‚ùå Failed to close: {result['symbol']} {result['direction']}")
                    if 'error' in result:
                        self.logger.error(f"      Error: {result['error']}")
            
            # ‡∏•‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ comment ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if group_id in self.group_currency_mapping:
                group_pairs = self.group_currency_mapping[group_id]
                # ‡∏•‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å used_currency_pairs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ô‡∏µ‡πâ
                triangle_type = group_data.get('triangle_type', 'triangle_1')
                if triangle_type in self.used_currency_pairs:
                    for pair in group_pairs:
                        self.used_currency_pairs[triangle_type].discard(pair)
                del self.group_currency_mapping[group_id]
                self.logger.info(f"   üìä ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ: {group_pairs}")
                        
            # ‡∏õ‡∏¥‡∏î recovery positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (using order_tracker)
            correlation_pnl = 0.0
            recovery_positions_closed = 0
            if self.correlation_manager:
                # _close_recovery_positions_for_group returns (pnl, count)
                correlation_pnl, recovery_positions_closed = self._close_recovery_positions_for_group(group_id)
                # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
                self.correlation_manager.clear_hedged_data_for_group(group_id)
            
            # Reset hedge tracker ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if hasattr(self, 'correlation_manager') and self.correlation_manager:
                # Reset ‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô group ‡∏ô‡∏µ‡πâ
                group_pairs = self.group_currency_mapping.get(group_id, [])
                for symbol in group_pairs:
                    # Individual order tracker handles cleanup automatically via sync
                    self.logger.info(f"üîÑ Reset hedge tracker for {group_id}:{symbol}")
            
            # ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å active_groups
            self._remove_group_data(group_id)
            
            # Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î Group ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            self._reset_group_data_after_close(group_id)
            
            # Reset arbitrage_sent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
            # self.arbitrage_sent = False
            # self.arbitrage_send_time = None
            
            # Reset recovery_in_progress ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            if group_id in self.recovery_in_progress:
                self.recovery_in_progress.remove(group_id)
                self.logger.info(f"üîÑ Reset recovery status for group {group_id}")
            
            # Reset group counter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            triangle_type = group_data.get('triangle_type', 'triangle_1')
            if triangle_type in self.group_counters:
                old_counter = self.group_counters[triangle_type]
                self.group_counters[triangle_type] = 0
                self.logger.info(f"üîÑ Reset {triangle_type} counter from {old_counter} to 0 - next group will be group_{triangle_type}_1")
            
            # Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            self._reset_group_data()
            
            # Reset comment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ comment ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            self._reset_comments_for_group(group_id)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL ‡∏£‡∏ß‡∏° (Arbitrage + Correlation)
            total_combined_pnl = total_pnl + correlation_pnl
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• PnL ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
            pnl_status = "üí∞" if total_combined_pnl > 0 else "üí∏" if total_combined_pnl < 0 else "‚öñÔ∏è"
            self.logger.info(f"‚úÖ Group {group_id} closed successfully")
            self.logger.info(f"   üöÄ Arbitrage orders closed: {orders_closed}/{len(positions_to_close)}")
            self.logger.info(f"   üîÑ Recovery positions closed: {recovery_positions_closed}")
            self.logger.info(f"   üìä Total positions closed: {orders_closed + recovery_positions_closed}")
            self.logger.info(f"   üí∞ Arbitrage PnL: {total_pnl:.2f} USD")
            self.logger.info(f"   üîÑ Correlation PnL: {correlation_pnl:.2f} USD")
            self.logger.info(f"   {pnl_status} Total Combined PnL: {total_combined_pnl:.2f} USD")
            self.logger.info(f"   üìä ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß: {self.used_currency_pairs}")
            self.logger.info(f"   üîÑ Comments reset for group {group_id}")
            self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arbitrage ‡πÉ‡∏´‡∏°‡πà")
            
        except Exception as e:
            self.logger.error(f"Error closing group {group_id}: {e}")
    
    def _get_recovery_pnl_for_group(self, group_id: str) -> float:
        """‡∏î‡∏∂‡∏á PnL ‡∏Ç‡∏≠‡∏á recovery positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î) - using order_tracker"""
        try:
            if not self.correlation_manager:
                return 0.0
            
            total_recovery_pnl = 0.0
            all_positions = self.broker.get_all_positions()
            all_orders = self.correlation_manager.order_tracker.get_all_orders()
            
            # ‡∏´‡∏≤ recovery orders ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            for order_key, order_data in all_orders.items():
                if (order_data.get('type') == 'RECOVERY' and 
                    order_data.get('group_id') == group_id):
                    # ‡∏´‡∏≤ PnL ‡∏à‡∏≤‡∏Å MT5
                    ticket = order_data.get('ticket')
                    if ticket:
                        for pos in all_positions:
                            if str(pos.get('ticket')) == str(ticket):
                                total_recovery_pnl += pos.get('profit', 0)
                                break
            
            return total_recovery_pnl
            
        except Exception as e:
            self.logger.error(f"Error getting recovery PnL for group: {e}")
            return 0.0
    
    def _get_magic_for_group(self, group_id: str) -> int:
        """Get magic number for a group_id"""
        try:
            # Extract triangle number from group_id (e.g., "group_triangle_1_1" -> "1")
            if 'triangle_' in group_id:
                triangle_part = group_id.split('triangle_')[1].split('_')[0]
                magic_map = {
                    '1': 234001,
                    '2': 234002,
                    '3': 234003,
                    '4': 234004,
                    '5': 234005,
                    '6': 234006
                }
                return magic_map.get(triangle_part, 234000)
            return 234000
        except Exception as e:
            self.logger.error(f"Error getting magic for group {group_id}: {e}")
            return 234000
    
    def _close_recovery_positions_for_group(self, group_id: str):
        """‡∏õ‡∏¥‡∏î recovery positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° arbitrage (using order_tracker) - returns (pnl, count)"""
        try:
            if not self.correlation_manager:
                return 0.0, 0
            
            # Get all orders from order_tracker
            all_orders = self.correlation_manager.order_tracker.get_all_orders()
            all_positions = self.broker.get_all_positions()
            
            # ‡∏´‡∏≤ recovery orders ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            group_data = self.active_groups.get(group_id, {})
            group_pairs = set(group_data.get('triangle', []))
            
            # Get magic number for this group
            magic_number = self._get_magic_for_group(group_id)
            
            # Find all original tickets in this group (from MT5)
            original_tickets = set()
            for pos in all_positions:
                if pos.get('magic') == magic_number:
                    # Check if it's not a recovery order
                    comment = pos.get('comment', '')
                    if not (comment.startswith('R') or comment.startswith('RECOVERY_')):
                        original_tickets.add(str(pos.get('ticket')))
            
            self.logger.info(f"üîç Found {len(original_tickets)} original tickets in group {group_id} (magic {magic_number})")
            
            recovery_orders_to_close = []
            total_correlation_pnl = 0.0
            
            # Find recovery orders that hedge these original tickets
            for order_key, order_data in all_orders.items():
                if order_data.get('type') == 'RECOVERY':
                    # Check if this recovery is hedging any ticket from this group
                    hedging_for = order_data.get('hedging_for', '')
                    if hedging_for:
                        # Extract ticket from hedging_for key (format: ticket_symbol)
                        hedging_ticket = hedging_for.split('_')[0] if '_' in hedging_for else hedging_for
                        if hedging_ticket in original_tickets:
                            recovery_orders_to_close.append(order_data)
                            self.logger.debug(f"   Found recovery {order_data.get('ticket')} hedging {hedging_ticket}")
            
            # Close recovery orders and collect PnL
            if recovery_orders_to_close:
                self.logger.info(f"üîÑ Closing {len(recovery_orders_to_close)} recovery positions for group {group_id}")
            
            for order_data in recovery_orders_to_close:
                ticket = order_data.get('ticket')
                symbol = order_data.get('symbol')
                
                if ticket and symbol:
                    # Get current PnL from MT5 before closing
                    for pos in all_positions:
                        if str(pos.get('ticket')) == str(ticket):
                            total_correlation_pnl += pos.get('profit', 0)
                            break
                    
                    # Close the order via broker using ticket (not symbol!)
                    success = self.broker.close_position(int(ticket))
                    if success:
                        self.logger.info(f"   ‚úÖ Closed recovery order: {symbol} (Ticket: {ticket})")
                    else:
                        self.logger.warning(f"   ‚ö†Ô∏è Failed to close recovery order: {symbol} (Ticket: {ticket})")
            
            total_recovery_closed = len(recovery_orders_to_close)
            if total_recovery_closed > 0:
                self.logger.info(f"‚úÖ Closed {total_recovery_closed} recovery positions for group {group_id}")
                self.logger.info(f"   üí∞ Total Correlation PnL: {total_correlation_pnl:.2f} USD")
            
            # Return both PnL and count
            return total_correlation_pnl, total_recovery_closed
            
        except Exception as e:
            self.logger.error(f"Error closing recovery positions for group {group_id}: {e}")
            return 0.0, 0
    
    def _reset_comments_for_group(self, group_id: str):
        """Reset comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
            triangle_type = self.active_groups.get(group_id, {}).get('triangle_type', 'unknown')
            triangle_number = triangle_type.split('_')[-1]  # ‡πÑ‡∏î‡πâ 1, 2, 3, 4, 5, 6
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment patterns ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á reset
            # ‚úÖ Comment patterns for group identification
            # NEW FORMAT: R{ticket}_{symbol} for recovery orders
            # LEGACY: RECOVERY_G{triangle_number}_ (old format, still supported)
            comment_patterns = [
                f"G{triangle_number}_EURUSD",
                f"G{triangle_number}_GBPUSD", 
                f"G{triangle_number}_EURGBP",
                f"R",  # NEW: Recovery orders start with 'R'
                f"ARB_G{triangle_number}_"
            ]
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á used_currency_pairs ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
            # self.logger.info(f"üîç Current used_currency_pairs: {list(self.used_currency_pairs)}")
            # self.logger.info(f"üîç Looking for patterns: {comment_patterns}")
            # 
            # # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ comment ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            # used_comments = set()
            # for pattern in comment_patterns:
            #     # Check if any used_currency_pairs starts with this pattern
            #     for used_pair in list(self.used_currency_pairs):  # Iterate over a copy
            #         if used_pair.startswith(pattern):
            #             used_comments.add(used_pair)
            #             self.logger.info(f"‚úÖ Found matching comment: {used_pair}")
            # 
            # # ‡∏•‡∏ö comment ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å used_currency_pairs
            # for comment in used_comments:
            #     self.used_currency_pairs.discard(comment)
            # 
            # if used_comments:
            #     self.logger.info(f"üîÑ Reset comments for group {group_id}: {used_comments}")
            #     self.logger.info(f"üîÑ Remaining used_currency_pairs: {list(self.used_currency_pairs)}")
            # else:
            #     self.logger.info(f"üîÑ No comments to reset for group {group_id}")
            
            self.logger.info(f"üîÑ No comments to reset for group {group_id}")
            
        except Exception as e:
            self.logger.error(f"Error resetting comments for group {group_id}: {e}")
    
    def _reset_group_data(self):
        """Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if len(self.active_groups) == 0:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                for triangle_name in self.used_currency_pairs:
                    self.used_currency_pairs[triangle_name].clear()
                self.group_currency_mapping.clear()
                self.recovery_in_progress.clear()
                
                # Reset group counters ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                for triangle_name, counter in self.group_counters.items():
                    if counter > 0:
                        self.group_counters[triangle_name] = 0
                        self.logger.info(f"üîÑ Reset {triangle_name} counter to 0 - next group will be group_{triangle_name}_1")
                
                self.logger.info("üîÑ Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ comment ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß")
            else:
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                current_used_pairs = set()
                groups_to_remove = []
                
                for group_id, group_data in list(self.active_groups.items()):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Group ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô broker ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    valid_positions = 0
                    for position in group_data['positions']:
                        order_id = position.get('order_id')
                        if order_id:
                            all_positions = self.broker.get_all_positions()
                            for pos in all_positions:
                                if pos['ticket'] == order_id:
                                    valid_positions += 1
                                    break
                    
                    if valid_positions > 0:
                        # Group ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                        triangle = group_data.get('triangle', [])
                        if triangle:
                            group_pairs = set(triangle)
                            current_used_pairs.update(group_pairs)
                            self.group_currency_mapping[group_id] = group_pairs
                    else:
                        # Group ‡πÑ‡∏°‡πà‡∏°‡∏µ valid positions ‡πÉ‡∏´‡πâ‡∏•‡∏ö
                        groups_to_remove.append(group_id)
                        self.logger.info(f"üóëÔ∏è Group {group_id} has no valid positions - removing from active groups")
                
                # ‡∏•‡∏ö Groups ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ valid positions
                for group_id in groups_to_remove:
                    if group_id in self.active_groups:
                        del self.active_groups[group_id]
                    if group_id in self.group_currency_mapping:
                        del self.group_currency_mapping[group_id]
                    if group_id in self.recovery_in_progress:
                        self.recovery_in_progress.remove(group_id)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó used_currency_pairs ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
                # current_used_pairs ‡πÄ‡∏õ‡πá‡∏ô set ‡πÅ‡∏ï‡πà self.used_currency_pairs ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dict
                # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ magic number ‡πÅ‡∏•‡πâ‡∏ß
                self.logger.info(f"üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {self.used_currency_pairs}")
                
        except Exception as e:
            self.logger.error(f"Error resetting group data: {e}")
    
    def analyze_timeframe(self, triangle: Tuple[str, str, str], timeframe: str) -> Dict:
        """Analyze triangle for specific timeframe"""
        try:
            pair1, pair2, pair3 = triangle
            
            # Get historical data for each pair
            data1 = self.broker.get_historical_data(pair1, timeframe, 100)
            data2 = self.broker.get_historical_data(pair2, timeframe, 100)
            data3 = self.broker.get_historical_data(pair3, timeframe, 100)
            
            if data1 is None or data2 is None or data3 is None:
                return {'status': 'no_data'}
            
            # Calculate trend
            trend1 = self._calculate_trend(data1)
            trend2 = self._calculate_trend(data2)
            trend3 = self._calculate_trend(data3)
            
            # Calculate structure
            structure1 = self._analyze_structure(data1)
            structure2 = self._analyze_structure(data2)
            structure3 = self._analyze_structure(data3)
            
            # Calculate volatility
            volatility1 = self._calculate_volatility(data1)
            volatility2 = self._calculate_volatility(data2)
            volatility3 = self._calculate_volatility(data3)
            
            return {
                'status': 'success',
                'trend': {
                    pair1: trend1,
                    pair2: trend2,
                    pair3: trend3
                },
                'structure': {
                    pair1: structure1,
                    pair2: structure2,
                    pair3: structure3
                },
                'volatility': {
                    pair1: volatility1,
                    pair2: volatility2,
                    pair3: volatility3
                }
            }
            
        except Exception as e:
            self.logger.error(f"Error analyzing timeframe {timeframe} for {triangle}: {e}")
            return {'status': 'error', 'error': str(e)}
    
    def calculate_arbitrage(self, triangle: Tuple[str, str, str], triangles_checked: int = 0) -> Optional[float]:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå Arbitrage ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á
        
        ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Spread, Commission, ‡πÅ‡∏•‡∏∞ Slippage
        """
        try:
            pair1, pair2, pair3 = triangle
            
            # üÜï ‡πÅ‡∏õ‡∏•‡∏á symbols ‡∏ú‡πà‡∏≤‡∏ô mapper
            real_pair1 = self.symbol_mapper.get_real_symbol(pair1)
            real_pair2 = self.symbol_mapper.get_real_symbol(pair2)
            real_pair3 = self.symbol_mapper.get_real_symbol(pair3)
            
            # Get current prices
            price1 = self.broker.get_current_price(real_pair1)
            price2 = self.broker.get_current_price(real_pair2)
            price3 = self.broker.get_current_price(real_pair3)
            
            if price1 is None or price2 is None or price3 is None:
                # Log missing prices for first few triangles to debug
                if triangles_checked < 5:
                    self.logger.warning(f"Missing prices for {triangle}: {pair1}={price1}, {pair2}={price2}, {pair3}={price3}")
                return None
            
            # Get spreads (with fallback)
            spread1 = self.broker.get_spread(pair1) if hasattr(self.broker, 'get_spread') else 0
            spread2 = self.broker.get_spread(pair2) if hasattr(self.broker, 'get_spread') else 0
            spread3 = self.broker.get_spread(pair3) if hasattr(self.broker, 'get_spread') else 0
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ spread ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if spread1 is None:
                spread1 = 0
            if spread2 is None:
                spread2 = 0
            if spread3 is None:
                spread3 = 0
            
            # ‡∏ñ‡πâ‡∏≤ spread ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô 0 (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
            if spread1 == 0 and spread2 == 0 and spread3 == 0:
                self.logger.debug(f"Using default spread values for {triangle} (broker data unavailable)")
                spread1 = spread2 = spread3 = 1.0  # ‡πÉ‡∏ä‡πâ 1 pip ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default
            else:
                self.logger.debug(f"Spread data for {triangle}: {pair1}={spread1:.2f}, {pair2}={spread2:.2f}, {pair3}={spread3:.2f} pips")
            
            # Import TradingCalculations
            from utils.calculations import TradingCalculations
            
            # Calculate arbitrage with real trading costs
            arbitrage_percent = TradingCalculations.calculate_arbitrage_percentage(
                pair1_price=price1,
                pair2_price=price2,
                pair3_price=price3,
                spread1=spread1,
                spread2=spread2,
                spread3=spread3,
                commission_rate=0.0001,  # 0.01%
                slippage_percent=0.05,   # 0.05%
                minimum_threshold=0.1    # 0.1%
            )
            
            return arbitrage_percent if arbitrage_percent > 0 else None
            
        except Exception as e:
            self.logger.error(f"Error calculating arbitrage for {triangle}: {e}")
            return None
    
    def _get_triangle_name(self, triangle: Tuple[str, str, str]) -> str:
        """Get triangle name from triangle tuple"""
        try:
            # ‡∏´‡∏≤ triangle name ‡∏à‡∏≤‡∏Å triangle mapping
            for i, triangle_data in enumerate(self.triangles):
                if triangle_data == triangle:
                    return f"triangle_{i+1}"
            return "triangle_unknown"
        except Exception as e:
            self.logger.error(f"Error getting triangle name: {e}")
            return "triangle_unknown"
    
    def execute_triangle_entry(self, triangle: Tuple[str, str, str], ai_decision):
        """Execute triangle positions based on AI decision"""
        try:
            pair1, pair2, pair3 = triangle
            lot_size = ai_decision.position_size
            direction = ai_decision.direction
            
            # ‡∏´‡∏≤ triangle_name ‡∏à‡∏≤‡∏Å triangle
            triangle_name = self._get_triangle_name(triangle)
            
            orders = []
            
            # Place orders for each pair in the triangle
            for i, pair in enumerate(triangle):
                order_type = 'BUY' if direction.get(pair, 1) > 0 else 'SELL'
                order = self.broker.place_order(pair, order_type, lot_size)
                
                if order:
                    orders.append(order)
                    
                    # Track ‡πÑ‡∏°‡πâ arbitrage ‡πÉ‡∏ô hedge tracker
                    if hasattr(self, 'correlation_manager') and self.correlation_manager:
                        group_id = f"group_{triangle_name}_{self.group_counters[triangle_name]}"
                        # Individual order tracker doesn't need locking - each order is tracked individually
                else:
                    # If any order fails, cancel all previous orders
                    self.logger.error(f"Failed to place order for {pair}, cancelling triangle")
                    for prev_order in orders:
                        self.broker.cancel_order(prev_order['order_id'])
                    return False
            
            # Store active triangle
            self.active_triangles[triangle] = {
                'orders': orders,
                'entry_time': datetime.now(),
                'ai_decision': ai_decision,
                'status': 'active'
            }
            
            self.logger.info(f"Successfully executed triangle {triangle} with {len(orders)} orders")
            return True
            
        except Exception as e:
            self.logger.error(f"Error executing triangle entry for {triangle}: {e}")
            return False
    
    def execute_triangle_entry_never_cut_loss(self, triangle: Tuple[str, str, str], ai_decision):
        """
        Execute triangle positions with Never-Cut-Loss approach
        ‡πÉ‡∏ä‡πâ Correlation Recovery ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ cut loss
        """
        try:
            pair1, pair2, pair3 = triangle
            lot_size = ai_decision.position_size
            direction = ai_decision.direction
            
            # ‡∏´‡∏≤ triangle_name ‡∏à‡∏≤‡∏Å triangle
            triangle_name = self._get_triangle_name(triangle)
            
            orders = []
            
            # Place orders for each pair in the triangle
            for i, pair in enumerate(triangle):
                order_type = 'BUY' if direction.get(pair, 1) > 0 else 'SELL'
                order = self.broker.place_order(pair, order_type, lot_size)
                
                if order:
                    orders.append(order)
                    
                    # Track ‡πÑ‡∏°‡πâ arbitrage ‡πÉ‡∏ô hedge tracker
                    if hasattr(self, 'correlation_manager') and self.correlation_manager:
                        group_id = f"group_{triangle_name}_{self.group_counters[triangle_name]}"
                        # Individual order tracker doesn't need locking - each order is tracked individually
                else:
                    # If any order fails, cancel all previous orders
                    self.logger.error(f"Failed to place order for {pair}, cancelling triangle")
                    for prev_order in orders:
                        self.broker.cancel_order(prev_order['order_id'])
                    return False
            
            # Store active triangle with Never-Cut-Loss metadata
            self.active_triangles[triangle] = {
                'orders': orders,
                'entry_time': datetime.now(),
                'ai_decision': ai_decision,
                'status': 'active',
                'never_cut_loss': True,
                'recovery_strategy': 'correlation_hedge',
                # 'market_regime': self.market_regime,  # DISABLED - not used in simple trading
                'adaptive_threshold': self.volatility_threshold,
                'execution_speed_ms': self.performance_metrics['avg_execution_time']
            }
            
            self.logger.info(f"‚úÖ NEVER-CUT-LOSS triangle executed: {triangle} with {len(orders)} orders "
                           f"(regime: normal)")  # DISABLED - not used in simple trading
            return True
            
        except Exception as e:
            self.logger.error(f"Error executing Never-Cut-Loss triangle entry for {triangle}: {e}")
            return False
    
    def close_triangle(self, triangle: Tuple[str, str, str], reason: str = "manual"):
        """Close all positions in a triangle"""
        try:
            if triangle not in self.active_triangles:
                return False
            
            triangle_data = self.active_triangles[triangle]
            orders = triangle_data['orders']
            
            # Close all orders
            for order in orders:
                self.broker.close_order(order['order_id'])
            
            # Update triangle status
            triangle_data['status'] = 'closed'
            triangle_data['close_time'] = datetime.now()
            triangle_data['close_reason'] = reason
            
            self.logger.info(f"Closed triangle {triangle} - Reason: {reason}")
            return True
            
        except Exception as e:
            self.logger.error(f"Error closing triangle {triangle}: {e}")
            return False
    
    def _calculate_trend(self, data: pd.DataFrame) -> str:
        """Calculate trend from price data"""
        if len(data) < 20:
            return 'unknown'
        
        # Simple moving average trend
        sma_20 = data['close'].rolling(20).mean()
        sma_50 = data['close'].rolling(50).mean()
        
        if len(sma_20) < 1 or len(sma_50) < 1:
            return 'unknown'
        
        current_price = data['close'].iloc[-1]
        sma_20_current = sma_20.iloc[-1]
        sma_50_current = sma_50.iloc[-1]
        
        if current_price > sma_20_current > sma_50_current:
            return 'bullish'
        elif current_price < sma_20_current < sma_50_current:
            return 'bearish'
        else:
            return 'sideways'
    
    def _analyze_structure(self, data: pd.DataFrame) -> str:
        """Analyze market structure"""
        if len(data) < 10:
            return 'unknown'
        
        # Look for support/resistance levels
        highs = data['high'].rolling(5).max()
        lows = data['low'].rolling(5).min()
        
        current_price = data['close'].iloc[-1]
        recent_high = highs.iloc[-1]
        recent_low = lows.iloc[-1]
        
        if current_price > recent_high * 0.99:
            return 'resistance'
        elif current_price < recent_low * 1.01:
            return 'support'
        else:
            return 'normal'
    
    def _calculate_volatility(self, data: pd.DataFrame) -> float:
        """Calculate volatility (standard deviation of returns)"""
        if len(data) < 10:
            return 0.0
        
        returns = data['close'].pct_change().dropna()
        return returns.std() * 100  # Return as percentage
    
    def _check_spread_acceptable(self, triangle: Tuple[str, str, str]) -> bool:
        """Check if spreads are acceptable for arbitrage"""
        try:
            pair1, pair2, pair3 = triangle
            
            spread1 = self.broker.get_spread(pair1)
            spread2 = self.broker.get_spread(pair2)
            spread3 = self.broker.get_spread(pair3)
            
            self.logger.info(f"üìä {triangle}: Spreads - {pair1}: {spread1}, {pair2}: {spread2}, {pair3}: {spread3}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ spread ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if spread1 is None or spread2 is None or spread3 is None:
                self.logger.info(f"‚ö†Ô∏è {triangle}: Some spreads unavailable, using bid/ask calculation")
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å arbitrage)
                # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å Bid-Ask ‡πÉ‡∏ô _calculate_total_cost ‡πÅ‡∏ó‡∏ô
                return True
            
            # Check if all spreads are below threshold - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            max_spread = self._get_config_value('arbitrage_params.detection.spread_tolerance', 10.0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 3.0 ‡πÄ‡∏õ‡πá‡∏ô 10.0
            acceptable = (spread1 < max_spread and 
                         spread2 < max_spread and 
                         spread3 < max_spread)
            
            if not acceptable:
                self.logger.info(f"‚ùå {triangle}: Spreads too high - {spread1:.2f}, {spread2:.2f}, {spread3:.2f} pips (max: {max_spread})")
            else:
                self.logger.info(f"‚úÖ {triangle}: All spreads acceptable (max: {max(spread1, spread2, spread3):.2f} <= {max_spread})")
            
            return acceptable
                   
        except Exception as e:
            self.logger.error(f"Error checking spread for {triangle}: {e}")
            return True  # Return True on error to not block trades
    
    def calculate_arbitrage_direction(self, triangle: Tuple[str, str, str]) -> Optional[Dict]:
        """
        ‚≠ê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Triangle Arbitrage
        
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Forward Path (BUY-BUY-SELL) ‡πÅ‡∏•‡∏∞ Reverse Path (BUY-SELL-SELL)
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Returns:
            Dict with keys: direction, profit_percent, orders, raw_profit
            None if no profitable opportunity
        """
        try:
            pair1, pair2, pair3 = triangle
            
            self.logger.info(f"üßÆ {triangle}: Calculating arbitrage direction...")
            
            # 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ Bid/Ask
            bid1, ask1 = self._get_bid_ask(pair1)
            bid2, ask2 = self._get_bid_ask(pair2)
            bid3, ask3 = self._get_bid_ask(pair3)
            
            if not all([bid1, ask1, bid2, ask2, bid3, ask3]):
                self.logger.info(f"‚ùå {triangle}: Cannot get bid/ask prices")
                return None
            
            self.logger.info(f"üí± {triangle}: Prices - {pair1}: {bid1:.5f}/{ask1:.5f}, {pair2}: {bid2:.5f}/{ask2:.5f}, {pair3}: {bid3:.5f}/{ask3:.5f}")
            
            # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Forward Path (BUY pair1, BUY pair2, SELL pair3)
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ 1 USD
            forward_step1 = 1 / ask1          # ‡∏ã‡∏∑‡πâ‡∏≠ pair1 ‡πÑ‡∏î‡πâ base currency
            forward_step2 = forward_step1 / ask2  # ‡∏ã‡∏∑‡πâ‡∏≠ pair2 ‡πÑ‡∏î‡πâ counter currency
            forward_step3 = forward_step2 * bid3  # ‡∏Ç‡∏≤‡∏¢ pair3 ‡πÑ‡∏î‡πâ USD ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            forward_result = forward_step3
            forward_profit_percent = (forward_result - 1.0) * 100
            
            # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Reverse Path (BUY pair3, SELL pair2, SELL pair1)
            reverse_step1 = 1 / ask3          # ‡∏ã‡∏∑‡πâ‡∏≠ pair3
            reverse_step2 = reverse_step1 * bid2  # ‡∏Ç‡∏≤‡∏¢ pair2
            reverse_step3 = reverse_step2 * bid1  # ‡∏Ç‡∏≤‡∏¢ pair1 ‡πÑ‡∏î‡πâ USD ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            reverse_result = reverse_step3
            reverse_profit_percent = (reverse_result - 1.0) * 100
            
            # 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
            total_cost_percent = self._calculate_total_cost(triangle, bid1, ask1, bid2, ask2, bid3, ask3)
            
            self.logger.info(f"üîÑ {triangle}: Forward path = {forward_profit_percent:.4f}%, Reverse path = {reverse_profit_percent:.4f}%, Cost = {total_cost_percent:.4f}%")
            
            # 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            forward_net = forward_profit_percent - total_cost_percent
            reverse_net = reverse_profit_percent - total_cost_percent
            
            # 6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à threshold ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
            self.logger.info(f"üìä {triangle}: Net profits - Forward: {forward_net:.4f}%, Reverse: {reverse_net:.4f}%")
            
            if forward_net >= reverse_net:
                self.logger.info(f"‚úÖ {triangle}: FORWARD path selected - Net profit: {forward_net:.4f}%")
                return {
                    'direction': 'forward',
                    'profit_percent': forward_net,
                    'raw_profit': forward_profit_percent,
                    'cost_percent': total_cost_percent,
                    'orders': {
                        pair1: 'BUY',
                        pair2: 'BUY',
                        pair3: 'SELL'
                    }
                }
            else:
                self.logger.info(f"‚úÖ {triangle}: REVERSE path selected - Net profit: {reverse_net:.4f}%")
                return {
                    'direction': 'reverse',
                    'profit_percent': reverse_net,
                    'raw_profit': reverse_profit_percent,
                    'cost_percent': total_cost_percent,
                    'orders': {
                        pair1: 'SELL',
                        pair2: 'SELL',
                        pair3: 'BUY'
                    }
                }
                
        except Exception as e:
            self.logger.error(f"Error calculating arbitrage direction for {triangle}: {e}")
            return None
    
    def _get_bid_ask(self, symbol: str) -> Tuple[Optional[float], Optional[float]]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ Bid ‡πÅ‡∏•‡∏∞ Ask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol"""
        try:
            # ‡πÉ‡∏ä‡πâ real symbol
            real_symbol = self.symbol_mapper.get_real_symbol(symbol)
            
            # ‡πÉ‡∏ä‡πâ MT5 ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            tick = mt5.symbol_info_tick(real_symbol)
            
            if tick:
                return tick.bid, tick.ask
            
            # üîÆ Intelligent fallback: ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + estimated spread
            price = self.broker.get_current_price(symbol)
            if price:
                # ‡πÉ‡∏ä‡πâ estimated spread ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å broker.get_spread()
                estimated_spread = self._get_estimated_spread_for_pair(symbol)
                
                # ‡πÅ‡∏õ‡∏•‡∏á spread ‡∏à‡∏≤‡∏Å pips ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
                if 'JPY' in symbol:
                    spread_price = estimated_spread * 0.01
                else:
                    spread_price = estimated_spread * 0.0001
                
                bid = price - spread_price / 2
                ask = price + spread_price / 2
                
                self.logger.debug(f"üìä {symbol}: Using estimated spread {estimated_spread} pips")
                return bid, ask
            
            return None, None
            
        except Exception as e:
            self.logger.error(f"Error getting bid/ask for {symbol}: {e}")
            return None, None
    
    def _calculate_total_cost(self, triangle: Tuple[str, str, str], 
                            bid1: float, ask1: float, 
                            bid2: float, ask2: float, 
                            bid3: float, ask3: float) -> float:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Spread + Commission + Slippage)
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bid-Ask ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if None in [bid1, ask1, bid2, ask2, bid3, ask3]:
                self.logger.warning(f"Incomplete bid/ask data for {triangle}")
                return 0.5  # Return default 0.5% if incomplete data
            
            # 1. Spread Cost (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Bid-Ask)
            spread_cost_1 = (ask1 - bid1) / bid1 * 100
            spread_cost_2 = (ask2 - bid2) / bid2 * 100
            spread_cost_3 = (ask3 - bid3) / bid3 * 100
            spread_cost_total = spread_cost_1 + spread_cost_2 + spread_cost_3
            
            # 2. Commission Cost (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å config ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default)
            commission_rate = self._get_config_value('arbitrage_params.execution.commission_rate', 0.0001)
            commission_cost = commission_rate * 3 * 100  # 3 legs
            
            # 3. Slippage Cost (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å config ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default)
            slippage = self._get_config_value('arbitrage_params.execution.max_slippage', 0.0005)
            slippage_cost = slippage * 3 * 100  # 3 legs
            
            # ‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
            total_cost = spread_cost_total + commission_cost + slippage_cost
            
            self.logger.debug(f"Cost breakdown for {triangle}: Spread={spread_cost_total:.4f}%, Commission={commission_cost:.4f}%, Slippage={slippage_cost:.4f}%, Total={total_cost:.4f}%")
            
            return total_cost
            
        except Exception as e:
            self.logger.error(f"Error calculating total cost: {e}")
            return 0.5  # Return default 0.5% if error
    
    # ==================================================================================
    # üéØ INTELLIGENT SCORING SYSTEM (6 FACTORS)
    # ==================================================================================
    
    def _calculate_opportunity_score(self, triangle: Tuple[str, str, str], direction_info: Dict) -> Optional[Dict]:
        """üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Arbitrage ‡∏à‡∏≤‡∏Å 6 ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å (0-100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)"""
        try:
            factors = {}
            
            # Factor 1: Profit Score (0-35 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            profit_data = self._get_profit_score(direction_info)
            factors['profit'] = profit_data
            
            # Factor 2: Spread Score (0-20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            spread_data = self._get_spread_score(triangle)
            factors['spread'] = spread_data
            
            # Factor 3: Market Condition Score (0-20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            market_data = self._get_market_condition_score(triangle)
            factors['market'] = market_data
            
            # Factor 4: Time Pattern Score (0-10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            time_data = self._get_time_pattern_score()
            factors['time'] = time_data
            
            # Factor 5: Execution Probability (0-10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            execution_data = self._get_execution_probability_score(triangle, direction_info)
            factors['execution'] = execution_data
            
            # Factor 6: Risk Score (0-5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
            risk_data = self._get_risk_score(triangle, direction_info)
            factors['risk'] = risk_data
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            total_score = sum(f['score'] for f in factors.values())
            
            return {
                'total_score': total_score,
                'factors': factors
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating opportunity score: {e}")
            return None
    
    def _get_profit_score(self, direction_info: Dict) -> Dict:
        """üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (0-35 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | 0.05%=35, 0.03%=21, 0.01%=7"""
        try:
            profit_percent = direction_info.get('profit_percent', 0)
            
            if profit_percent >= 0.05:
                score = 35.0
            elif profit_percent >= 0.005:
                score = (profit_percent / 0.05) * 35.0
            else:
                score = 0.0
            
            return {
                'score': min(score, 35.0),
                'weight': 0.35,
                'value': profit_percent
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating profit score: {e}")
            return {'score': 0.0, 'weight': 0.35, 'value': 0.0}
    
    def _get_spread_score(self, triangle: Tuple[str, str, str]) -> Dict:
        """üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Spread (0-20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | <=2pips=20, 5pips=10, >=10pips=0"""
        try:
            pair1, pair2, pair3 = triangle
            
            # üîç ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô - ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            spreads = []
            real_data_count = 0
            
            for pair in [pair1, pair2, pair3]:
                real_pair = self.symbol_mapper.get_real_symbol(pair)
                
                # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
                real_spread = self._try_get_real_spread(pair, real_pair)
                
                if real_spread is not None:
                    spreads.append(real_spread)
                    real_data_count += 1
                    self.logger.debug(f"üìä {pair} ({real_pair}): Real spread {real_spread:.2f} pips")
                else:
                    # ‡πÉ‡∏ä‡πâ estimated ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ
                    estimated = self._get_estimated_spread_for_pair(pair)
                    spreads.append(estimated)
                    self.logger.debug(f"üìä {pair} ({real_pair}): Estimated spread {estimated:.2f} pips")
            
            avg_spread = sum(spreads) / 3.0
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß
            if real_data_count == 0:
                self.logger.warning(f"‚ö†Ô∏è {triangle}: No real spread data - using all estimated spreads")
            elif real_data_count < 3:
                self.logger.info(f"üìä {triangle}: {real_data_count}/3 real spreads, {3-real_data_count} estimated")
            else:
                self.logger.info(f"‚úÖ {triangle}: All 3 real spreads available")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            if real_data_count > 0:
                self._save_spread_cache()
            
            if avg_spread <= 2.0:
                score = 20.0
            elif avg_spread >= 10.0:
                score = 0.0
            else:
                score = 20.0 - ((avg_spread - 2.0) / 8.0) * 20.0
            
            return {
                'score': max(0.0, min(score, 20.0)),
                'weight': 0.20,
                'value': avg_spread
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating spread score: {e}")
            return {'score': 10.0, 'weight': 0.20, 'value': 5.0}
    
    def _get_estimated_spreads(self, triangle: Tuple[str, str, str]) -> List[float]:
        """üîÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì estimated spreads ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangle ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        pair1, pair2, pair3 = triangle
        return [
            self._get_estimated_spread_for_pair(pair1),
            self._get_estimated_spread_for_pair(pair2),
            self._get_estimated_spread_for_pair(pair3)
        ]
    
    def _get_estimated_spread_for_pair(self, pair: str) -> float:
        """üîÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì estimated spread ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô (‡∏â‡∏•‡∏≤‡∏î‡∏Å‡∏ß‡πà‡∏≤ fallback!)"""
        pair = pair.upper()
        
        # Major pairs - spread ‡∏ï‡πà‡∏≥ (1.5-3.0 pips)
        major_pairs = ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'NZDUSD']
        if pair in major_pairs:
            return 2.0
        
        # EUR crosses - spread ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (2.0-4.0 pips)
        eur_crosses = ['EURGBP', 'EURJPY', 'EURCHF', 'EURAUD', 'EURNZD', 'EURCAD']
        if pair in eur_crosses:
            return 3.0
        
        # GBP crosses - spread ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (2.5-4.5 pips)
        gbp_crosses = ['GBPJPY', 'GBPCHF', 'GBPAUD', 'GBPNZD', 'GBPCAD']
        if pair in gbp_crosses:
            return 3.5
        
        # AUD/NZD crosses - spread ‡∏™‡∏π‡∏á (3.0-5.0 pips)
        aud_nzd_crosses = ['AUDJPY', 'AUDCHF', 'AUDCAD', 'AUDNZD', 'NZDJPY', 'NZDCHF', 'NZDCAD']
        if pair in aud_nzd_crosses:
            return 4.0
        
        # CAD/CHF crosses - spread ‡∏™‡∏π‡∏á (3.5-5.5 pips)
        cad_chf_crosses = ['CADJPY', 'CADCHF', 'CHFJPY']
        if pair in cad_chf_crosses:
            return 4.5
        
        # Default - spread ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        return 3.0
    
    def _try_get_real_spread(self, base_symbol: str, real_symbol: str) -> Optional[float]:
        """üîç ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ"""
        try:
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 0: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cache ‡∏Å‡πà‡∏≠‡∏ô
            cached_spread = self._get_cached_spread(base_symbol)
            if cached_spread is not None:
                self.logger.debug(f"üìã {base_symbol}: Using cached spread {cached_spread:.2f} pips")
                return cached_spread
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ broker.get_spread()
            spread = self.broker.get_spread(base_symbol)
            if spread is not None and spread > 0:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
                self._update_spread_cache(base_symbol, spread)
                return spread
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ MT5 ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            try:
                import MetaTrader5 as mt5
                if mt5.initialize():
                    # üîß Force login ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    account_info = mt5.account_info()
                    if account_info is None:
                        self.logger.info("üîå MT5 not connected - attempting login...")
                        if mt5.login():
                            account_info = mt5.account_info()
                            if account_info:
                                self.logger.info(f"‚úÖ MT5 Connected - Account: {account_info.login}")
                    
                    # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å real symbol
                    tick = mt5.symbol_info_tick(real_symbol)
                    if tick and tick.bid is not None and tick.ask is not None:
                        spread_price = tick.ask - tick.bid
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pips
                        symbol_info = mt5.symbol_info(real_symbol)
                        if symbol_info:
                            digits = symbol_info.digits
                            if digits == 5 or digits == 3:
                                spread_pips = spread_price * 10000
                            elif digits == 4 or digits == 2:
                                spread_pips = spread_price * 10000
                            else:
                                spread_pips = spread_price * 10000
                            
                            if spread_pips > 0:
                                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
                                self._update_spread_cache(base_symbol, spread_pips)
                                self.logger.info(f"üìä Real spread from MT5: {base_symbol} = {spread_pips:.2f} pips")
                                return spread_pips
                    
                    mt5.shutdown()
            except ImportError:
                pass  # MT5 ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å bid/ask ‡∏ó‡∏µ‡πà‡∏°‡∏µ
            bid, ask = self._get_bid_ask(base_symbol)
            if bid is not None and ask is not None and ask > bid:
                spread_price = ask - bid
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pips
                if 'JPY' in base_symbol:
                    spread_pips = spread_price * 100
                else:
                    spread_pips = spread_price * 10000
                
                if spread_pips > 0:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
                    self._update_spread_cache(base_symbol, spread_pips)
                    return spread_pips
            
            return None
            
        except Exception as e:
            self.logger.debug(f"Error getting real spread for {base_symbol}: {e}")
            return None
    
    def _load_spread_cache(self):
        """üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread cache ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            
            if os.path.exists(self.spread_cache_file):
                with open(self.spread_cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                    self.spread_cache = cache_data.get('spreads', {})
                    self.logger.info(f"üìÇ Loaded {len(self.spread_cache)} spread cache entries")
            else:
                self.logger.debug("No spread cache file found - starting with empty cache")
                
        except Exception as e:
            self.logger.error(f"Error loading spread cache: {e}")
            self.spread_cache = {}
    
    def _save_spread_cache(self):
        """üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread cache ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            import json
            import os
            from datetime import datetime
            
            cache_data = {
                "_comment": "Spread Cache - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå",
                "_last_updated": datetime.now().isoformat(),
                "_source": "Real broker data",
                "spreads": self.spread_cache,
                "metadata": {
                    "broker": "MetaTrader5",
                    "timeframe": "real-time",
                    "accuracy": "high",
                    "note": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ"
                }
            }
            
            os.makedirs(os.path.dirname(self.spread_cache_file), exist_ok=True)
            with open(self.spread_cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
                
            self.logger.debug(f"üíæ Saved spread cache with {len(self.spread_cache)} entries")
            
        except Exception as e:
            self.logger.error(f"Error saving spread cache: {e}")
    
    def _update_spread_cache(self, symbol: str, spread: float):
        """üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï spread cache"""
        if spread > 0:
            self.spread_cache[symbol.upper()] = spread
            self.logger.debug(f"üîÑ Updated spread cache: {symbol} = {spread:.2f} pips")
    
    def _get_cached_spread(self, symbol: str) -> Optional[float]:
        """üìã ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡∏à‡∏≤‡∏Å cache"""
        return self.spread_cache.get(symbol.upper())
    
    def _get_market_condition_score(self, triangle: Tuple[str, str, str]) -> Dict:
        """üåç ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î (0-20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | Ranging=20, Normal=15, Trending=10, Volatile=5"""
        try:
            current_regime = self._get_current_market_regime()
            regime_scores = {'ranging': 20.0, 'normal': 15.0, 'trending': 10.0, 'volatile': 5.0}
            base_score = regime_scores.get(current_regime, 10.0)
            
            volatility_adjustment = 0.0
            try:
                if hasattr(self, 'market_analyzer') and self.market_analyzer:
                    market_conditions = self.market_analyzer.analyze_market_conditions(list(triangle))
                    volatility = market_conditions.get('volatility_level', 0.001)
                    if volatility < 0.0005:
                        volatility_adjustment = 2.0
                    elif volatility > 0.002:
                        volatility_adjustment = -3.0
            except Exception:
                pass
            
            final_score = base_score + volatility_adjustment
            
            return {
                'score': max(0.0, min(final_score, 20.0)),
                'weight': 0.20,
                'regime': current_regime.upper()
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating market condition score: {e}")
            return {'score': 10.0, 'weight': 0.20, 'regime': 'UNKNOWN'}
    
    def _get_time_pattern_score(self) -> Dict:
        """üïê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ (0-10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | LDN/NY=10, LDN=9, NY=9, Asian=6, Off=3"""
        try:
            current_time = datetime.now()
            hour_gmt = current_time.hour
            
            if 13 <= hour_gmt < 17:
                score, session = 10.0, "London/NY Overlap"
            elif 7 <= hour_gmt < 16:
                score, session = 9.0, "London"
            elif 12 <= hour_gmt < 21:
                score, session = 9.0, "NY"
            elif 0 <= hour_gmt < 9:
                score, session = 6.0, "Asian"
            else:
                score, session = 3.0, "Off-hours"
            
            return {
                'score': score,
                'weight': 0.10,
                'session': session
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating time pattern score: {e}")
            return {'score': 5.0, 'weight': 0.10, 'session': 'Unknown'}
    
    def _get_execution_probability_score(self, triangle: Tuple[str, str, str], direction_info: Dict) -> Dict:
        """‚ö° ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (0-10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | Profit/Cost ratio >= 2.0 = 100%"""
        try:
            profit_percent = direction_info.get('profit_percent', 0)
            cost_percent = direction_info.get('cost_percent', 0.5)
            profit_cost_ratio = profit_percent / cost_percent if cost_percent > 0 else 0
            
            if profit_cost_ratio >= 2.0:
                probability = 100.0
            elif profit_cost_ratio >= 0.5:
                probability = ((profit_cost_ratio - 0.5) / 1.5) * 100.0
            else:
                probability = 0.0
            
            score = (probability / 100.0) * 10.0
            
            return {
                'score': min(score, 10.0),
                'weight': 0.10,
                'probability': probability
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating execution probability: {e}")
            return {'score': 5.0, 'weight': 0.10, 'probability': 50.0}
    
    def _get_risk_score(self, triangle: Tuple[str, str, str], direction_info: Dict) -> Dict:
        """‚ö†Ô∏è ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (0-5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) | 0 groups=5, <50%=4, <80%=3, >=80%=1"""
        try:
            num_active_groups = len(self.active_groups)
            max_groups = self._get_config_value('system_limits.max_concurrent_groups', 5)
            
            if num_active_groups == 0:
                risk_level, score = "VERY LOW", 5.0
            elif num_active_groups < max_groups * 0.5:
                risk_level, score = "LOW", 4.0
            elif num_active_groups < max_groups * 0.8:
                risk_level, score = "MEDIUM", 3.0
            else:
                risk_level, score = "HIGH", 1.0
            
            return {
                'score': score,
                'weight': 0.05,
                'level': risk_level
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating risk score: {e}")
            return {'score': 3.0, 'weight': 0.05, 'level': 'MEDIUM'}
    
    def _get_adaptive_score_threshold(self) -> float:
        """üéØ Adaptive Threshold | Volatile=80, Trending=75, Normal=70, Ranging=65"""
        try:
            current_regime = self._get_current_market_regime()
            regime_thresholds = {'volatile': 80.0, 'trending': 75.0, 'normal': 70.0, 'ranging': 65.0}
            return regime_thresholds.get(current_regime, 70.0)
        except Exception as e:
            self.logger.error(f"Error getting adaptive threshold: {e}")
            return 70.0
    
    def _get_current_market_regime(self) -> str:
        """üìä ‡∏î‡∏∂‡∏á Market Regime ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô | volatile/trending/ranging/normal"""
        try:
            if hasattr(self, 'market_analyzer') and self.market_analyzer:
                try:
                    conditions = self.market_analyzer.analyze_market_conditions()
                    return conditions.get('market_regime', 'normal').lower()
                except Exception:
                    pass
            
            try:
                data = self.broker.get_historical_data('EURUSD', 'H1', 24)
                if data is not None and len(data) > 10:
                    returns = data['close'].pct_change().dropna()
                    volatility = returns.std()
                    if volatility > 0.002:
                        return 'volatile'
                    elif volatility < 0.0005:
                        return 'ranging'
                    else:
                        return 'normal'
            except Exception:
                pass
            
            return 'normal'
        except Exception as e:
            self.logger.error(f"Error getting market regime: {e}")
            return 'normal'
    
    # ==================================================================================
    # END OF INTELLIGENT SCORING SYSTEM
    # ==================================================================================
    
    def _validate_execution_feasibility(self, triangle: Tuple[str, str, str], direction_info: Dict) -> bool:
        """‚≠ê UPGRADED: Intelligent Multi-Factor Scoring (6 factors, 0-100 score, adaptive threshold)"""
        try:
            if not direction_info:
                self.logger.info(f"‚ùå {triangle}: No direction info provided")
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å 6 ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢
            score_result = self._calculate_opportunity_score(triangle, direction_info)
            
            if not score_result:
                self.logger.info(f"‚ùå {triangle}: Failed to calculate score")
                return False
            
            total_score = score_result['total_score']
            factors = score_result['factors']
            
            # Log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            self.logger.info(f"")
            self.logger.info(f"{'='*60}")
            self.logger.info(f"üìä INTELLIGENT SCORING SYSTEM - {triangle}")
            self.logger.info(f"{'='*60}")
            self.logger.info(f"‚úì Profit Score:     {factors['profit']['score']:5.1f} / 35  ({factors['profit']['value']:.4f}%)")
            self.logger.info(f"‚úì Spread Score:     {factors['spread']['score']:5.1f} / 20  ({factors['spread']['value']:.1f} pips avg)")
            self.logger.info(f"‚úì Market Score:     {factors['market']['score']:5.1f} / 20  ({factors['market']['regime']})")
            self.logger.info(f"‚úì Time Score:       {factors['time']['score']:5.1f} / 10  ({factors['time']['session']})")
            self.logger.info(f"‚úì Execution Score:  {factors['execution']['score']:5.1f} / 10  ({factors['execution']['probability']:.0f}%)")
            self.logger.info(f"‚úì Risk Score:       {factors['risk']['score']:5.1f} / 5   ({factors['risk']['level']})")
            self.logger.info(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            self.logger.info(f"üìà TOTAL SCORE:     {total_score:.1f} / 100")
            
            # ‡πÉ‡∏ä‡πâ adaptive threshold ‡∏ï‡∏≤‡∏° market regime
            adaptive_threshold = self._get_adaptive_score_threshold()
            
            self.logger.info(f"üéØ Threshold:       {adaptive_threshold:.1f} ({self._get_current_market_regime().upper()} market)")
            self.logger.info(f"{'='*60}")
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            if total_score >= adaptive_threshold:
                self.logger.info(f"‚úÖ DECISION: ENTER TRADE ({total_score:.1f} >= {adaptive_threshold:.1f})")
                self.logger.info(f"")
                
                # Track metrics
                self.performance_metrics['passed_feasibility_check'] = self.performance_metrics.get('passed_feasibility_check', 0) + 1
                
                return True
            else:
                self.logger.info(f"‚ùå DECISION: SKIP ({total_score:.1f} < {adaptive_threshold:.1f})")
                self.logger.info(f"")
                return False
            
        except Exception as e:
            self.logger.error(f"Error in intelligent scoring: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return False
    
    def _verify_triangle_balance(self, triangle: Tuple[str, str, str], lot_sizes: Dict) -> bool:
        """
        ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ lot sizes ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ triangle ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            pair1, pair2, pair3 = triangle
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            price1 = self.broker.get_current_price(pair1)
            price2 = self.broker.get_current_price(pair2)
            price3 = self.broker.get_current_price(pair3)
            
            if not all([price1, price2, price3]):
                self.logger.warning(f"Cannot get prices for balance check: {triangle}")
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ leg
            lot1 = lot_sizes.get(pair1, 0.01)
            lot2 = lot_sizes.get(pair2, 0.01)
            lot3 = lot_sizes.get(pair3, 0.01)
            
            # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô USD (approximate)
            value1 = lot1 * 100000 * price1
            value2 = lot2 * 100000 * price2 * price3  # EUR/GBP ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô USD
            value3 = lot3 * 100000 * price3
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
            max_value = max(value1, value2, value3)
            min_value = min(value1, value2, value3)
            avg_value = (value1 + value2 + value3) / 3
            
            if avg_value == 0:
                return False
            
            deviation_percent = ((max_value - min_value) / avg_value) * 100
            
            self.logger.info(f"üìä {triangle}: Triangle Balance - {pair1}=${value1:.0f}, {pair2}=${value2:.0f}, {pair3}=${value3:.0f}, Deviation={deviation_percent:.1f}%")
            
            # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô config - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            max_deviation = self._get_config_value('arbitrage_params.triangles.balance_tolerance_percent', 25.0)
            
            if deviation_percent > max_deviation:
                self.logger.info(f"‚ùå {triangle}: Imbalance too high ({deviation_percent:.1f}% > {max_deviation}%)")
                return False
            
            self.logger.info(f"‚úÖ {triangle}: Balance acceptable (deviation {deviation_percent:.1f}% <= {max_deviation}%)")
            return True
            
        except Exception as e:
            self.logger.error(f"Error verifying triangle balance: {e}")
            return True  # Return True on error to not block trades
    
    def log_performance_summary(self):
        """
        ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ Performance Metrics ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Arbitrage ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            metrics = self.performance_metrics
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì conversion rates
            checked = metrics['opportunities_checked']
            if checked > 0:
                direction_pass_rate = (metrics['passed_direction_check'] / checked) * 100
                feasibility_pass_rate = (metrics['passed_feasibility_check'] / checked) * 100
                balance_pass_rate = (metrics['passed_balance_check'] / checked) * 100
                success_rate = (metrics['successful_trades'] / checked) * 100
            else:
                direction_pass_rate = feasibility_pass_rate = balance_pass_rate = success_rate = 0
            
            # ‡∏™‡∏£‡∏∏‡∏õ Forward vs Reverse
            forward = metrics['forward_path_selected']
            reverse = metrics['reverse_path_selected']
            total_paths = forward + reverse
            if total_paths > 0:
                forward_pct = (forward / total_paths) * 100
                reverse_pct = (reverse / total_paths) * 100
            else:
                forward_pct = reverse_pct = 0
            
            self.logger.info("=" * 80)
            self.logger.info("üìä ARBITRAGE SYSTEM PERFORMANCE SUMMARY (IMPROVED)")
            self.logger.info("=" * 80)
            self.logger.info(f"Total Opportunities Checked: {checked}")
            self.logger.info(f"")
            self.logger.info(f"‚úÖ Passed Direction Check: {metrics['passed_direction_check']} ({direction_pass_rate:.1f}%)")
            self.logger.info(f"   ‚îî‚îÄ Forward Path: {forward} ({forward_pct:.1f}%)")
            self.logger.info(f"   ‚îî‚îÄ Reverse Path: {reverse} ({reverse_pct:.1f}%)")
            self.logger.info(f"")
            self.logger.info(f"‚úÖ Passed Feasibility Check: {metrics['passed_feasibility_check']} ({feasibility_pass_rate:.1f}%)")
            self.logger.info(f"‚úÖ Passed Balance Check: {metrics['passed_balance_check']} ({balance_pass_rate:.1f}%)")
            self.logger.info(f"")
            self.logger.info(f"üéØ Successful Trades: {metrics['successful_trades']} ({success_rate:.1f}%)")
            self.logger.info(f"üí∞ Average Expected Profit: {metrics['avg_expected_profit']:.4f}%")
            self.logger.info(f"")
            self.logger.info(f"‚ùå Orders Cancelled (Failures): {metrics['orders_cancelled_due_to_failure']}")
            self.logger.info("=" * 80)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Filter Effectiveness
            if checked > 0:
                filtered_out = checked - metrics['successful_trades']
                filter_effectiveness = (filtered_out / checked) * 100
                self.logger.info(f"üîç Filter Effectiveness: {filter_effectiveness:.1f}% of opportunities filtered out")
                self.logger.info(f"   (This prevents losing trades from poor arbitrage opportunities)")
            
            self.logger.info("=" * 80)
            
        except Exception as e:
            self.logger.error(f"Error logging performance summary: {e}")
    
    def get_active_triangles(self) -> Dict:
        """Get all active triangles"""
        return self.active_triangles
    
    def get_triangle_performance(self) -> Dict:
        """Get performance statistics for triangles"""
        try:
            # Ensure active_triangles is a dict
            if not isinstance(self.active_triangles, dict):
                self.logger.warning(f"active_triangles is not dict: {type(self.active_triangles)}")
                return {
                    'total_triangles': 0,
                    'active_triangles': 0,
                    'closed_triangles': 0,
                    'adaptive_threshold': self.volatility_threshold,
                    'avg_execution_time_ms': 0,
                    'total_opportunities': 0,
                    'successful_trades': 0
                }
            
            total_triangles = len(self.active_triangles)
            active_triangles = 0
            closed_triangles = 0
            
            # Count triangles by status
            for t in self.active_triangles.values():
                if isinstance(t, dict):
                    status = t.get('status', 'unknown')
                    if status == 'active':
                        active_triangles += 1
                    elif status == 'closed':
                        closed_triangles += 1
                else:
                    # If t is not a dict, assume it's active
                    active_triangles += 1
        
            return {
                'total_triangles': total_triangles,
                'active_triangles': active_triangles,
                'closed_triangles': closed_triangles,
                'adaptive_threshold': self.volatility_threshold,
                'avg_execution_time_ms': self.performance_metrics.get('avg_execution_time', 0),
                'total_opportunities': self.performance_metrics.get('total_opportunities', 0),
                'successful_trades': self.performance_metrics.get('successful_trades', 0)
            }
            
        except Exception as e:
            self.logger.error(f"Error in get_triangle_performance: {e}")
            return {
                'total_triangles': 0,
                'active_triangles': 0,
                'closed_triangles': 0,
                'adaptive_threshold': 0,
                'avg_execution_time_ms': 0,
                'total_opportunities': 0,
                'successful_trades': 0
        }
    
    def get_adaptive_parameters(self) -> Dict:
        """Get current adaptive parameters"""
        return {
            # 'market_regime': self.market_regime,  # DISABLED - not used in simple trading
            'volatility_threshold': self.volatility_threshold,
            'adaptive_thresholds': self.adaptive_thresholds,
            'execution_speed_ms': self.execution_speed_ms,
            'performance_metrics': self.performance_metrics
        }
    
    def update_adaptive_parameters(self, new_params: Dict):
        """Update adaptive parameters dynamically"""
        try:
            # if 'market_regime' in new_params:  # DISABLED - not used in simple trading
            #     self.market_regime = new_params['market_regime']
            
            if 'volatility_threshold' in new_params:
                self.volatility_threshold = new_params['volatility_threshold']
            
            if 'execution_speed_ms' in new_params:
                self.execution_speed_ms = new_params['execution_speed_ms']
            
            if 'adaptive_thresholds' in new_params:
                self.adaptive_thresholds.update(new_params['adaptive_thresholds'])
            
            # self.logger.info(f"Adaptive parameters updated: {new_params}")  # DISABLED - too verbose
            
        except Exception as e:
            self.logger.error(f"Error updating adaptive parameters: {e}")
    
    def get_never_cut_loss_positions(self) -> Dict:
        """Get all Never-Cut-Loss positions"""
        never_cut_loss_positions = {}
        
        for triangle, data in self.active_triangles.items():
            if data.get('never_cut_loss', False):
                never_cut_loss_positions[triangle] = data
        
        return never_cut_loss_positions
    
    def calculate_portfolio_health(self) -> Dict:
        """Calculate portfolio health for Never-Cut-Loss system"""
        try:
            total_positions = len(self.active_triangles)
            never_cut_loss_positions = len(self.get_never_cut_loss_positions())
            
            # Calculate average holding time
            current_time = datetime.now()
            holding_times = []
            
            for triangle, data in self.active_triangles.items():
                if data['status'] == 'active':
                    holding_time = (current_time - data['entry_time']).total_seconds() / 3600  # hours
                    holding_times.append(holding_time)
            
            avg_holding_time = np.mean(holding_times) if holding_times else 0
            
            # Calculate success rate
            success_rate = 0
            if self.performance_metrics['total_opportunities'] > 0:
                success_rate = self.performance_metrics['successful_trades'] / self.performance_metrics['total_opportunities']
            
            return {
                'total_positions': total_positions,
                'never_cut_loss_positions': never_cut_loss_positions,
                'avg_holding_time_hours': avg_holding_time,
                'success_rate': success_rate,
                # 'market_regime': self.market_regime,  # DISABLED - not used in simple trading
                'adaptive_threshold': self.volatility_threshold,
                'execution_speed_ms': self.performance_metrics['avg_execution_time'],
                'duplicate_prevention': {
                    'used_currency_pairs': {k: list(v) for k, v in self.used_currency_pairs.items()},
                    'active_groups_count': len(self.active_groups),
                    'group_currency_mapping': self.group_currency_mapping
                }
            }
            
        except Exception as e:
            self.logger.error(f"Error calculating portfolio health: {e}")
            return {}
    
    def get_duplicate_prevention_status(self) -> Dict:
        """Get status of duplicate prevention system"""
        try:
            return {
                'is_prevention_active': True,
                'used_currency_pairs': {k: list(v) for k, v in self.used_currency_pairs.items()},
                'active_groups_count': len(self.active_groups),
                'group_currency_mapping': self.group_currency_mapping,
                'prevention_rules': {
                    'rule_1': '‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà',
                    'rule_2': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    'rule_3': '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î'
                }
            }
        except Exception as e:
            self.logger.error(f"Error getting duplicate prevention status: {e}")
            return {}
    
    def check_currency_pair_availability(self, symbol: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÉ‡∏î‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            for triangle_name, used_pairs in self.used_currency_pairs.items():
                if symbol in used_pairs:
                    return False
            return True
        except Exception as e:
            self.logger.error(f"Error checking currency pair availability: {e}")
            return False
    
    def _save_active_groups(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• active groups ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)"""
        try:
            import json
            import os
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            os.makedirs(os.path.dirname(self.persistence_file), exist_ok=True)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
            save_data = {
                'active_groups': self.active_groups,
                'recovery_in_progress': list(self.recovery_in_progress),
                'group_counters': self.group_counters,  # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                'is_arbitrage_paused': self.is_arbitrage_paused,  # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                'used_currency_pairs': {k: list(v) for k, v in self.used_currency_pairs.items()},  # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                'group_currency_mapping': self.group_currency_mapping,
                # 'arbitrage_sent': self.arbitrage_sent,  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                # 'arbitrage_send_time': self.arbitrage_send_time.isoformat() if self.arbitrage_send_time else None,  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                'saved_at': datetime.now().isoformat()
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            with open(self.persistence_file, 'w') as f:
                json.dump(save_data, f, indent=2, default=str)
            
            self.logger.debug(f"üíæ Saved {len(self.active_groups)} active groups to {self.persistence_file}")
            
        except Exception as e:
            self.logger.error(f"Error saving active groups: {e}")
    
    def _load_active_groups(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• active groups ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)"""
        try:
            import json
            import os
            from datetime import datetime
            
            if not os.path.exists(self.persistence_file):
                self.logger.debug("No persistence file found, starting fresh")
                return
            
            with open(self.persistence_file, 'r') as f:
                save_data = json.load(f)
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
            self.active_groups = save_data.get('active_groups', {})
            self.recovery_in_progress = set(save_data.get('recovery_in_progress', []))
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
            self.group_counters = save_data.get('group_counters', {})
            self.is_arbitrage_paused = save_data.get('is_arbitrage_paused', {})
            
            # ‡πÅ‡∏õ‡∏•‡∏á used_currency_pairs ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô set
            used_currency_pairs_data = save_data.get('used_currency_pairs', {})
            if isinstance(used_currency_pairs_data, dict):
                # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                self.used_currency_pairs = {k: set(v) for k, v in used_currency_pairs_data.items()}
            else:
                # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤: global set (backward compatibility)
                self.used_currency_pairs = {f"triangle_{i}": set(used_currency_pairs_data) for i in range(1, 7)}
            
            self.group_currency_mapping = save_data.get('group_currency_mapping', {})
            # self.arbitrage_sent = save_data.get('arbitrage_sent', False)  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
            
            # ‡πÅ‡∏õ‡∏•‡∏á arbitrage_send_time ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô datetime (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
            # arbitrage_send_time_str = save_data.get('arbitrage_send_time')
            # if arbitrage_send_time_str:
            #     self.arbitrage_send_time = datetime.fromisoformat(arbitrage_send_time_str)
            # else:
            #     self.arbitrage_send_time = None
            
            saved_at = save_data.get('saved_at', 'Unknown')
            
            if self.active_groups:
                self.logger.info(f"üìÇ Loaded {len(self.active_groups)} active groups from {self.persistence_file}")
                self.logger.info(f"   Groups: {list(self.active_groups.keys())}")
                self.logger.info(f"   Recovery in progress: {list(self.recovery_in_progress)}")
                self.logger.info(f"   Saved at: {saved_at}")
            else:
                self.logger.debug("No active groups found in persistence file")
                
        except Exception as e:
            self.logger.error(f"Error loading active groups: {e}")
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            self.active_groups = {}
            self.recovery_in_progress = set()
            # self.group_counter = 0  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ group_counters ‡πÅ‡∏ó‡∏ô
            # self.arbitrage_sent = False  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
            # self.arbitrage_send_time = None  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
            # self.used_currency_pairs = set()  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ used_currency_pairs ‡πÅ‡∏ó‡∏ô
            self.group_currency_mapping = {}
    
    def _update_group_data(self, group_id: str, group_data: Dict):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            self.active_groups[group_id] = group_data
            self._save_active_groups()
        except Exception as e:
            self.logger.error(f"Error updating group data: {e}")
    
    def _remove_group_data(self, group_id: str):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if group_id in self.active_groups:
                del self.active_groups[group_id]
            self.recovery_in_progress.discard(group_id)
            self._save_active_groups()
        except Exception as e:
            self.logger.error(f"Error removing group data: {e}")
    
    def _reset_group_data_after_close(self, group_id: str):
        """Reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î Group ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• triangle_type ‡∏à‡∏≤‡∏Å group_id
            triangle_type = None
            for gid, gdata in list(self.active_groups.items()):
                if gid == group_id:
                    triangle_type = gdata.get('triangle_type', 'unknown')
                    break
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô active_groups ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å group_id
            if not triangle_type:
                if 'triangle_1' in group_id:
                    triangle_type = 'triangle_1'
                elif 'triangle_2' in group_id:
                    triangle_type = 'triangle_2'
                elif 'triangle_3' in group_id:
                    triangle_type = 'triangle_3'
                elif 'triangle_4' in group_id:
                    triangle_type = 'triangle_4'
                elif 'triangle_5' in group_id:
                    triangle_type = 'triangle_5'
                elif 'triangle_6' in group_id:
                    triangle_type = 'triangle_6'
            
            if triangle_type:
                # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• used_currency_pairs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangle ‡∏ô‡∏µ‡πâ
                if triangle_type in self.used_currency_pairs:
                    self.used_currency_pairs[triangle_type].clear()
                    self.logger.info(f"üîÑ Cleared used_currency_pairs for {triangle_type}")
                
                # Reset group counter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangle ‡∏ô‡∏µ‡πâ
                if triangle_type in self.group_counters:
                    self.group_counters[triangle_type] = 0
                    self.logger.info(f"üîÑ Reset {triangle_type} counter to 0 - next group will be group_{triangle_type}_1")
                
                # Reset hedge tracker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö group ‡∏ô‡∏µ‡πâ
                if hasattr(self, 'correlation_manager') and self.correlation_manager:
                    # Reset ‡πÑ‡∏°‡πâ arbitrage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô group ‡∏ô‡∏µ‡πâ
                    group_pairs = self.group_currency_mapping.get(group_id, [])
                    for symbol in group_pairs:
                        # Individual order tracker handles cleanup automatically via sync
                        self.logger.info(f"üîÑ Reset hedge tracker for {group_id}:{symbol}")
                
                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• group_currency_mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö group ‡∏ô‡∏µ‡πâ
                if group_id in self.group_currency_mapping:
                    del self.group_currency_mapping[group_id]
                    self.logger.info(f"üîÑ Removed group_currency_mapping for {group_id}")
                
                self.logger.info(f"‚úÖ Reset data for {triangle_type} after closing {group_id}")
            else:
                self.logger.warning(f"‚ö†Ô∏è Could not determine triangle_type for {group_id}")
                
        except Exception as e:
            self.logger.error(f"Error resetting group data after close: {e}")
    
    def set_profit_threshold_per_lot(self, threshold_per_lot: float):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠ lot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        try:
            self.profit_threshold_per_lot = threshold_per_lot
            self.logger.info(f"üéØ Profit threshold per lot set to {threshold_per_lot} USD")
        except Exception as e:
            self.logger.error(f"Error setting profit threshold per lot: {e}")
    
    def get_profit_threshold_per_lot(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠ lot ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.profit_threshold_per_lot
    
    def get_enhanced_group_data_for_gui(self, group_id: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI (Net PnL, Recovery count, Trailing Stop status)"""
        try:
            # Get basic group data
            group_data = self.active_groups.get(group_id, {})
            
            # Calculate Arbitrage PnL
            arbitrage_pnl = 0.0
            arbitrage_count = len(group_data.get('positions', []))
            
            triangle_type = group_data.get('triangle_type', 'unknown')
            triangle_magic = self.triangle_magic_numbers.get(triangle_type, 234000)
            
            all_positions = self.broker.get_all_positions()
            for pos in all_positions:
                if pos.get('magic') == triangle_magic:
                    arbitrage_pnl += pos.get('profit', 0)
            
            # Calculate Recovery PnL
            recovery_pnl = 0.0
            recovery_count = 0
            if self.correlation_manager:
                recovery_pnl = self._get_recovery_pnl_for_group(group_id)
                
                # Count recovery orders
                all_orders = self.correlation_manager.order_tracker.get_all_orders()
                for order_key, order_data in all_orders.items():
                    if order_data.get('type') == 'RECOVERY':
                        # Check if this recovery belongs to this group
                        hedging_for = order_data.get('hedging_for', '')
                        if hedging_for:
                            # Extract original ticket
                            original_ticket = hedging_for.split('_')[0] if '_' in hedging_for else None
                            if original_ticket:
                                # Check if original ticket belongs to this group
                                for pos in all_positions:
                                    if str(pos.get('ticket')) == str(original_ticket) and pos.get('magic') == triangle_magic:
                                        recovery_count += 1
                                        break
            
            # Calculate Net PnL
            net_pnl = arbitrage_pnl + recovery_pnl
            
            # Calculate Min Profit Target (scaled with balance)
            balance = self.broker.get_account_balance()
            if not balance or balance <= 0:
                balance = 10000.0
            
            # ‚≠ê ‡πÉ‡∏ä‡πâ min_profit_base ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ balance_multiplier
            min_profit_target = self.min_profit_base
            
            # Get Trailing Stop Status
            trailing_active = False
            trailing_peak = 0.0
            trailing_stop = 0.0
            
            if group_id in self.group_trailing_stops:
                trailing_data = self.group_trailing_stops[group_id]
                trailing_active = trailing_data.get('active', False)
                trailing_peak = trailing_data.get('peak', 0.0)
                trailing_stop = trailing_data.get('stop', 0.0)
            
            # Return enhanced data
            return {
                'arbitrage_pnl': arbitrage_pnl,
                'recovery_pnl': recovery_pnl,
                'net_pnl': net_pnl,
                'arbitrage_count': arbitrage_count,
                'recovery_count': recovery_count,
                'min_profit_target': min_profit_target,
                'trailing_active': trailing_active,
                'trailing_peak': trailing_peak,
                'trailing_stop': trailing_stop,
                'balance': balance
            }
        except Exception as e:
            self.logger.error(f"Error getting enhanced group data: {e}")
            return {
                'arbitrage_pnl': 0.0,
                'recovery_pnl': 0.0,
                'net_pnl': 0.0,
                'arbitrage_count': 0,
                'recovery_count': 0,
                'min_profit_target': 5.0,
                'trailing_active': False,
                'trailing_peak': 0.0,
                'trailing_stop': 0.0,
                'balance': 10000.0
            }
    
    def update_active_groups_with_enhanced_data(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô active_groups ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI"""
        try:
            for group_id in list(self.active_groups.keys()):
                enhanced_data = self.get_enhanced_group_data_for_gui(group_id)
                self.active_groups[group_id].update(enhanced_data)
        except Exception as e:
            self.logger.error(f"Error updating active groups with enhanced data: {e}")
    
    def _load_trailing_stop_config(self):
        """‡πÇ‡∏´‡∏•‡∏î Trailing Stop Config ‡∏à‡∏≤‡∏Å adaptive_params.json"""
        try:
            import json
            import os
            
            try:
                import json
                with open('config/adaptive_params.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
            except Exception:
                config_path = 'config/adaptive_params.json'
                if os.path.exists(config_path):
                    with open(config_path, 'r', encoding='utf-8') as f:
                        config = json.load(f)
                else:
                    config = {}
            
            # Load arbitrage params
            arb_params = config.get('arbitrage_params', {})
            detection = arb_params.get('detection', {})
            closing = arb_params.get('closing', {})
            triangles = arb_params.get('triangles', {})
            
            # ‚≠ê Load Trailing Stop Settings
            self.trailing_stop_enabled = closing.get('trailing_stop_enabled', True)
            self.trailing_stop_distance = closing.get('trailing_stop_distance', 10.0)
            self.min_profit_base = closing.get('min_profit_base', 10.0)
            self.min_profit_base_balance = closing.get('min_profit_base_balance', 10000.0)
            self.lock_profit_percentage = closing.get('lock_profit_percentage', 0.5)
            
            # ‚≠ê Load Arbitrage Detection Settings
            self.min_arbitrage_threshold = detection.get('min_threshold', 0.0001)
            self.spread_tolerance = detection.get('spread_tolerance', 0.5)
            
            # ‚≠ê Load Triangle Settings
            self.max_active_triangles_config = triangles.get('max_active_triangles', 4)
            
            self.logger.info("=" * 60)
            self.logger.info("‚úÖ ARBITRAGE CONFIG LOADED")
            self.logger.info("=" * 60)
            self.logger.info(f"üîí Trailing Stop: {'ENABLED' if self.trailing_stop_enabled else 'DISABLED'}")
            if self.trailing_stop_enabled:
                self.logger.info(f"   Distance: ${self.trailing_stop_distance}")
                self.logger.info(f"   Min Profit: ${self.min_profit_base} @ ${self.min_profit_base_balance}")
                self.logger.info(f"   Lock Profit: {self.lock_profit_percentage*100:.0f}% of Peak")
            self.logger.info(f"‚ö° Min Threshold: {self.min_arbitrage_threshold}")
            self.logger.info(f"üìä Spread Tolerance: {self.spread_tolerance} pips")
            self.logger.info(f"üî∫ Max Active Triangles: {self.max_active_triangles_config}")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"‚ùå Error loading trailing stop config: {e}")
            # Fallback values
            self.trailing_stop_enabled = True
            self.trailing_stop_distance = 10.0
            self.min_profit_base = 10.0
            self.min_profit_base_balance = 10000.0
            self.lock_profit_percentage = 0.5
            self.min_arbitrage_threshold = 0.0001
            self.spread_tolerance = 0.5
            self.max_active_triangles_config = 4
    
    def reload_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å config file (Hot Reload!)"""
        try:
            self.logger.info("üîÑ Reloading arbitrage config from adaptive_params.json...")
            self._load_trailing_stop_config()
            self.logger.info("‚úÖ Arbitrage config reloaded!")
            return True
                
        except Exception as e:
            self.logger.error(f"‚ùå Error reloading arbitrage config: {e}")
            return False
