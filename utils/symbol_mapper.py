"""
Symbol Mapper - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Broker
================================================================

‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
- ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Broker ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (EURUSD) ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á (EURUSDm, EURUSD.a, etc.)
- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÇ‡∏´‡∏•‡∏î mapping ‡∏à‡∏≤‡∏Å JSON
- Validate ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö suffix ‡∏ï‡πà‡∏≤‡∏á‡πÜ: m, .a, _sb, ., etc.
"""

import json
import os
import logging
from typing import Dict, List, Optional, Set

class SymbolMapper:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ mapping ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ standard ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á broker"""
    
    def __init__(self, mapping_file: str = "data/symbol_mapping.json"):
        self.mapping_file = mapping_file
        self.symbol_map: Dict[str, str] = {}  # {'EURUSD': 'EURUSDm'}
        self.reverse_map: Dict[str, str] = {}  # {'EURUSDm': 'EURUSD'}
        self.available_symbols: Set[str] = set()
        self.logger = logging.getLogger(__name__)
        
        # ‡πÇ‡∏´‡∏•‡∏î mapping ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.load_mapping()
    
    def scan_and_map(self, broker_symbols: List[str], required_pairs: List[str]) -> Dict[str, Optional[str]]:
        """
        ‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà symbol ‡∏à‡∏≤‡∏Å broker
        
        Args:
            broker_symbols: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ symbol ‡∏à‡∏≤‡∏Å broker
            required_pairs: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (standard names)
        
        Returns:
            Dict ‡∏Ç‡∏≠‡∏á mapping: {'EURUSD': 'EURUSDm', 'GBPUSD': None, ...}
        """
        self.logger.info(f"üîç Scanning {len(broker_symbols)} broker symbols...")
        self.available_symbols = set(broker_symbols)
        
        mapping_result = {}
        
        for base_pair in required_pairs:
            matched_symbol = self._find_matching_symbol(base_pair, broker_symbols)
            mapping_result[base_pair] = matched_symbol
            
            if matched_symbol:
                self.symbol_map[base_pair] = matched_symbol
                self.reverse_map[matched_symbol] = base_pair
                self.logger.info(f"   {base_pair:8s} ‚Üí {matched_symbol:15s} ‚úÖ")
            else:
                self.logger.warning(f"   {base_pair:8s} ‚Üí NOT FOUND ‚ùå")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å mapping
        if self.symbol_map:
            self.save_mapping()
            self.logger.info(f"‚úÖ Mapped {len(self.symbol_map)}/{len(required_pairs)} required pairs")
        
        return mapping_result
    
    def _find_matching_symbol(self, base_pair: str, broker_symbols: List[str]) -> Optional[str]:
        """
        ‡∏´‡∏≤ symbol ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö base_pair ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ broker
        
        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö suffix: m, .a, _sb, ., .m, .pro, etc.
        """
        base_upper = base_pair.upper()
        
        # 1. ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
        if base_upper in broker_symbols:
            return base_upper
        
        # 2. ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ suffix
        for symbol in broker_symbols:
            # ‡∏•‡∏ö suffix ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            clean_symbol = symbol.upper()
            
            # ‡∏•‡∏≠‡∏á‡∏•‡∏ö suffix ‡∏ï‡πà‡∏≤‡∏á‡πÜ
            possible_suffixes = ['M', '.A', '_SB', '.', '.M', '.PRO', '_M', '_A', 'M.', 'A.']
            
            for suffix in possible_suffixes:
                if clean_symbol.endswith(suffix):
                    without_suffix = clean_symbol[:-len(suffix)]
                    if without_suffix == base_upper:
                        return symbol
            
            # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ symbol ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ base_pair ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if clean_symbol.startswith(base_upper):
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô suffix ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÑ‡∏´‡∏°
                remaining = clean_symbol[len(base_upper):]
                if remaining in possible_suffixes or len(remaining) <= 3:
                    return symbol
        
        return None
    
    def get_real_symbol(self, base_symbol: str) -> str:
        """
        ‡πÅ‡∏õ‡∏•‡∏á base symbol ‡πÄ‡∏õ‡πá‡∏ô real symbol ‡∏Ç‡∏≠‡∏á broker
        
        Args:
            base_symbol: ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'EURUSD'
        
        Returns:
            ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á broker ‡πÄ‡∏ä‡πà‡∏ô 'EURUSDm' ‡∏´‡∏£‡∏∑‡∏≠ base_symbol ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ mapping
        """
        return self.symbol_map.get(base_symbol.upper(), base_symbol)
    
    def get_base_symbol(self, real_symbol: str) -> str:
        """
        ‡πÅ‡∏õ‡∏•‡∏á real symbol ‡πÄ‡∏õ‡πá‡∏ô base symbol
        
        Args:
            real_symbol: ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å broker ‡πÄ‡∏ä‡πà‡∏ô 'EURUSDm'
        
        Returns:
            ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'EURUSD' ‡∏´‡∏£‡∏∑‡∏≠ real_symbol ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ mapping
        """
        return self.reverse_map.get(real_symbol, real_symbol)
    
    def validate_required_pairs(self, required_pairs: List[str]) -> Dict[str, bool]:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
        
        Returns:
            Dict: {'EURUSD': True, 'GBPUSD': False, ...}
        """
        validation = {}
        
        for pair in required_pairs:
            validation[pair] = pair in self.symbol_map and self.symbol_map[pair] is not None
        
        return validation
    
    def get_missing_pairs(self, required_pairs: List[str]) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
        return [pair for pair in required_pairs if pair not in self.symbol_map or self.symbol_map[pair] is None]
    
    def save_mapping(self) -> bool:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å mapping ‡∏•‡∏á JSON file"""
        try:
            os.makedirs(os.path.dirname(self.mapping_file), exist_ok=True)
            
            with open(self.mapping_file, 'w', encoding='utf-8') as f:
                json.dump(self.symbol_map, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üíæ Saved symbol mapping to {self.mapping_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error saving symbol mapping: {e}")
            return False
    
    def load_mapping(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î mapping ‡∏à‡∏≤‡∏Å JSON file"""
        try:
            if not os.path.exists(self.mapping_file):
                self.logger.debug(f"No existing mapping file at {self.mapping_file}")
                return False
            
            with open(self.mapping_file, 'r', encoding='utf-8') as f:
                self.symbol_map = json.load(f)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á reverse map
            self.reverse_map = {v: k for k, v in self.symbol_map.items()}
            
            self.logger.info(f"üìÇ Loaded {len(self.symbol_map)} symbol mappings from {self.mapping_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error loading symbol mapping: {e}")
            return False
    
    def clear_mapping(self):
        """‡∏•‡πâ‡∏≤‡∏á mapping ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.symbol_map.clear()
        self.reverse_map.clear()
        self.available_symbols.clear()
        self.logger.info("üóëÔ∏è Cleared all symbol mappings")
    
    def get_mapping_summary(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        if not self.symbol_map:
            return "No symbol mappings available"
        
        lines = ["Symbol Mapping Summary:", "=" * 50]
        for base, real in sorted(self.symbol_map.items()):
            lines.append(f"  {base:8s} ‚Üí {real}")
        lines.append("=" * 50)
        lines.append(f"Total: {len(self.symbol_map)} pairs mapped")
        
        return "\n".join(lines)
    
    def is_mapped(self, base_symbol: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ symbol ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å map ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return base_symbol.upper() in self.symbol_map
    
    def get_all_mapped_pairs(self) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà map ‡πÅ‡∏•‡πâ‡∏ß (base names)"""
        return list(self.symbol_map.keys())
    
    def get_all_real_symbols(self) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ symbol ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (broker names)"""
        return list(self.symbol_map.values())

